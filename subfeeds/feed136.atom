<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://csells.github.io/sb6/subfeeds/feed136.atom</id>
  <title>Marquee de Sells</title>
  <updated>2019-08-04T07:00:00.000Z</updated>
  <link rel="first" href="https://csells.github.io/sb6/feed.atom"/>
  <link rel="last" href="https://csells.github.io/sb6/subfeeds/feed178.atom"/>
  <link rel="previous" href="https://csells.github.io/sb6/subfeeds/feed135.atom"/>
  <link rel="next" href="https://csells.github.io/sb6/subfeeds/feed137.atom"/>
  <link rel="self" href="https://csells.github.io/sb6/subfeeds/feed136.atom"/>
  <author>
    <name>Chris Sells</name>
    <uri>https://csells.github.io/sb6/</uri>
    <email>csells@sellsbrothers.com</email>
  </author>
  <category term=".net" label=".NET"/>
  <category term="book" label="Books"/>
  <category term="books" label="Books"/>
  <category term="colophon" label="Colophon"/>
  <category term="conference" label="Conference"/>
  <category term="data" label="Data"/>
  <category term="fun" label="Fun"/>
  <category term="interview" label="Interviewing"/>
  <category term="money" label="Money"/>
  <category term="oslofeaturedcontent" label="Oslo"/>
  <category term="osloeditorial" label="Oslo"/>
  <category term="oslo" label="Oslo"/>
  <category term="telerik" label="Telerik"/>
  <category term="spout" label="The Spout"/>
  <category term="tools" label="Tools"/>
  <category term="win8" label="Windows 8"/>
  <category term="writing" label="Writing"/>
  <icon>https://csells.github.io/sb6//public/favicon.ico</icon>
  <logo>https://csells.github.io/sb6//public/images/vikingme128x128.jpg</logo>
  <subtitle>Chris's insight outlet</subtitle>
  <entry>
    <id>https://csells.github.io/sb6/521</id>
    <title>C# Builder sneak preview</title>
    <updated>2003-04-22T07:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2003-04-22T07:00:00.000Z</published>
    <summary>Here. From jt: "Borland is pleased to offer a preview of its premier enterprise solution for C# development on the Microsoft.NET Framework...."</summary>
    <content type="html">&lt;h1>C# Builder sneak preview&lt;/h1>
&lt;a href="http://www.borland.com/csharpbuilder/">Here&lt;/a>. From jt: "Borland is pleased to offer a preview of its premier enterprise solution for C# development on the Microsoft .NET Framework...."</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/516</id>
    <title>CornSharp</title>
    <updated>2003-04-21T07:00:00.000Z</updated>
    <published>2003-04-21T07:00:00.000Z</published>
    <summary>Here. From Eric Sink: CornSharp (written entirely in C#) is a free tool for editing and publishing a weblog. CornSharp generates static HTML files which can be used on any web server.</summary>
    <content type="html">&lt;h1>CornSharp&lt;/h1>
&lt;a href="http://software.ericsink.com/CornSharp.html">Here&lt;/a>. From Eric Sink: CornSharp (written entirely in C#) is a free tool for editing and publishing a weblog. CornSharp generates static HTML files which can be used on any web server.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/515</id>
    <title>"Look with favor upon a bold beginning"</title>
    <updated>2003-04-21T07:00:00.000Z</updated>
    <published>2003-04-21T07:00:00.000Z</published>
    <summary>Here. The one where I start to work for Microsoft as an employee.</summary>
    <content type="html">&lt;h1>"Look with favor upon a bold beginning"&lt;/h1>
&lt;a href="/12556">Here&lt;/a>. The one where I start to work for Microsoft as an employee.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/12394</id>
    <title>The Human Side of Microsoft</title>
    <updated>2003-04-21T07:00:00.000Z</updated>
    <category term="interview" label="Interviewing"/>
    <published>2003-04-21T07:00:00.000Z</published>
    <summary>For more than a year, I've had a request to video tape an interview at Microsoft up on this page. The goal was to show the human side of Microsoft by showing that one of their most famous practices isn't something to be scared of. I never expected that I'd actually get to tape an interview. In fact, I expected to be ignored by Microsoft altogether. Of course, as the most juicy litigation target in the world, and especially sensitive to legal issues, Microsoft couldn't grant my request. That didn't surprise ...</summary>
    <content type="html">&lt;h1>The Human Side of Microsoft&lt;/h1>

&lt;p>For more than a year, I've had a request to video tape an interview at Microsoft up on this page. The goal was to show the human side of Microsoft by showing that one of their most famous practices isn't something to be scared of. I never expected that I'd actually get to tape an interview. In fact, I expected to be ignored by Microsoft altogether.&lt;/p>&lt;p>Of course, as the most juicy litigation target in the world, and especially sensitive to legal issues, Microsoft couldn't grant my request. That didn't surprise 
me. What did surprise me is how hard that they tried. In fact, all kinds of folks at Microsoft -- from engineers who wanted to interview 
me to managers who wanted to help make it happen to HR folks who went to legal to ask -- all kinds of folks at Microsoft really did *try* to make it happen.&lt;/p>&lt;p>So, while I'll never be able to put a recording of an interview up on this site, I can tell you that my mission to find the human side of Microsoft was a success. All of the people I've encountered there -- whether trying to let 
me tape an interview or taking my feedback on whatever technology I'm working that day -- all of the folks that I've encountered at Microsoft really *care* about doing the right thing. They want interviewees to succeed. They want to build the right products. They want to 
meet their customers' needs. And as much guff as I give them (they are a juicy target), by and large they succeed. I wouldn't spend my time with their technologies if they didn't.&lt;/p>&lt;p>With that in mind, I withdraw my request. I'm seen the human side of Microsoft. Thanks for showing it to 
me.&lt;/p></content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/12556</id>
    <title>"Look with favor upon a bold 
beginning"</title>
    <updated>2003-04-21T07:00:00.000Z</updated>
    <category term="spout" label="The Spout"/>
    <published>2003-04-21T07:00:00.000Z</published>
    <summary>A couple of weeks ago, I was having lunch with my wife at a little Chinese restaurant. My fortune was the title of this spout piece. I immediately associated it with my recent job interview at Microsoft and it made me smile. I had already pretty much decided to take the job, but it was nice that the Universe agreed with me. : ) Right now I'm sitting in NEO (New Employee Orientation) for Microsoft employees. Not only is it a cool name, but the nice folks at Microsoft provide a wireless network for new folks ...</summary>
    <content type="html">&lt;h1>"Look with favor upon a bold 
beginning"&lt;/h1>
&lt;p>A couple of weeks ago, I 
was having lunch with my wife at a little Chinese restaurant. My fortune was the 
title of this spout piece. I immediately associated it with &lt;a href="/12392">
my recent job interview at Microsoft&lt;/a> and it made me smile. I had already 
pretty much decided to take the job, but it was nice that the Universe agreed 
with me. : )&lt;/p>&lt;p>Right now I'm sitting in NEO (New Employee Orientation) for 
Microsoft employees. Not only is it a cool name, but the nice folks at Microsoft 
provide a wireless network for new folks that can't spent hours w/o one 
(although I'm the only one that's geeky enough to have his laptop out at the 
moment : ). I start today as a Content Strategist on the MSDN content team at 
Microsoft, Corp. I'll be in charge of the Longhorn DevCenter. A DevCenter is a 
section of the MSDN web site that focuses on a specific technology area, like &lt;a href="http://msdn.microsoft.com/xml">
the XML/Web Services DevCenter&lt;/a>.&lt;/p>&lt;p>Longhorn is Microsoft's next major 
operation system (and &lt;a href="http://www.microsoft.com/windowsserver2003/">
different than Windows Server 2003&lt;/a>, which is the OS that Microsoft is 
launching this month). I can't (yet) say anything more about Longhorn except 
that it's cool enough that I took a job at MS so that I could get my hands on 
it. If you are dying for more info on Longhorn, but aren't quite ready to change 
your employment arrangements to get it, &lt;a href="http://msdn.microsoft.com/events/pdc/">
check out the PDC in October&lt;/a>. And, if you stop by and say &amp;quot;hi,&amp;quot; I'll show 
you the implant scars... : )&lt;/p></content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/514</id>
    <title>Windows 2003 Hands on Labs</title>
    <updated>2003-04-20T07:00:00.000Z</updated>
    <published>2003-04-20T07:00:00.000Z</published>
    <summary>Here. From Carlos Aquino: I found Windows 2003 Hands on Labs on http://www.only4gurus.com. There is three exercises about the new features coming with the Windows 2003 Server. They have a section with some documentations about it too.</summary>
    <content type="html">&lt;h1>Windows 2003 Hands on Labs&lt;/h1>
&lt;a href="http://www.only4gurus.com/v2/index.asp">Here&lt;/a>. From Carlos Aquino: I found Windows 2003 Hands on Labs on http://www.only4gurus.com . There is three exercises about the new features coming with the Windows 2003 Server. They have a section with some documentations about it too.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/12395</id>
    <title>If Richard Feynman applied for a job at Microsoft</title>
    <updated>2003-04-20T07:00:00.000Z</updated>
    <category term="interview" label="Interviewing"/>
    <published>2003-04-20T07:00:00.000Z</published>
    <summary>Interviewer: Now comes the part of the interview where we ask a question to test your creative thinking ability. Don't think too hard about it, just apply everyday common sense, and describe your reasoning process. Here's the question: Why are manhole covers round? Feynman: They're not. Some manhole covers are square. It's true that there are SOME round ones, but I've seen square ones, and rectangular ones. Interviewer: But just considering the round ones, why are they round? Feynman: If we are just conside...</summary>
    <content type="html">&lt;h1>If Richard Feynman applied for a job at Microsoft&lt;/h1>

&lt;p>&lt;b>Interviewer: &lt;/b>Now comes the part of the interview where we ask a question to test your creative thinking ability. Don't think too hard about it, just apply everyday common sense, and describe your reasoning process.&lt;br>&lt;br>Here's the question: Why are manhole covers round?&lt;br>&lt;br>&lt;b>Feynman: &lt;/b>They're not. Some manhole covers are square. It's true that there are SOME round ones, but I've seen square ones, and rectangular ones.&lt;br>&lt;br>&lt;b>Interviewer: &lt;/b>But just considering the round ones, why are they round?&lt;br>&lt;br>&lt;b>Feynman: &lt;/b>If we are just considering the round ones, then they are round by definition. That statement is a tautology.&lt;br>&lt;br>&lt;b>Interviewer: &lt;/b>I 
mean, why are there round ones at all? Is there some particular value to having round ones?&lt;br>&lt;br>&lt;b>Feynman: &lt;/b>Yes. Round covers are used when the hole they are covering up is also round. It's simplest to cover a round hole with a round cover.&lt;br>&lt;br>&lt;b>Interviewer: &lt;/b>Can you think of a property of round covers that gives them an advantage over square ones?&lt;br>&lt;br>&lt;b>Feynman: &lt;/b>We have to look at what is under the cover to answer that question. The hole below the cover is round because a cylinder is the strongest shape against the compression of the earth around it. Also, the term &amp;quot;manhole&amp;quot; implies a passage big enough for a man, and a human being climbing down a ladder is roughly circular in cross-section. So a cylindrical pipe is the natural shape for manholes. The covers are simply the shape needed to cover up a cylinder.&lt;br>&lt;br>&lt;b>Interviewer: &lt;/b>Do you believe there is a safety issue? I 
mean, couldn't square covers fall into the hole and hurt someone?&lt;br>&lt;br>&lt;b>Feynman: &lt;/b>Not likely. Square covers are sometimes used on prefabricated vaults where the access passage is also square. The cover is larger than the passage, and sits on a ledge that supports it along the entire perimeter. The covers are usually made of solid 
metal and are very heavy. Let's assume a two-foot square opening and a ledge width of 1-1/2 inches. In order to get it to fall in, you would have to lift one side of the cover, then rotate it 30 degrees so that the cover would clear the ledge, and then tilt the cover up nearly 45 degrees from horizontal before the center of gravity would shift enough for it to fall in. Yes, it's possible, but very unlikely. The people authorized to open manhole covers could easily be trained to do it safely. Applying common engineering sense, the shape of a manhole cover is entirely determined by the shape of the opening it is intended to cover.&lt;br>&lt;br>&lt;b>Interviewer (troubled): &lt;/b>Excuse 
me a moment; I have to discuss something with my management team. &lt;i>(Leaves room.) &lt;/i>&lt;br>&lt;br>&lt;i>(Interviewer returns after 10 minutes) &lt;/i>&lt;br>&lt;br>&lt;b>Interviewer: &lt;/b>We are going to recommend you for immediate hiring into the marketing department.&lt;/p>&lt;p>&lt;i>Keith Michaels&lt;br>&lt;a href="mailto:krm@sdc.cs.boeing.com">krm@sdc.cs.boeing.com&lt;/a>&lt;/i>&lt;/p></content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/12396</id>
    <title>Interview Synopsis</title>
    <updated>2003-04-20T07:00:00.000Z</updated>
    <category term="interview" label="Interviewing"/>
    <published>2003-04-20T07:00:00.000Z</published>
    <summary>From Fred (not his real name): So the interview was rough, as to be expected. Here is a synopsis: 10:15-10:45 - Met with my recruiter. Discussed what day would be like and talked about the two teams I would be interviewing with: the CLR team and the Enterprise Services team. 11:00-12:00 - Enterprise Services Interview: Discussed High Performance systems and Enterprise Service standards. Programming problem: Design and Implement a self-managing Thread Pool class. 12:00-1:30 - CLR team Lunch interview: Discus...</summary>
    <content type="html">&lt;h1>Interview Synopsis&lt;/h1>

&lt;p>From Fred (not his real name):&lt;/p>&lt;blockquote>So the interview was rough, as to be expected. Here is a synopsis:&lt;p>10:15-10:45 - 
	Met with my recruiter. Discussed what day would be like and talked about the two teams I would be interviewing with: the CLR team and the Enterprise Services team.&lt;/p>&lt;p>11:00-12:00 - Enterprise Services Interview: Discussed High Performance systems and Enterprise Service standards. Programming problem: Design and Implement a self-managing Thread Pool class.&lt;/p>&lt;p>12:00-1:30 - CLR team Lunch interview: Discussed Security in the CLR and PKI. Programming problem: two fixed length buffers padded with nulls. Swap and reverse them, not swapping and reversing nulls.&lt;/p>&lt;p>2:00-3:00 - Enterprise Services interview: Discussed VS.NET. Design a function to select the six strongest stations for a car stereo.&lt;/p>&lt;p>3:30-4:30 - CLR team interview: Implement strpbak. Common Parent for two nodes BTree problem.&lt;/p>&lt;/blockquote></content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/523</id>
    <title>My Interview At Microsoft</title>
    <updated>2003-04-19T07:00:00.000Z</updated>
    <category term="interview" label="Interviewing"/>
    <published>2003-04-19T07:00:00.000Z</published>
    <summary>I had an interesting two days interviewing at Microsoft. Bottom line: I didn't say whether I accepted their offer.</summary>
    <content type="html">&lt;h1>My Interview At Microsoft&lt;/h1>
I had &lt;a href="/12392">an interesting two days interviewing at Microsoft&lt;/a>. Bottom line: I didn't say whether I accepted their offer.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/513</id>
    <title>New OpenGL binding for .NET</title>
    <updated>2003-04-19T07:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2003-04-19T07:00:00.000Z</published>
    <summary>From Randy Ridge: New OpenGL binding for.NET from the CsGL people, supporting GL 1.1, GLU 1.3, and GLUT 3.7.6. CLS-compliant, cross-platform, yada, yada.</summary>
    <content type="html">&lt;h1>New OpenGL binding for .NET&lt;/h1>
From Randy Ridge: New OpenGL binding for .NET from the CsGL people, supporting GL 1.1, GLU 1.3, and GLUT 3.7.6. CLS-compliant, cross-platform, yada, yada.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/509</id>
    <title>Brian Valentine talks Windows Server 2003</title>
    <updated>2003-04-18T07:00:00.000Z</updated>
    <published>2003-04-18T07:00:00.000Z</published>
    <summary>Here. From Keith Wedinger: Interview with Brian Valentine, Senior Vice President of the Windows team at Microsoft regarding the development of Windows Server 2003. What's interesting is Brian's comment about the possible use of managed code within Windows itself.</summary>
    <content type="html">&lt;h1>Brian Valentine talks Windows Server 2003&lt;/h1>
&lt;a href="http://www.winsupersite.com/showcase/valentine_2003.asp">Here&lt;/a>. From Keith Wedinger: Interview with Brian Valentine, Senior Vice President of the Windows team at Microsoft regarding the development of Windows Server 2003. What's interesting is Brian's comment about the possible use of managed code within Windows itself.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/510</id>
    <title>XML For Humans</title>
    <updated>2003-04-18T07:00:00.000Z</updated>
    <published>2003-04-18T07:00:00.000Z</published>
    <summary>Here. It took me a bit of writing to figure out why the XMLigential at Microsoft seem so fired up about blogs. Ironically, the writing itself pointed it out for me. I do so love writing. : )</summary>
    <content type="html">&lt;h1>XML For Humans&lt;/h1>
&lt;a href="/12557">Here&lt;/a>. It took me a bit of writing to figure out why the XMLigential at Microsoft seem so fired up about blogs. Ironically, the writing itself pointed it out for me. I do so love writing. : )</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/511</id>
    <title>Blog Entries as "Flair"</title>
    <updated>2003-04-18T07:00:00.000Z</updated>
    <published>2003-04-18T07:00:00.000Z</published>
    <summary>Here. This slayed me…</summary>
    <content type="html">&lt;h1>Blog Entries as "Flair"&lt;/h1>
&lt;a href="http://www.mnot.net/blog/archives/000039.html">Here&lt;/a>. This slayed me…</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/12392</id>
    <title>My Interview</title>
    <updated>2003-04-18T07:00:00.000Z</updated>
    <category term="interview" label="Interviewing"/>
    <published>2003-04-18T07:00:00.000Z</published>
    <summary>Fri, Apr 18, 2003 After never thinking that I would, I had two days of interviews at Microsoft in the middle of March, 2003. The first day was with the MSDN content group. They're the folks responsible for all of the technical articles at http://msdn.microsoft.com and the ones at Microsoft with the job most closely related to what I already do. It's their job to tell developers how Microsoft technologies really work through articles, talks, samples, online chats and whatever other means they think will be e...</summary>
    <content type="html">&lt;h1>My Interview&lt;/h1>
&lt;p>&lt;i>Fri, &lt;span class="created">Apr 18, 2003&lt;/span>&lt;/i>&lt;/p>&lt;p>&lt;a href="/12571">After never thinking that I would&lt;/a>, I had two days of interviews at Microsoft in the middle of March, 2003. The first day was with the MSDN content group. They're the folks responsible for all of the technical articles at &lt;a href="http://msdn.microsoft.com">http://msdn.microsoft.com&lt;/a> and the ones at Microsoft with the job most closely related to what I already do. It's their job to tell developers how Microsoft technologies really work through articles, talks, samples, online chats and whatever other 
means they think will be effective.&lt;br>&lt;br>My first interview of day #1 sticks freshly in my mind even two weeks later. It was a guy that I'd most closely describe as a human molecule. I've been told that he's big into coffee and it's not hard to see the effects  the guy never stops moving! Likewise, his brain was constantly moving. He had all kinds of interesting questions about how I would turn my product ideas (created on the spot) into compelling educational materials of Microsoft technologies. Very fun.&lt;br>&lt;br>I had several other fun interviews that day, all with smart people asking really great questions. However, after a few interviews, I was disappointed that nobody was asking 
me to write any code on the board. Apparently I had enough street cred that this wasn't necessary for 
me, but one interviewer laughed and said I could write whatever code I wanted on his board if it would make 
me happy. Another had a strongly negative reaction to the idea that anyone would be asked to write code on a whiteboard, which he considered a supremely unnatural act. In fact, all day long, I had questions that dove into my motivations and my ideas, but none of them tested my technical knowledge at all until the very last interview w/ my potential boss's boss (or my boss's boss's boss  I lost track). She asked 
me to solve one thought question, one visual riddle and to write some code on the board. The thought question we talked through, but she threw out leading questions faster than I could come up with my own conclusions (although it was a very interesting discussion). The visual riddle seemed impossible at first, but I solved it in a few minutes. When I showed it to Don Box, he also declared it impossible, then solved it faster than I did (bastard). The coding question showed 
me just how unnatural it is to write code on a write board (even my simple linked list code had three bugs in it  doh!). I am *totally* addicted to incremental code-compile-test and at one point even suggested using a goto to avoid erasing half of my code to insert a loop (truly the low point of the day).&lt;br>&lt;br>Even so, at the end of day #1, I was energized. I'm one of those sick people that loves to be tested, especially if I'm confident that I know the answers. My last interviewer told 
me that I had done well and we talked about what would happen if I was offered both jobs from the two teams that I was interviewing with. She needn't have worried  day #2 did not go nearly as well.&lt;br>&lt;br>The day #1 position was a highly technical position, which I've trained for since I was 12. The day #2 position was a &amp;lt;gasp&amp;gt; marketing position. But is was *so* cool. The job is to take whatever technology MS comes up with that day and make a business out of it. It was so diverse and so different than things I'd done before that I was drawn to it like a moth to a flame. Unfortunately, my answers made it clear that I didn't have anywhere near the background needed for the job. I felt like a new college graduate, trying desperately to match something from my background to what they were asking.&lt;br>&lt;br>As a 
measure of the kinds of questions I got on day #2, at one point, I was asked to develop a marketing plan for packaged ice to native Alaskans. &amp;quot;Did you just ask 
me to sell ice cubes to Eskimos?&amp;quot; I asked. &amp;quot;Uh, yeah,&amp;quot; he agreed. This was during lunch. And it wasn't the hardest question I got! By my last interview, I was so scared that they might actually offer 
me the job and that my brain would explode trying to do it that I confessed that I was definitely not the man for the job. However, that didn't stop my potential boss from drilling 
me on how to make a business on one of my sons' hobbies (about which I know almost nothing).&lt;br>&lt;br>Of course, I never clicked with anyone on the team from day #2 (you can't click with someone that thinks you're ignorant). However, the experience was amazing. One of the interviewers had a fabulous technique that I just had to appreciate -- he had 
me role-playing in various real-world Microsoft-related situations over and over again til I swear my ears were bleeding. I'm a big fan of behavioral interviewing instead of role-playing as an indicator of someone's real skills, but watching him put 
me through the ringer was a thing of beauty.&lt;br>&lt;br>Speaking now from experience, I'd have to say that the Microsoft interview process is all about finding the right fit. That's the case with all interviews, of course, but Microsoft seems to be very good at it. The fit includes both technical savvy (which they seemed to assume in 
me) and personality relative to the team. I fit very well into one group and not at all well into another. Working with the day #1 group would make 
me a successful part of the Microsoft machine, whereas if I had mistakenly gotten the job associated with day #2, I would have been set up to fail. So, if you are turned away from Microsoft, it 
means that you wouldn't do well there. That's a good thing to know; you certainly don't want to take a job at which can't possibly be successful. I know I don't.&lt;/p></content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/12657</id>
    <title>Exposing Multiple Interfaces to Scripting Clients</title>
    <updated>2003-04-17T07:00:00.000Z</updated>
    <category term="tools" label="Tools"/>
    <published>2003-04-17T07:00:00.000Z</published>
    <summary>This page represents an attempt to capture the collective consciousness of the COM community. Of course, thoughtful feedback is welcome and encouraged (who the hell am I to voice the collective opinions of the entire COM community?). Once this is all sorted out, I anticipate never implementing IDispatch again (&amp;quot;Get COM+ now, I'll show you how!&amp;quot;). This page attempts to answer the question: &amp;quot;How do I expose multiple interfaces to scriping clients?&amp;quot; Why is this an issue? Because IDispatch i...</summary>
    <content type="html">&lt;h1>Exposing Multiple Interfaces to Scripting Clients&lt;/h1>
        &lt;p>
            This page represents an attempt to capture the collective consciousness of the 
            COM community. Of course, thoughtful feedback is welcome and encouraged (who 
            the hell am I to voice the collective opinions of the entire COM community?). 
            Once this is all sorted out, I anticipate never implementing IDispatch again 
            (&amp;quot;Get COM+ now, I'll show you how!&amp;quot;).
        &lt;/p>
        &lt;p>
            This page attempts to answer the question:
            &lt;dl>
                &lt;dd>
                    &amp;quot;How do I expose multiple interfaces to scriping clients?&amp;quot;&lt;/dd>
            &lt;/dl>
        &lt;p>
            Why is this an issue? Because IDispatch is limited? No. It's a problem because 
            current scripting clients don't support QI. Based on my observations of this 
            list and my &lt;em>&lt;strong>extensive&lt;/strong>&lt;/em> conversations with members of 
            the COM community, I see several solutions to this problem:
        &lt;/p>
        &lt;a name="technique1">
            &lt;h2>
                1. Don't try to expose the functionality of multiple interfaces to a scripting 
                client.
            &lt;/h2>
        &lt;/a>
        &lt;p>
            This is my favorite technique and was originally suggested to me by Keith 
            Brown. He recommends using IDispatch to model the entire functionality of the 
            object at a higher level than the individual interfaces, e.g.
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">interface IRect : IUnknown
                    &lt;br>
                    {
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT GetCoords([out] long* pleft, [out] long* ptop,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    [out] long* pright, [out] long* pbottom);&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT SetCoords([in] long left, 
                    [in] long top,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    [in] long right, [in] long bottom);
                    &lt;br>
                    }&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">interface I2DObject : IUnknown
                    &lt;br>
                    {
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Inflate([in] long cx, [in] long cy);
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Translate([in] long cy, [in] long cy);
                    &lt;br>
                    }&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">// For scripting clients only
                    &lt;br>
                    [ hidden, dual ]
                    &lt;br>
                    interface _IRectangle : IDispatch
                    &lt;br>
                    {
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; [propput] HRESULT Left([in] long left);
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; [propget] HRESULT Left([out, retval] long* pleft);
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; ...
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Inflate([in] long cx, [in] long cy);
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Translate([in] long cy, [in] long cy);
                    &lt;br>
                    }&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            An implementation would use the dual strictly for IDispatch purposes, i.e. 
            vtbl-binding clients wouldn't use _IRectangle:
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">class CRectangle : ...,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; public IRect,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; public I2DObject,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; public IDispatchImpl&amp;lt;_IRectangle, &amp;amp;IID__IRectangle,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    &amp;amp;LIBID_SHAPESLib&amp;gt;
                    &lt;br>
                    {
                    &lt;br>
                    public:
                    &lt;br>
                    BEGIN_COM_MAP(CRectangle)
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; COM_INTERFACE_ENTRY(IRect)
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; COM_INTERFACE_ENTRY(I2DObject)
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; COM_INTERFACE_ENTRY(IDispatch)
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; // No entry for _IRectangle
                    &lt;br>
                    END_COM_MAP()&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; // IRect methods
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; // I2DObject methods
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; // _IRectangle methods
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">};&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            Since we're no longer using interface-based programming, this technique allows 
            full control when implementing the single interface the scripting client will 
            see w/o having to worry about mapping every method of all of the interfaces. By 
            using the dual strictly as a means of implementing IDispatch and not exposing 
            it, your IDispatch implementation can evolve as your object functionality 
            evolves, i.e. using another dual w/ another IID. While it's still possible for 
            a savvy developer to get a hold of the dual and try to implement it or derive 
            from it, a slap on the forehead is generally enough to discourage this 
            behavior.
        &lt;/p>
        &lt;p>
            Unfortunately, nobody ever likes this technique because it forces them to 
            provide client-specific implementation (which, btw, you'll likely to have to do 
            anyway...).
        &lt;/p>
        &lt;a name="technique2">
            &lt;h2>
                2. Use the C++ MI trick.
            &lt;/h2>
        &lt;/a>
        &lt;p>
            If you have n interfaces that are already [oleautomation] compatible, you can 
            define a dual interface in IDL that is a union of all of the methods of all of 
            the interfaces you'd like to expose methods from and let the C++ compiler match 
            up the vtbls for you.
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">[ oleautomation ]
                    &lt;br>
                    interface IRect : IUnknown
                    &lt;br>
                    {
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT GetCoords([out] long* pleft, [out] long* ptop,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    [out] long* pright, [out] long* pbottom);&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT SetCoords([in] long left, 
                    [in] long top,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    [in] long right, [in] long bottom);
                    &lt;br>
                    }&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">[ oleautomation ]
                    &lt;br>
                    interface I2DObject : IUnknown
                    &lt;br>
                    {
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Inflate([in] long cx, [in] long cy);
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Translate([in] long cy, [in] long cy);
                    &lt;br>
                    }&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">[ hidden, dual ]
                    &lt;br>
                    interface _IRectangle
                    &lt;br>
                    {&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; // Copied from IRect
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT GetCoords([out] long* pleft, [out] long* ptop,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    [out] long* pright, [out] long* pbottom);&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT SetCoords([in] long left, 
                    [in] long top,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    [in] long right, [in] long bottom);&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; // Copied from I2DObject
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Inflate([in] long cx, [in] long cy);
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Translate([in] long cy, [in] long cy);&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">}&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            The implementation derives from all of the interfaces and implements the union 
            of the methods. The C++ compiler will fill in the vtbl entries for the dual 
            interface using the methods you are already implementing for your non-dual 
            interfaces, e.g.
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">class CRectangle :
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; ...,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; public IRect,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; public I2DObject,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; public IDispatchImpl&amp;lt;_IRectangle, &amp;amp;IID__IRectangle,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    &amp;amp;LIBID_SHAPESLib&amp;gt;&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">{
                    &lt;br>
                    public:&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">BEGIN_COM_MAP(CRectangle)
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; COM_INTERFACE_ENTRY(IRect)
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; COM_INTERFACE_ENTRY(I2DObject)
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; COM_INTERFACE_ENTRY(IDispatch)
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; // No entry for _IRectangle
                    &lt;br>
                    END_COM_MAP()&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; // IRect methods
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; // I2DObject methods
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; // _IRectangle methods already 
                    implemented!&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">};&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            This method allows your clients to have access to the union of the methods of 
            all of the interfaces that you have copied and pasted into your dual interface. 
            However, now you're left with the copy 'n' paste dance in IDL and there's no 
            way to resolve name conflicts, e.g. IRect and I2DObject both have a method 
            Foo() that is each meant to do different things. This method also requires you 
            to define your non-dual interfaces with scripting clients in mind. Finally, 
            this method also exposes the dual in the TypeLib to savvy developers (see the 
            aforementioned forehead-slap solution).
        &lt;/p>
        &lt;a name="technique3">
            &lt;h2>
                3. Use a typeinfo-driven implementation of IDispatch that provides a union of 
                the methods of the scriptable interfaces.
            &lt;/h2>
        &lt;/a>
        &lt;p>
            &lt;a href="mailto:Daniel.Sinclair@btinternet.com">Daniel Sinclair&lt;/a> provides 
            another implementation of this technique called &lt;a href="http://www.object-site.co.uk/MartinG/COM/download/MultiDual.zip">
                MultiDual&lt;/a>, described in this &lt;a href="http://www.object-site.co.uk/MartinG/COM/ReadmeMD.html">
                online ReadMe&lt;/a>.
            &lt;br>
            &lt;a href="mailto:herb@CON2.COM">Herbert Carroll&lt;/a> provides a 
			&lt;a href="/12658">similar implementation&lt;/a>, but not based on typeinfo.
            &lt;br>
            &lt;a href="mailto:Kjell.Tangen@computas.com">Kjell Tangen&lt;/a> provides another 
            solution for by implementing a extended version of 
			&lt;a href="/public/tools/multidisp/winnie_the_pooh_dispatch.h">CComTypeInfoHolder&lt;/a>.
        &lt;/p>
        &lt;p>
            Imagine the following IDL:
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">[ oleautomation ]
                    &lt;br>
                    interface ICowboy : IUnknown
                    &lt;br>
                    {
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Draw([in] long nSpeed); // Conflicts with 
                    IArtist::Draw
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Shoot(); 
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    // Conflicts with ICurse::Shoot
                    &lt;br>
                    }&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">[ oleautomation ]
                    &lt;br>
                    interface IArtist : IUnknown
                    &lt;br>
                    {
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Draw([in] long nStrokes); // Conflicts with 
                    ICowboy::Draw
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Paint();
                    &lt;br>
                    }&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">[ oleautomation ]
                    &lt;br>
                    interface ICurse : IUnknown
                    &lt;br>
                    {
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Shoot(); // Conflicts with ICowboy::Shoot
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; HRESULT Darn();
                    &lt;br>
                    }&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">library TURNOFTHECENTURYLib
                    &lt;br>
                    {
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; coclass AcePowell
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; {
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; interface ICowboy;
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [default] interface IArtist;
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; interface ICurse;
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; }
                    &lt;br>
                    }&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            The client would like to write code like this:
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;lt;script language=vbscript&amp;gt;&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; ace.paint&amp;nbsp;&amp;nbsp;&amp;nbsp; ' 
                    unambiguously IArtist::Paint
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; ace.draw 100 ' resolved to IArtist::Draw because
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    'IArtist is [default]&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; ace.darn&amp;nbsp;&amp;nbsp;&amp;nbsp; ' 
                    unambiguously ICurse::Darn
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; ace.shoot&amp;nbsp;&amp;nbsp; ' resolved to ICowboy::Shoot because 
                    ICowboy
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    ' comes before ICurse in the coclass statement&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    ace.icurse_shoot&amp;nbsp;&amp;nbsp;&amp;nbsp; ' resolved to ICurse::Shoot because of 
                    prefix
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; ace.icurse_darn&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ' prefix unnecessary 
                    but still works&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;lt;/script&amp;gt;&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            The typelib-based table-driven implementation would use the coclass statement 
            to map calls to GetIDsOfNames and Invoke to the appropriate interface 
            definition, doing a little pre-processing along the way to provide 
            non-colliding DISPIDs for non-default interface methods and handling the 
            prefixes to perform fully-scoped name resolution.
        &lt;/p>
        &lt;p>
            Because the implementation is completely table-deriven based on the coclass 
            statement, an aggregatable implementation of IDispatch that provided this 
            amalgam behaviour could be implemented that only depended on the object to 
            expose IProvideClassInfo. In fact, some members of this list have provided 
            implementations of similiar techniques w/o, unless I'm mistaken, the name 
            resolution scheme I've proposed above. Assuming such an implementation of 
            IDispatch, the object implementation could look like this:
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">class CAcePowell :
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; ...,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; public IProvideClassInfo
                    &lt;br>
                    {&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">BEGIN_COM_MAP(CAcePowell)
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; // Appropriate entries for nested composition of
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; // ICowboy, IArtist and ICurse&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    COM_INTERFACE_ENTRY_AUTOAGGREGATE(IID_IDispatch, m_spunkDisp.p,
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    CLSID_StdAmalgamDispatch)&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    COM_INTERACE_ENTRY(IProvideClassInfo)
                    &lt;br>
                    END_COM_MAP()&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">private:
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; CComPtr&amp;lt;IUnknown&amp;gt; m_spunkDisp;
                    &lt;br>
                    };&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            Note: Assuming the implementation exposed the same DISPIDs for the methods and 
            properties of the default interface as the default interface, early bound 
            clients would be just as happy as late bound ones. And, because no dual 
            interface is defined to implement IDispatch, there's no worry of a developer 
            getting a hold of the interface definition for the dual interface directly 
            (although a slap is still warranted for those that try).
        &lt;/p>
        &lt;a name="technique4">
            &lt;h2>
                4. Use a typeinfo-driven implementation of IDispatch that provides a collection 
                of nested objects that implement the scriptable interfaces.
            &lt;/h2>
        &lt;/a>
        &lt;p>
            Don and I implemented this technique at Tim's house. It's available 
			&lt;a href="/public/tools/multidisp/multidisp.zip">here&lt;/a>. Also, this has been updated by
            &lt;a href="mailto:sergesandler@insureware.com">Serge Sandler&lt;/a> for 
            VC6 and for Win9x compatibility.&lt;/p>
        &lt;p>
            Assuming the AcePowell IDL shown above, the client would like to write the 
            following code (which performs the same as the previous client code):
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;lt;script language=vbscript&amp;gt;&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; ace.paint&amp;nbsp;&amp;nbsp;&amp;nbsp; ' top 
                    level object has all methods of
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    ' [default] interface&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; dim artist
                    &lt;br>
                    &lt;em>&amp;nbsp;&amp;nbsp;&amp;nbsp; set artist = ace.iartist ' Can &amp;quot;QI&amp;quot; for specific 
                        interface
                        &lt;br>
                    &lt;/em>&amp;nbsp;&amp;nbsp;&amp;nbsp; artist.draw 100&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; dim curse
                    &lt;br>
                    &lt;em>&amp;nbsp;&amp;nbsp;&amp;nbsp; set curse = artist.icurse ' Simulated QI
                        &lt;br>
                    &lt;/em>&amp;nbsp;&amp;nbsp;&amp;nbsp; curse.darn&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; dim cowboy
                    &lt;br>
                    &lt;em>&amp;nbsp;&amp;nbsp;&amp;nbsp; set cowboy = curse.icowboy ' Simulated QI
                        &lt;br>
                    &lt;/em>&amp;nbsp;&amp;nbsp;&amp;nbsp; cowboy.shoot&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; curse.shoot
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; curse.darn&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;lt;/script&amp;gt;&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            As you can see, we're exposing a collection of objects where the top level 
            object has all of the methods and properties of the [default] interface as well 
            a property to obtain an interface pointer on a sub-object for each of the 
            oleautomation interfaces. The sub-objects are separate COM identities whose 
            implementation of IDispatch simply forwards to the main identity via the 
            specific interface in question. Each of the sub-objects also have one property 
            per interface to get to the other interfaces, thus simulated the rules of COM 
            identity as exposed via QI. This allows us to build an invocation model very 
            similar to VB's where QI is an assignment and references of type class mean 
            references to the [default] interface.
        &lt;/p>
        &lt;p>
            Parts of the implementation for this scheme have also been posted w/o, unless 
            I'm mistaken, the full simulated QI as I propose above. The nested 
            implementation of IDispatch could also be fully typelib-drived based on an 
            object's implementation of IProvideClassInfo and aggregated, e.g. using a clsid 
            like CLSID_StdNestedDispatch.
        &lt;/p>
        &lt;p>
            One alternative syntax that might be a bit more flexible is the following:
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;lt;script language=vbscript&amp;gt;&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; ace.paint&amp;nbsp;&amp;nbsp;&amp;nbsp; ' top 
                    level object has all methods of
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
                    ' [default] interface&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;font face="Lucida Console">&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; dim artist
                    &lt;br>
                    &lt;em>&amp;nbsp;&amp;nbsp;&amp;nbsp; set artist = ace.interface(&amp;quot;iartist&amp;quot;)&lt;/small>
                &lt;br>
                &lt;/em>&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; if not artist is nothing then artist.draw 100&lt;/small>&lt;/font>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; dim curse
                    &lt;br>
                    &lt;em>&amp;nbsp;&amp;nbsp;&amp;nbsp; set curse = artist.interface(&amp;quot;icurse&amp;quot;)
                        &lt;br>
                    &lt;/em>&amp;nbsp;&amp;nbsp;&amp;nbsp; if not curse is nothing then curse.darn&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;nbsp;&amp;nbsp;&amp;nbsp; dim cowboy
                    &lt;br>
                    &lt;em>&amp;nbsp;&amp;nbsp;&amp;nbsp; set cowboy = curse.interface(&amp;quot;icowboy&amp;quot;)
                        &lt;br>
                    &lt;/em>&amp;nbsp;&amp;nbsp;&amp;nbsp; if not cowboy is nothing then cowboy.shoot&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;font face="Lucida Console">&lt;small>&amp;nbsp;&amp;nbsp; if not curse is nothing then
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; curse.shoot
                    &lt;br>
                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; curse.darn&lt;/small>
                &lt;br>
                &lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; end if&lt;/small>&lt;/font>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;lt;/script&amp;gt;&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            This syntax makes it even more clear that we're doing COM, it only requires one 
            additional property (interface) and it's easier to handle the QI failure case.
        &lt;/p>
        &lt;a name="technique5">
            &lt;h2>
                5. Use a separate object to perform QI.
            &lt;/h2>
        &lt;/a>
        &lt;p>
            This method is made real in an implementation by &lt;a href="mailto:dave.rogers@fmcsc.com">
                Dave Rogers&lt;/a>, available at &lt;a href="http://www.combatcom.com/ViewPage/ViewPage.asp?lowURL=/adminstore/component-warehouse/thedispadapter.htm">
                http://www.combatcom.com/adminstore/component-warehouse/thedispadapter.htm&lt;/a>
            and &lt;a href="mailto:valery.pryamikov@SM.SIEMENS.NO">Valery Pryamikov&lt;/a>, available at &lt;a href="http://home.sol.no/~valery">
                http://home.sol.no/~valery&lt;/a> Instead of building the pseudo-QI into the 
            object itself, Valery uses another another object to perform the QI. This 
            allows the client code to look like this:
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;lt;script language=vbscript&amp;gt;&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            &lt;font face="Lucida Console">&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; ' Requires object to implement 
                    IProvideClassInfo or IPersist&lt;/small>
                &lt;br>
                &lt;em>&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; set dispenum.ObjectClass = ace&lt;/small>&lt;/em>&lt;/font>
        &lt;/p>
        &lt;p>
            &lt;font face="Lucida Console">&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; ' Doesn't require 
                    IProvideClassInfo or IPersist&lt;/small>
                &lt;br>
                &lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; ' Note: Could use CLSID instead of ProgID
                    &lt;br>
                    &lt;em>&amp;nbsp;&amp;nbsp;&amp;nbsp; dispenum.SetCLSIDObjectClass(ace, 
                        &amp;quot;Ace.AcePowell.1&amp;quot;) &lt;/em>&lt;/small>&lt;/font>
        &lt;/p>
        &lt;p>
            &lt;font face="Lucida Console">&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; Dim artist&lt;/small>
                &lt;br>
                &lt;em>&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; Set artist = dispenum(&amp;quot;iartist&amp;quot;) ' Use disenum 
                        to perform QI&lt;/small>
                    &lt;br>
                &lt;/em>&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; If not artist is nothing then artist.draw 100&lt;/small>&lt;/font>
        &lt;/p>
        &lt;p>
            &lt;font face="Lucida Console">&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; Dim curse&lt;/small>
                &lt;br>
                &lt;em>&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; Set curse = dispenum(&amp;quot;icurse&amp;quot;)&lt;/small>
                    &lt;br>
                &lt;/em>&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; If not curse is nothing then curse.darn&lt;/small>&lt;/font>
        &lt;/p>
        &lt;p>
            &lt;font face="Lucida Console">&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; Dim cowboy&lt;/small>
                &lt;br>
                &lt;em>&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; Set cowboy = dispenum(&amp;quot;icowboy&amp;quot;)&lt;/small>
                    &lt;br>
                &lt;/em>&lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; If not cowboy is nothing then cowboy.shoot&lt;/small>&lt;/font>
        &lt;/p>
        &lt;p>
            &lt;font face="Lucida Console">&lt;small>&amp;nbsp;&amp;nbsp; If not curse is nothing then&lt;/small>
                &lt;br>
                &lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Curse.shoot&lt;/small>
                &lt;br>
                &lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Curse.darn&lt;/small>
                &lt;br>
                &lt;small>&amp;nbsp;&amp;nbsp;&amp;nbsp; End if&lt;/small>&lt;/font>
        &lt;/p>
        &lt;p>
            &lt;small>&lt;font face="Lucida Console">&amp;lt;/script&amp;gt;&lt;/font>&lt;/small>
        &lt;/p>
        &lt;p>
            This technique requires another object to perform the QI, so it seems a little 
            weird, but the good news is that it works with existing objects. No recompile 
            necessary!
        &lt;/p>
        &lt;h2>
            Now What?
        &lt;/h2>
        &lt;p>
            Given those techniques of implementing IDispatch to expose the functionality of 
            multiple interfaces, the first two require no additional tool support. You can 
            use them today. The last two, amalgam dispatch and nested dispatch, represent 
            two models of exposing the functionality of multiple interfaces to a scripting 
            client. Either model may be appropriate, but each is conceptually separate, 
            i.e. the object implementor would pick one or the other.
        &lt;/p>
        &lt;p>
            After writing the client code, I find I really like technique 4 best. It looks 
            like COM to me. However, I can see that some folks would prefer technique 3 or 
            5.
        &lt;/p>
        &lt;p>
            So, what do we do now? Do we wait for MS to ship COM+? We won't see 
            meta-information driven scripting until the turn of the millennia. Do we wait 
            for MS to implement CLSID_StdAmalgamDispatch and CLSID_StdNestedDispatch? Those 
            guys are pretty busy with COM+, so I won't hold my breath. Are we sure of the 
            ramifications and usage of amalgam dispatch and nested dispatch? I'm pretty 
            sure, but not completely so. If you think I'm all wrong (or even just a litte), &lt;a href="mailto:csells@sellsbrothers.com?subject=TypeLib-Driven Dispatch">
                let me know&lt;/a>.
        &lt;/p>
        &lt;p>
            On the other hand, if there are enough folks that are excited about a 
            typelib-driven implementation of IDispatch, we can get it done. I've dedicated 
            this web page to collecting and distributing the pieces. If folks have some 
            source to contribute, I'll use it to build the two implementations. If folks 
            have full implementations, I'm happy to post those as well. Please, let's stop 
            implementing IDispatch so I can stop thinking about the worthlessness of duals. 
            Thanks.
        &lt;/p>
        &lt;p>
            BTW, want to know the real reason we have duals? It saves a vptr. Doh!&lt;/p>
&lt;p>&lt;i>
&lt;a href="http://science.webhostinggeeks.com/sellsbrothers_interfejs_kod_skripting_klijenta">This article is translated to Serbo-Croatian&lt;/a> by Anja Skrba from &lt;a href="http://webhostinggeeks.com/"> Webhostinggeeks.com&lt;/a>.&lt;/i>&lt;/p></content>
  </entry>
</feed>