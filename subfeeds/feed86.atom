<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:8080/subfeeds/feed86.atom</id>
  <title>Marquee de Sells</title>
  <updated>2019-08-04T07:00:00.000Z</updated>
  <link rel="first" href="http://localhost:8080/feed.atom"/>
  <link rel="last" href="http://localhost:8080/subfeeds/feed178.atom"/>
  <link rel="previous" href="http://localhost:8080/subfeeds/feed85.atom"/>
  <link rel="next" href="http://localhost:8080/subfeeds/feed87.atom"/>
  <link rel="self" href="http://localhost:8080/subfeeds/feed86.atom"/>
  <author>
    <name>Chris Sells</name>
    <uri>http://localhost:8080/</uri>
    <email>csells@sellsbrothers.com</email>
  </author>
  <category term=".net" label=".NET"/>
  <category term="book" label="Books"/>
  <category term="books" label="Books"/>
  <category term="colophon" label="Colophon"/>
  <category term="conference" label="Conference"/>
  <category term="data" label="Data"/>
  <category term="fun" label="Fun"/>
  <category term="interview" label="Interviewing"/>
  <category term="money" label="Money"/>
  <category term="oslofeaturedcontent" label="Oslo"/>
  <category term="osloeditorial" label="Oslo"/>
  <category term="oslo" label="Oslo"/>
  <category term="telerik" label="Telerik"/>
  <category term="spout" label="The Spout"/>
  <category term="tools" label="Tools"/>
  <category term="win8" label="Windows 8"/>
  <category term="writing" label="Writing"/>
  <subtitle>Chris's insight outlet</subtitle>
  <entry>
    <id>http://localhost:8080/1205</id>
    <title>Radio Silence</title>
    <updated>2004-03-14T08:00:00.000Z</updated>
    <published>2004-03-14T08:00:00.000Z</published>
    <summary>The one where the Sells brothers, the wife and I tackle 4 California theme parks in 4 days and Chris leaves his laptop behind.</summary>
    <content type="html">&lt;h1>Radio Silence&lt;/h1>
The one where the Sells brothers, the wife and I tackle 4 California theme parks in 4 days and Chris leaves his laptop behind.</content>
  </entry>
  <entry>
    <id>http://localhost:8080/1204</id>
    <title>Chat with the VC++ Team about Longhorn on Monday</title>
    <updated>2004-03-13T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2004-03-13T08:00:00.000Z</published>
    <summary>Here. If you're a C++ programmer and have questions or concerns about where C++ is going in Longhorn, you need to be at this chat on Monday, 3/15&amp;nbsp;from 11a - 12:30p PST.</summary>
    <content type="html">&lt;h1>Chat with the VC++ Team about Longhorn on Monday&lt;/h1>
&lt;a href="http://msevents.microsoft.com/cui/EventDetail.aspx?culture=en-US&amp;EventID=1032245114">Here&lt;/a>. If you're a C++ programmer and have questions or concerns about where C++ is going in Longhorn, you need to &lt;A href="http://msevents.microsoft.com/cui/EventDetail.aspx?culture=en-US&amp;amp;EventID=1032245114">be at this chat on Monday, 3/15&amp;nbsp;from 11a - 12:30p PST&lt;/A>.</content>
  </entry>
  <entry>
    <id>http://localhost:8080/1200</id>
    <title>What is WOW64 and How Does It Relate to .NET?</title>
    <updated>2004-03-12T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2004-03-12T08:00:00.000Z</published>
    <summary>Here. Josh Williams, an SDE on the CLR team, kicks off his 64-bit blog with an introduction to WOW64 and what it means for.NET programmers. Here's the summary: WOW64 isn&amp;#8217;t the OS per se, but a subset of the Win64 OS which enables a 32bit application to run inside of a 32bit process on a 64bit OS while using 32bit system dlls and such. Whidbey CLR will include both 32bit and 64bit versions, both of which will be installed on 64bit machines. This allows both 32bit and 64bit managed applications to run i...</summary>
    <content type="html">&lt;h1>What is WOW64 and How Does It Relate to .NET?&lt;/h1>
&lt;a href="http://blogs.msdn.com/joshwil/archive/2004/03/11/88280.aspx">Here&lt;/a>. &lt;P>Josh Williams, an SDE on the CLR team, kicks off his 64-bit blog with an introduction to WOW64 and what it means for .NET programmers. Here's the summary:&lt;/P>
&lt;UL>
&lt;LI>WOW64 isn&amp;#8217;t the OS per se, but a subset of the Win64 OS which enables a 32bit application to run inside of a 32bit process on a 64bit OS while using 32bit system dlls and such.&lt;/LI>
&lt;LI>Whidbey CLR will include both 32bit and 64bit versions, both of which will be installed on 64bit machines. This allows both 32bit and 64bit managed applications to run in bitness correct native process depending on how the assemblies are tagged at compile time.&lt;/LI>
&lt;LI>Once a process is started up as either 32bit or 64bit all of the dlls/assemblies that are loaded into that process have to be compatible with that bitness.&lt;/LI>
&lt;LI>If you have a 32bit managed app which has dependencies on 32bit unmanaged code then you&amp;#8217;ll need to either find a 64bit version of the unmanaged code or tag your managed app as x86 at compile time to make sure that you don&amp;#8217;t float up to a native 64bit process. This will result in you having to live with your process running under the WOW64.&lt;/LI>&lt;/UL></content>
  </entry>
  <entry>
    <id>http://localhost:8080/1203</id>
    <title>Thumbs Up for Longhorn Security Lockdown</title>
    <updated>2004-03-12T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2004-03-12T08:00:00.000Z</published>
    <summary>I'm just happy to see security + Windows = good for a change. : )</summary>
    <content type="html">&lt;h1>Thumbs Up for Longhorn Security Lockdown&lt;/h1>
I'm just happy to see &lt;A href="http://internetnews.com/ent-news/article.php/3325631">security + Windows = good&lt;/A> for a change. : )</content>
  </entry>
  <entry>
    <id>http://localhost:8080/1202</id>
    <title>We're Rebuilding MSDN and We Need You!</title>
    <updated>2004-03-12T08:00:00.000Z</updated>
    <published>2004-03-12T08:00:00.000Z</published>
    <summary>We're busy rebuilding the MSDN infrastructure for the next decade (the one we've lived on for the last decade is getting pretty creaky) and we need a testing lead! Don't be shy! Apply today! [via Laura, Kent and Duncan ] </summary>
    <content type="html">&lt;h1>We're Rebuilding MSDN and We Need You!&lt;/h1>
&lt;P>We're busy rebuilding the MSDN infrastructure for the next decade (the one we've lived on for the last decade is getting pretty creaky) and &lt;A href="http://www.microsoft.com/careers/search/details.aspx?JobID=aacc453a-e5a2-48fe-b25b-d82ec1c8bd30">we need a testing lead&lt;/A>! Don't be shy! Apply today!&lt;/P>
&lt;P>[via &lt;A href="http://blogs.msdn.com/lauraj/archive/2004/03/12/88709.aspx">Laura&lt;/A>, &lt;A href="http://weblogs.asp.net/ksharkey/archive/2004/03/12/88788.aspx">Kent&lt;/A> and &lt;A href="http://weblogs.asp.net/duncanma/archive/2004/03/12/88822.aspx">Duncan&lt;/A>]&lt;/P></content>
  </entry>
  <entry>
    <id>http://localhost:8080/1201</id>
    <title>Indigo Lingo: Digging Into Channel Types</title>
    <updated>2004-03-12T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2004-03-12T08:00:00.000Z</published>
    <summary>Yasser Shohoud digs into Indigo even further, this month using "channels" to build different kinds of message exchange patterns into your applications, including one-way, duplex (incoming and outgoing messages on different ports) and request/reply, as well as adding reliability.</summary>
    <content type="html">&lt;h1>Indigo Lingo: Digging Into Channel Types&lt;/h1>
Yasser Shohoud digs into Indigo even further, &lt;A href="http://msdn.microsoft.com/longhorn/default.aspx?pull=/library/en-us/dnlingo/html/indigolingo_03102004.asp">this month using "channels" to build different kinds of message exchange patterns into your applications&lt;/A>, including one-way, duplex (incoming and outgoing messages on different ports) and request/reply, as well as adding reliability.</content>
  </entry>
  <entry>
    <id>http://localhost:8080/1199</id>
    <title>Avoid the GAC (and Check My Reasoning)</title>
    <updated>2004-03-11T08:00:00.000Z</updated>
    <published>2004-03-11T08:00:00.000Z</published>
    <summary>Here. The one where I can only come up with two reasons for using the GAC, the first being very difficult to pull off correctly and the second to happen more and more rarely as we move to SOA and.NET. This post feels very much like "Why do we still need duals?" so if you've got a reason for using the GAC that I didn't list, by all means, let me know! </summary>
    <content type="html">&lt;h1>Avoid the GAC (and Check My Reasoning)&lt;/h1>
&lt;a href="/12503">Here&lt;/a>. &lt;P>The one where I can only come up with &lt;a href="/12503">two reasons for using the GAC&lt;/A>, the first being very difficult to pull off correctly and the second to happen more and more rarely as we move to SOA and .NET.&lt;/P>
&lt;P>This post feels very much like &lt;A href="http://discuss.microsoft.com/SCRIPTS/WA-MSD.EXE?A2=ind9709A&amp;amp;L=DCOM&amp;amp;P=R8788&amp;amp;I=-3">"Why do we still need duals?"&lt;/A> so if you've got a reason for using the GAC that I didn't list, by all means, let me know!&lt;/P></content>
  </entry>
  <entry>
    <id>http://localhost:8080/12503</id>
    <title>Avoid the GAC</title>
    <updated>2004-03-11T08:00:00.000Z</updated>
    <category term="spout" label="The Spout"/>
    <published>2004-03-11T08:00:00.000Z</published>
    <summary>Thursday, March 11th, 2004 The.NET Global Assembly Cache (GAC) is a misunderstood and misused beast. For all intents and purposes, it provides what COM and windows\system32 do, i.e. a machine-wide place to drop shared DLLs. Of course, the problems with sharing DLLs in a machine-wide spot is that it leads to a set of well-known problems collectively called &amp;quot;DLL Hell.&amp;quot; There are many problems, but the biggest is that when a shared DLL is updated, you're really updating an unknown set of applications...</summary>
    <content type="html">&lt;h1>Avoid the GAC&lt;/h1>
&lt;p align="left">&lt;i>Thursday, &lt;span class="created">March 11th, 2004&lt;/span>&lt;/i>&lt;/p>&lt;p align="left">
The .NET Global Assembly Cache (GAC) is a misunderstood and misused beast. For 
all intents and purposes, it provides what COM and windows\system32 do, i.e. a 
machine-wide place to drop shared DLLs. Of course, the problems with sharing 
DLLs in a machine-wide spot is that it leads to a set of well-known problems 
collectively called &amp;quot;DLL Hell.&amp;quot; There are many problems, but the biggest is that 
when a shared DLL is updated, you're really updating an unknown set of 
applications. If the set of applications is unknown, how can you possible test 
them before making this change? And if you can't test them, you're likely to 
break them. What this boils down to is that any of the shared spots for updates, 
whether it's a COM CLSID, windows\system32 or the GAC, are dangerous and should 
be avoided. And this is why the preferred .NET deployment scenario is &amp;quot;xcopy 
deployment,&amp;quot; i.e. having your own private copy of each DLL that you test and 
deploy with the rest of your application.&lt;/p>&lt;p align="left">&amp;quot;Aha!&amp;quot; you say. 
&amp;quot;The GAC supports multiple version of an assembly! When a foo.dll is updated to 
v1.1, v1.0 sits right along side of it so that your app *doesn't* break!&amp;quot; Of 
course, that's absolutely true. But if that's the case, why do you care? I mean, 
if there's a new assembly available but your app isn't picking it up, what 
difference does it make?&lt;/p>&lt;p align="left">&amp;quot;Aha again!, you say. &amp;quot;I can put a 
publisher policy into the GAC along with my assembly so that apps *are* updated 
automatically!&amp;quot; That's true, too, but now, like any of the machine-wide code 
replacement strategies of old, you're on the hook for an awesome responsibility: 
making sure that as close to 0% of apps, known to you or not, don't break. This 
is an awesome responsibility and one that takes MS hundreds of man-years at each 
new release of the .NET Framework. And even with those hundreds of man-years of 
testing, we still don't always get it right. If this is a testing responsibility 
that you're willing to live with, I admire you. Personally, I don't have the 
moral fortitude to shoulder this burden. For example, we do sign &lt;a href="http://www.genghisgroup.com">
genghis.dll&lt;/a> when we ship it so that folks can put it into the GAC if they 
want, but we make no promise of backwards compatibility between versions and 
therefore we do not ship publisher policy DLLs. Instead, we expect folks to use 
xcopy deployment and catch the problems at compile-time and test-time.&lt;/p>&lt;p align="left">
So, if the GAC represents such a massive burden, why do we even have it? It's 
for two things that I've been able to identify:&lt;/p>&lt;ol>&lt;li>&lt;p align="left">
	Fixing critical bugs without touching the affected apps (and without 
	breaking anything!)&lt;/li>&lt;li>&lt;p align="left">Sharing types at run-time 
	between assemblies deployed separately&lt;/li>&lt;/ol>&lt;p align="left">#1 is what 
you get when you install Windows hot fixes and service packs via Windows Update. 
A ton of design, implementation and testing time is spent to make sure that 
existing code won't break before shipping these fixes.&lt;/p>&lt;p align="left">#2 is 
needed if you're going to be sharing types between assemblies that you can't 
deploy as a group but absolutely must keep to the same version of things. .NET 
Remoting peers are in this category, but only if they're deployed in separate 
directories so that they won't share the same set of types available via xcopy 
deployment. However, if .NET Remoting peers are deployed on difference machines, 
the GAC won't help you anyway as you'll be manually insuring the types are the 
same across machines. BTW, the responsibility of keeping multiple machines to 
the same set of types (and the same framework for hosting those types) spawned 
an entirely new way to talk between machines, i.e. web services, so .NET 
Remoting itself is something to avoid unless you can administer both ends of the 
pipe for simultaneous updates.&lt;/p>&lt;p align="left">Another scenario that fits 
into #2 is the Primary Interop Assembly (PIA). A PIA is a COM interop assembly 
that's been pre-generated and dropped into the GAC so that everyone that adds a 
reference in VS.NET to mso.dll (the COM library for Office) gets office.dll 
instead (the .NET Office PIA). That way, everyone can talk to the same set of 
types instead of everyone getting their own incompatible interop types generated 
on the fly. However, PIAs are primarily a way to make sure that VS.NET has a 
central place to pick up the shared types without regenerating new incompatible 
types.&lt;/p>&lt;p align="left">Notice that &amp;quot;Saving hard drive space&amp;quot; wasn't on my 
list of reasons to use the GAC. I just purchased a 60GB, 7200RPM hard drive for 
my laptop for a measly coupla hundred bucks. I don't want to hear about you 
jeopardizing the reliability of the applications on my machine to save a tiny 
percentage of that space. Hell, when I buy a HD, I give 50% of it over to apps 
anyway, so help yourself and keep my apps running by avoiding any machine-wide 
space for updating shared DLLs, including the GAC! Thanks.&lt;/p>&lt;p align="left">&lt;a href="/1199">
Discuss (did I miss any reasons to use the GAC?)&lt;/a>&lt;/p>
</content>
  </entry>
  <entry>
    <id>http://localhost:8080/1197</id>
    <title>Paul Thurrott's Longhorn Activity Center</title>
    <updated>2004-03-10T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2004-03-10T08:00:00.000Z</published>
    <summary>Paul Thurrott is more of a user guy then a developer guy, but you have to be a user before you can be a developer, and his stuff is often interesting. Now he's created a spot on his site to gather his Longhorn content. My only question: where's the dang RSS feed?!? </summary>
    <content type="html">&lt;h1>Paul Thurrott's Longhorn Activity Center&lt;/h1>
&lt;P>Paul Thurrott is more of a user guy then a developer guy, but you have to be a user before you can be a developer, and his stuff is often interesting. Now he's created a spot on his site to gather &lt;A href="http://www.winsupersite.com/longhorn/">his Longhorn content&lt;/A>. My only question: where's the dang RSS feed?!?&lt;/P></content>
  </entry>
  <entry>
    <id>http://localhost:8080/1192</id>
    <title>The VS7 Debugger doesn’t work. What can I do?</title>
    <updated>2004-03-10T08:00:00.000Z</updated>
    <category term="tools" label="Tools"/>
    <published>2004-03-10T08:00:00.000Z</published>
    <summary>Mark Parks, a PM on the Visual C# Debugger QA team, has posted ways to fix common VS.NET debugger problems. He's even got a fix for why I can't debug the localhost version of my site. Thanks, Mark! [ via Duncan Mackenzie ] </summary>
    <content type="html">&lt;h1>The VS7 Debugger doesn’t work. What can I do?&lt;/h1>
&lt;P>Mark Parks, a PM on the Visual C# Debugger QA team, has posted &lt;A href="http://blogs.msdn.com/mkpark/articles/86872.aspx">ways to fix common VS.NET debugger problems&lt;/A>. He's even got a fix for why I can't debug the localhost version of my site. Thanks, Mark!&lt;/P>
&lt;P>[&lt;A href="http://weblogs.asp.net/duncanma/">via Duncan Mackenzie&lt;/A>]&lt;/P></content>
  </entry>
  <entry>
    <id>http://localhost:8080/1194</id>
    <title>Ryan Dawson on RTC in Longhorn</title>
    <updated>2004-03-10T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2004-03-10T08:00:00.000Z</published>
    <summary>This time, Ryan digs into the RTC stack in Longhorn to build an IM app to enable synchronized browsing and chatting. Includes source code and a meaty write-up, including Ryan's complaints about the current RTC stack.</summary>
    <content type="html">&lt;h1>Ryan Dawson on RTC in Longhorn&lt;/h1>
This time, &lt;A href="http://www.longhornblogs.com/rdawson/articles/BrowseTogether.aspx">Ryan digs into the RTC stack in Longhorn to build an IM app to enable synchronized browsing and chatting&lt;/A>. Includes source code and a meaty write-up, including Ryan's complaints about the current RTC stack.</content>
  </entry>
  <entry>
    <id>http://localhost:8080/1196</id>
    <title>Avalon vs. Quartz Extreme</title>
    <updated>2004-03-10T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2004-03-10T08:00:00.000Z</published>
    <summary>If you read Ian's article on Avalon Graphics Composition before the fireworks, you missed a wonderful discussion of how Avalon compares with Apple's Quartz and Quartz Extreme. Not only does Ian respond to the ever popular "Doesn't Mac OS X already do today what Longhorn will do tomorrow?" with a resounding "No!" but he does it in such a thorough manner, that you can't help be admire it. You go, Ian! : ) </summary>
    <content type="html">&lt;h1>Avalon vs. Quartz Extreme&lt;/h1>
&lt;P>If you read &lt;A href="http://www.ondotnet.com/pub/a/dotnet/2004/03/08/winfs_detail_3.html?page=1">Ian's article on Avalon Graphics Composition&lt;/A> before the fireworks, you missed &lt;A href="http://www.ondotnet.com/pub/a//dotnet/2004/03/08/winfs_detail_3.html?page=last#thread">a wonderful discussion of how Avalon compares with Apple's Quartz and Quartz Extreme&lt;/A>. Not only does Ian respond to the ever popular "Doesn't Mac OS X already do today what Longhorn will do tomorrow?" with a resounding "No!" but he does it in such a thorough manner, that you can't help be admire it.&lt;/P>
&lt;P>You go, Ian! : )&lt;/P></content>
  </entry>
  <entry>
    <id>http://localhost:8080/1198</id>
    <title>Interview: Longhorn User Experience Gurus, part 2</title>
    <updated>2004-03-10T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2004-03-10T08:00:00.000Z</published>
    <summary>Paul Thurrott finishes his 2-part series of interviews of Hillel Cooperman and Tjeerd Hoek, Longhorn User Experience mavens. The interview covers just how hard it is to make an entire OS usable and just how much work MS does to get it right. However, one thing that Hillel said struck me particularly as someone fairly new to working at MS: "Actually, that was the shocking thing about coming here: The problems weren't simple. The number of people that I met who were humble, that cared deeply and passionately ...</summary>
    <content type="html">&lt;h1>Interview: Longhorn User Experience Gurus, part 2&lt;/h1>
&lt;P>Paul Thurrott finishes his 2-part series of &lt;A href="http://www.winsupersite.com/showcase/longhorn_hillel_tjeerd_2.asp">interviews of Hillel Cooperman and Tjeerd Hoek, Longhorn User Experience mavens&lt;/A>. The interview covers just how hard it is to make an entire OS usable and just how much work MS does to get it right.&lt;/P>
&lt;P>However, one thing that Hillel said struck me particularly as someone fairly new to working at MS:&lt;/P>
&lt;BLOCKQUOTE>"Actually, that was the shocking thing about coming here: The problems weren't simple. The number of people that I met who were humble, that cared deeply and passionately about making the user experience better for customers and weren't just saying, 'Hey, here's a new API'--not that I don't love a new API--was surprising. These people were really deeply concerned about how they could make customers' lives better and had thought a lot about this, way more than I had. I was blown away. I just couldn't believe it."&lt;/BLOCKQUOTE>
&lt;P>That's exactly how I felt coming to MS. We have a PR problem, but we definately do not have a care-about-the-customer problem.&lt;/P></content>
  </entry>
  <entry>
    <id>http://localhost:8080/1193</id>
    <title>Benjamin Summarizes Service Boundary Guidance</title>
    <updated>2004-03-10T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2004-03-10T08:00:00.000Z</published>
    <summary>I'm really getting to like Benjamin's&amp;nbsp;Mitchell's blog as a Reader's Digest of various issues that he's following. This time, he summarizes advise from across three MS architects providing guidance on where to draw boundaries between services.</summary>
    <content type="html">&lt;h1>Benjamin Summarizes Service Boundary Guidance&lt;/h1>
I'm really getting to like &lt;A href="http://benjaminm.net/default.aspx">Benjamin's&amp;nbsp;Mitchell's blog&lt;/A> as a Reader's Digest of various issues that he's following. This time, he &lt;A href="http://pdcbloggers.net/Web_Services/1686.item">summarizes advise from across three MS architects providing guidance on where to draw boundaries between services&lt;/A>.</content>
  </entry>
  <entry>
    <id>http://localhost:8080/1191</id>
    <title>Portland Nerd Dinner in My Neck of the Woods</title>
    <updated>2004-03-10T08:00:00.000Z</updated>
    <published>2004-03-10T08:00:00.000Z</published>
    <summary>Finally, Jim has set up a PND that's not through rush hour traffic from my house. 3/23, 6:30pm, Washington Square Mall food court. &amp;nbsp;Wahoo!</summary>
    <content type="html">&lt;h1>Portland Nerd Dinner in My Neck of the Woods&lt;/h1>
Finally, Jim has set up a PND that's not through rush hour traffic from my house. &lt;A href="http://snowstormlife.com/blogs/bliz/PermaLink.aspx?guid=ada1f7ee-0d4e-41f0-ae82-aaa20203c23f">3/23, 6:30pm, Washington Square Mall food court.&lt;/A>&amp;nbsp;Wahoo!</content>
  </entry>
</feed>