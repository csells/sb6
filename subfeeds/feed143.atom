<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://csells.github.io/sb6/subfeeds/feed143.atom</id>
  <title>Marquee de Sells</title>
  <updated>2019-08-04T07:00:00.000Z</updated>
  <link rel="first" href="https://csells.github.io/sb6/feed.atom"/>
  <link rel="last" href="https://csells.github.io/sb6/subfeeds/feed178.atom"/>
  <link rel="previous" href="https://csells.github.io/sb6/subfeeds/feed142.atom"/>
  <link rel="next" href="https://csells.github.io/sb6/subfeeds/feed144.atom"/>
  <link rel="self" href="https://csells.github.io/sb6/subfeeds/feed143.atom"/>
  <author>
    <name>Chris Sells</name>
    <uri>https://csells.github.io/sb6/</uri>
    <email>csells@sellsbrothers.com</email>
  </author>
  <category term=".net" label=".NET"/>
  <category term="book" label="Books"/>
  <category term="books" label="Books"/>
  <category term="colophon" label="Colophon"/>
  <category term="conference" label="Conference"/>
  <category term="data" label="Data"/>
  <category term="fun" label="Fun"/>
  <category term="interview" label="Interviewing"/>
  <category term="money" label="Money"/>
  <category term="oslofeaturedcontent" label="Oslo"/>
  <category term="osloeditorial" label="Oslo"/>
  <category term="oslo" label="Oslo"/>
  <category term="telerik" label="Telerik"/>
  <category term="spout" label="The Spout"/>
  <category term="tools" label="Tools"/>
  <category term="win8" label="Windows 8"/>
  <category term="writing" label="Writing"/>
  <icon>https://csells.github.io/sb6//public/favicon.ico</icon>
  <logo>https://csells.github.io/sb6//public/images/vikingme128x128.jpg</logo>
  <subtitle>Chris's insight outlet</subtitle>
  <entry>
    <id>https://csells.github.io/sb6/421</id>
    <title>Wes's Internet Helpdesk</title>
    <updated>2003-02-04T08:00:00.000Z</updated>
    <published>2003-02-04T08:00:00.000Z</published>
    <summary>Here. "I could tell 'em to blow smoke up their USBs ports and they'd do it." Life from the working end of an ISP support desk. Hilarious.</summary>
    <content type="html">&lt;h1>Wes's Internet Helpdesk&lt;/h1>
&lt;a href="http://www.superhappyfunplace.com/html/inethelpdesk.html">Here&lt;/a>. "I could tell 'em to blow smoke up their USBs ports and they'd do it."

Life from the working end of an ISP support desk. Hilarious.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/423</id>
    <title>Shtoo</title>
    <updated>2003-02-04T08:00:00.000Z</updated>
    <published>2003-02-04T08:00:00.000Z</published>
    <summary>Here. How Stu Halloway pronounces his name.</summary>
    <content type="html">&lt;h1>Shtoo&lt;/h1>
&lt;a href="/12355">Here&lt;/a>. How Stu Halloway pronounces his name.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/422</id>
    <title>Every OS Sucks</title>
    <updated>2003-02-04T08:00:00.000Z</updated>
    <published>2003-02-04T08:00:00.000Z</published>
    <summary>Here. "It was slow and it was buggy, so they wrote it again. Now they're up to OS 10. They'll charge you for the beta and then charge you again." "Bill Gates may be richer than Captain Kirk, but Windows blows. And sucks. At the same time!" "Linux... It's a great big mess for elitist, nerdy shmucks... Getting it running is half the fun, but I've got a girlfriend and things to get done." Equal opportunity bashing of "everything since the abacus." Also hilarious.</summary>
    <content type="html">&lt;h1>Every OS Sucks&lt;/h1>
&lt;a href="http://homepage.mac.com/deadtroll2/.Movies/ossuckscable.html">Here&lt;/a>. "It was slow and it was buggy, so they wrote it again. Now they're up to OS 10. They'll charge you for the beta and then charge you again."

"Bill Gates may be richer than Captain Kirk, but Windows blows. And sucks. At the same time!"

"Linux... It's a great big mess for elitist, nerdy shmucks... Getting it running is half the fun, but I've got a girlfriend and things to get done."

Equal opportunity bashing of "everything since the abacus." Also hilarious.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/420</id>
    <title>Let The Language Wars Continue</title>
    <updated>2003-02-03T08:00:00.000Z</updated>
    <published>2003-02-03T08:00:00.000Z</published>
    <summary>Here. I think that the CLR languages *should* have different capabilities and that programmers should be proud of their choice of language! The skinning the pretends to separate two nearly identical languages must end!</summary>
    <content type="html">&lt;h1>Let The Language Wars Continue&lt;/h1>
&lt;a href="/12562">Here&lt;/a>. I think that the CLR languages *should* have different capabilities and that  programmers should be proud of their choice of language! The skinning the pretends to separate two nearly identical languages must end!</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/419</id>
    <title>Safe, Simple Multithreading in WindForms, part 3</title>
    <updated>2003-02-03T08:00:00.000Z</updated>
    <published>2003-02-03T08:00:00.000Z</published>
    <summary>Here. I thought that I had said it all in parts 1 and 2, but I still had a little more in me.</summary>
    <content type="html">&lt;h1>Safe, Simple Multithreading in WindForms, part 3&lt;/h1>
&lt;a href="http://msdn.microsoft.com/columns/winforms.asp">Here&lt;/a>. I thought that I had said it all in parts 1 and 2, but I still had a little more in me.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/12562</id>
    <title>Let The Language Wars Continue</title>
    <updated>2003-02-03T08:00:00.000Z</updated>
    <category term="spout" label="The Spout"/>
    <published>2003-02-03T08:00:00.000Z</published>
    <summary>A friend of mine pointed out to me the other day that the C in CLR stood for &amp;quot;Common,&amp;quot; that is, the CLR provides the same services to all languages. In fact, at this date, C# and VB.NET are really just &amp;quot;skins&amp;quot; over the CLR and provide nearly identical functionality. With that in mind, why are we still fighting the language wars? There are several reasons: VB and C# programmers are just culturally different. They come from different backgrounds, different educations and different points o...</summary>
    <content type="html">&lt;h1>Let The Language Wars Continue&lt;/h1>
&lt;p>A friend of mine pointed out to me the other day that the 
C in CLR stood for &amp;quot;Common,&amp;quot; that is, the CLR provides the same services to all 
languages. In fact, at this date, C# and VB.NET are really just &amp;quot;skins&amp;quot; over the 
CLR and provide nearly identical functionality. With that in mind, why are we 
still fighting the language wars? There are several reasons:&lt;/p>&lt;ul>&lt;li>VB and 
	C# programmers are just culturally different. They come from different 
	backgrounds, different educations and different points of view. Remember 
	that VB was initially invented to let non-programmers program. C++ 
	programmers came from folks building operating systems. Those roots are 
	still evident today.&lt;br>&amp;nbsp;&lt;/li>&lt;li>The VB and C# product teams are 
	different and gain benefits based on how many of each kind of programmer 
	there are. Based on that, do you think that those teams are going to pound 
	the &amp;quot;all languages work great under the CLR&amp;quot; or the &amp;quot;C#/C++/VB.NET rocks&amp;quot; 
	drum? Which message makes you look best at review-time?&lt;br>&amp;nbsp;&lt;/li>&lt;li>
	Languages *should* be different. Managed C++ does that cool managed 
	code/unmanaged types thing. Eiffel# does Design by Contract. Perl.NET has 
	obfuscation built in at the source code level, alleviating the need for a 
	3rd party tool. The fact that VB and C# are virtual clones of each other is 
	a mistake that I hope is rectified. Frankly, I hope that VB goes back to 
	it's roots of enabling non-programmers, as that's a huge hole in the current 
	list of managed languages. Certainly C# is going back to its roots by adding 
	generics et al in the next version.&lt;/li>&lt;/ul>&lt;p>I've found that the &amp;quot;Common&amp;quot; 
means that teams can use the same language at more levels of their system, i.e. 
no more VB for this, C++ for that, script for this other thing. Now it can be 
all VB or all C# (or almost all, 'til Yukon ships) and the number of different 
kinds of programmers needed for a single project goes down. That provides a real 
benefit to companies trying to keep costs down and quality up while still 
allowing the team to decide what language features are important to them. This 
is goodness.&lt;/p>&lt;p>With the increased shared capability at the runtime level, 
I'm actually hoping that language motivation will increase. I think that there's 
still a lot left to do to make the programmers more productive and the 
motivation for one language to gain ground over another is a good thing. Plus, I 
still have an excuse to make fun of semi-colon-challenged programmers and what 
could be better than that? : )&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/418</id>
    <title>White House adviser confirms resignation plans</title>
    <updated>2003-02-02T08:00:00.000Z</updated>
    <published>2003-02-02T08:00:00.000Z</published>
    <summary>Here. Apparently Mr. Clarke is/was President Bush's "top cyber-security advisor" and the recent SQL virus drove him to throw up his hands in dispair (or be thrown out on his butt). Even more disturbing is that he predicts that this is but the beginning...</summary>
    <content type="html">&lt;h1>White House adviser confirms resignation plans&lt;/h1>
&lt;a href="http://www.cnn.com/2003/ALLPOLITICS/01/31/terrorism.adviser.ap/">Here&lt;/a>. Apparently Mr. Clarke is/was President Bush's "top cyber-security advisor" and the recent SQL virus drove him to throw up his hands in dispair (or be thrown out on his butt). Even more disturbing is that he predicts that this is but the beginning...</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/417</id>
    <title>.NET Bugs Registry</title>
    <updated>2003-01-31T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2003-01-31T08:00:00.000Z</published>
    <summary>Here. It's nice to see that somebody is tracking and publishing bugs on my most favorite technology, although I suspect that many are as yet unlisted...</summary>
    <content type="html">&lt;h1>.NET Bugs Registry&lt;/h1>
&lt;a href="http://www.jelovic.com/dotnetbugs/index.html">Here&lt;/a>. It's nice to see that somebody is tracking and publishing bugs on my most favorite technology, although I suspect that many are as yet unlisted...</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/416</id>
    <title>Blogs open doors for developers</title>
    <updated>2003-01-31T08:00:00.000Z</updated>
    <published>2003-01-31T08:00:00.000Z</published>
    <summary>Here. From Luciano Passuello: 1st page article on CNet's news.com talks about developers and blogs.</summary>
    <content type="html">&lt;h1>Blogs open doors for developers &lt;/h1>
&lt;a href="http://news.com.com/2100-1001-982854.html?tag=fd_lede1_hed">Here&lt;/a>. From Luciano Passuello: 1st page article on CNet's news.com talks about developers and blogs.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/415</id>
    <title>Sam .NET Blog has changed locations and technology</title>
    <updated>2003-01-30T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2003-01-30T08:00:00.000Z</published>
    <summary>From Sam Gentile: For people who were reading my.NET Radio Blog. I have moved to an ASP.NET based solution. The new location and feed are at:
http://dotnetweblogs.com/sgentile/ </summary>
    <content type="html">&lt;h1>Sam .NET Blog has changed locations and technology&lt;/h1>
From Sam Gentile: For people who were reading my .NET Radio Blog. I have moved to an ASP.NET based solution. The new location and feed are at:
http://dotnetweblogs.com/sgentile/ </content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/414</id>
    <title>Editor for Web.Config files in ASP.NET</title>
    <updated>2003-01-28T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2003-01-28T08:00:00.000Z</published>
    <summary>Here. From Jim Corbin: Hunter Stone has created a useful tool for managing one or multiple Web.Config XML files in an ASP.NET application.</summary>
    <content type="html">&lt;h1>Editor for Web.Config files in ASP.NET&lt;/h1>
&lt;a href="http://www.hunterstone.com ">Here&lt;/a>. From Jim Corbin: Hunter Stone has created a useful tool for managing one or multiple Web.Config XML files in an ASP.NET application.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/12563</id>
    <title>OOD (The D Stands for "Dead In The Water")</title>
    <updated>2003-01-24T08:00:00.000Z</updated>
    <category term="spout" label="The Spout"/>
    <published>2003-01-24T08:00:00.000Z</published>
    <summary>Reading a very interesting book which I'll discuss in a future post, I came to a startling conclusion. As much as I love OO thinking and programming, OO databases are never going to fly. I realize that this may not be so startling considering how long OOD products have existed and how unsuccessful they've been so far, but the conclusion I came to was *why* they'll never fly. The reason is simple: the data itself is more valuable than the programs that use it. For an OO guy, taught that behavior was everythi...</summary>
    <content type="html">&lt;h1>OOD (The D Stands for "Dead In The Water")&lt;/h1>
&lt;p>Reading a very 
interesting book which I'll discuss in a future post, I came to a startling 
conclusion. As much as I love OO thinking and programming, OO databases are 
never going to fly. I realize that this may not be so startling considering how 
long OOD products have existed and how unsuccessful they've been so far, but the 
conclusion I came to was *why* they'll never fly. The reason is simple: the data 
itself is more valuable than the programs that use it.&lt;/p>&lt;p>For an OO guy, 
taught that behavior was everything and data was an implementation technique, 
that's a startling conclusion. However, the beauty of a database is that it's 
devoid of behavior, or, if there is behavior, it's layered in on top of the 
data. Programming languages come and go along with the ideas that underlie them 
and the applications that are built with them. Relational data, on the other 
hand, is a model that's simple enough, but complete enough, to move forward from 
application to application, accumulating value as you go in the data itself. 
And, since the relational model is so entrenched, no technology for the last 10 
years or the next 1000 would be complete without support for it. Even Microsoft, 
IBM, GM and AT&amp;amp;T will prove to be less enduring than relational data, the tools 
to program against it and the tools to slice and dice it w/o programming 
anything (the latter are amazing strong already and continue to grow).&lt;/p>&lt;p>
Data in OO databases, on the other hand, are bound to behavior and worthless for 
anything but the limited set of applications for whom the behavior was paramount 
and the data an implementation detail. When things change, as they always do, 
how are you going to get the data out so you can do things different? You're 
going to dump it to the simplest, most complete, most firmly entrenched data 
format that the world has every known -- relational data.&lt;/p>&lt;p>OO persistence 
formats are, by their natural, tied to a specific object model and therefore 
hopelessly proprietary. And with the emergence of XML, OO persistence formats 
are going the way of the dodo, even for applications running on machines without 
a database server. Why would I persist data to a closed format when I can choose 
relational data for the big stuff and XML for the small stuff? Both provide 
endless tools for slicing and dicing and bringing forward when the application 
dies. With OO persistence, when the app goes, so goes the data. The problem with 
OOD is that things are *too* seamlessly integrated. Ironic, no?&lt;/p></content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/413</id>
    <title>OOD (The D Stands for "Dead In The Water")</title>
    <updated>2003-01-24T08:00:00.000Z</updated>
    <published>2003-01-24T08:00:00.000Z</published>
    <summary>Here. In which I come to a startling conclusion on why OO databases never really happened and never will.</summary>
    <content type="html">&lt;h1>OOD (The D Stands for "Dead In The Water")&lt;/h1>
&lt;a href="/12563">Here&lt;/a>. In which I come to a startling conclusion on why OO databases never really happened and never will.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/412</id>
    <title>ASP.NET: Tips and Tricks</title>
    <updated>2003-01-24T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <published>2003-01-24T08:00:00.000Z</published>
    <summary>Here. From Ben Kohn: See demonstrations of a variety of useful techniques and approaches that can be leveraged to help build powerful ASP.NET Web applications and Web Services. Learn about: debugging, tracing, event logging, performance counters, error handling, Web form session state, sending email from, file upload and others.</summary>
    <content type="html">&lt;h1>ASP.NET: Tips and Tricks &lt;/h1>
&lt;a href="http://www.only4gurus.com/download.asp?ID=190">Here&lt;/a>. From Ben Kohn: See demonstrations of a variety of useful techniques and approaches that can be leveraged to help build powerful ASP.NET Web applications and Web Services. Learn about: debugging, tracing, event logging, performance counters, error handling, Web form session state, sending email from, file upload and others.</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/12564</id>
    <title>Sealed Sucks</title>
    <updated>2003-01-23T08:00:00.000Z</updated>
    <category term="spout" label="The Spout"/>
    <published>2003-01-23T08:00:00.000Z</published>
    <summary>I've come to the conclusion that the use of the &amp;quot;sealed&amp;quot; keyword in C# (and the concept in.NET) should almost never be used, at least on a class. Semantically, sealed applied to a class means that a class cannot be used as a base class. For example, the ImageList class from the System.Windows.Forms namespace is sealed: public sealed class System.Windows.Forms.ImageList :... {... } What sealed means is that the designers of the ImageList class didn't take the time to test what would happen in all t...</summary>
    <content type="html">&lt;h1>Sealed Sucks&lt;/h1>
&lt;p>I've come to the conclusion that the use of the &amp;quot;sealed&amp;quot; 
keyword in C# (and the concept in .NET) should almost never be used, at least on 
a class. Semantically, sealed applied to a class means that a class cannot be 
used as a base class. For example, the ImageList class from the 
System.Windows.Forms namespace is sealed:&lt;/p>&lt;font COLOR="#0000ff">&lt;p>&lt;font face="Times New Roman">
public&lt;/font>&lt;/font>&lt;font face="Times New Roman"> &lt;font COLOR="#0000ff">sealed&lt;/font> &lt;font COLOR="#0000ff">
class&lt;/font> System.Windows.Forms.ImageList : ... { ... }&lt;/font>&lt;/p>&lt;p>What 
sealed means is that the designers of the ImageList class didn't take the time 
to test what would happen in all the scenarios where an ImageList is specified 
but a subclass is provided, e.g. MyImageListEx2. So, since they didn't test 
these scenarios, they're protecting developers from deriving from the ImageList 
base class when bad things might happen. They're also protecting developers if 
the base class changes radically in the future and derived classes no longer 
work.&lt;/p>&lt;p>Stop it!&lt;/p>&lt;p>I don't want to be protected in this way! Instead, I 
want to try to derive from ImageList and see if it works in the scenarios in 
which I'm interested. And if future versions of the ImageList base class break 
my derived class, I want to update my derived class in ways that work across 
versions of the base class or have two versions or whatever else I need to do to 
make it work. By making a class sealed, I just don't have any choice in the 
matter, which severely limits me in what I can do.&lt;/p>&lt;p>As an example, I think 
that the current ImageList implementation sucks in the following ways:&lt;/p>&lt;ul>&lt;li>
	Every time you need to edit an image, you need to remove the old image and 
	add it back again&lt;/li>&lt;li>Images are too small to see what they are&lt;/li>&lt;li>
	Can't tag images with names&lt;/li>&lt;/ul>&lt;p>So, I'd like to build my own 
ImageList implementation that has the exact same programmatic interface, but 
that pulls images from manifest resources, fixing most of the issues above. All 
of the controls that take images get them from an ImageList type, so I need to 
provide my extra functionality in a type that's compatible with ImageList. 
However, the only way to do that in .NET is via inheritance and the damn sealed 
attribute disables my ability to do that! Instead, I have to build a custom 
component that's also an extender provider if I want to provide the same 
design-time usage as an ImageList and I have to tell developers using my image 
list component not to use any of the ImageList-related properties because it 
will conflict with mine. I literally can't package my functionality in a way 
that's developer-friendly in the same way as the ImageList and it's all because 
it's *sealed*!&lt;/p>&lt;p>Of course, the ImageList class isn't the only one. I had a 
solution to the problem of asynchronous method calls to web services from 
WinForms apps the other day (the problem is that an extra hop is always required 
to get back to the UI thread), but my solution can't work because the base 
delegate type required to make an asynch call is sealed. And the list goes on 
and on of things that I can't do because somebody is &amp;quot;protected&amp;quot; me from 
potential bad things.&lt;/p>&lt;p>Please, please, please, please, please don't mark 
your classes sealed. If you do, folks that want to provide extended 
functionality, and test to make sure that it works the way it's supposed to, 
don't even have the option. Type compatibility is a huge deal when you're 
dealing with class-based abstractions instead of interface-based abstractions 
and using the sealed keyword throws all of that away. The C++ community survived 
very nicely without sealed for a decade and it's made half of the classes on my 
site possible.&lt;/p>&lt;p>You took away my deterministic finalization. Must you also 
take away my ability to derive?&lt;/p></content>
  </entry>
</feed>