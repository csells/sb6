<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:8080/subfeeds/feed3.atom</id>
  <title>Marquee de Sells</title>
  <updated>2019-08-04T07:00:00.000Z</updated>
  <link rel="first" href="http://localhost:8080/feed.atom"/>
  <link rel="last" href="http://localhost:8080/subfeeds/feed178.atom"/>
  <link rel="previous" href="http://localhost:8080/subfeeds/feed2.atom"/>
  <link rel="next" href="http://localhost:8080/subfeeds/feed4.atom"/>
  <link rel="self" href="http://localhost:8080/subfeeds/feed3.atom"/>
  <author>
    <name>Chris Sells</name>
    <uri>http://localhost:8080/</uri>
    <email>csells@sellsbrothers.com</email>
  </author>
  <category term=".net" label=".NET"/>
  <category term="book" label="Books"/>
  <category term="books" label="Books"/>
  <category term="colophon" label="Colophon"/>
  <category term="conference" label="Conference"/>
  <category term="data" label="Data"/>
  <category term="fun" label="Fun"/>
  <category term="interview" label="Interviewing"/>
  <category term="money" label="Money"/>
  <category term="oslofeaturedcontent" label="Oslo"/>
  <category term="osloeditorial" label="Oslo"/>
  <category term="oslo" label="Oslo"/>
  <category term="telerik" label="Telerik"/>
  <category term="spout" label="The Spout"/>
  <category term="tools" label="Tools"/>
  <category term="win8" label="Windows 8"/>
  <category term="writing" label="Writing"/>
  <subtitle>Chris's insight outlet</subtitle>
  <entry>
    <id>http://localhost:8080/12722</id>
    <title>Telerik’s evolving platform guidance for .NET developers</title>
    <updated>2012-10-08T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/jpg" href="/public/post-images/12722-66.jpeg"/>
    <category term="telerik" label="Telerik"/>
    <published>2012-10-08T07:00:00.000Z</published>
    <summary>Telerik often gets questions from its customers about which of the multitude of app frameworks that Microsoft provides for.NET developers that they should pick. WinForms? WPF? Silverlight? ASP.NET? What’s the right solution for their problem? The answer is always the same: it depends. Unfortunately, that’s not very helpful, so last year a set of the best and brightest that Telerik has to offer sat down and figured out just what it depends on and whether we could offer clear, concise guidance for our custome...</summary>
    <content type="html">&lt;h1>Telerik’s evolving platform guidance for .NET developers&lt;/h1>
&lt;p>&lt;img style="display: inline; float: right" align="right" src="/public/post-images/12722-66.jpeg" />Telerik often gets questions from its customers about which of the multitude of app frameworks that Microsoft provides for .NET developers that they should pick. WinForms? WPF? Silverlight? ASP.NET? What’s the right solution for their problem? The answer is always the same: it depends.&lt;/p>  &lt;p>Unfortunately, that’s not very helpful, so last year a set of the best and brightest that Telerik has to offer sat down and figured out just what it depends on and whether we could offer clear, concise guidance for our customers. The answer was “yes we could,” so we did that in 2011.&lt;/p>  &lt;p>However, it’s been a busy year that’s included two major events in the life of a .NET developer: Silverlight desktop and web have been shelved and Windows 8 has been born. So, with that in mind, we’ve updated the platform guidance to take those two important changes to the .NET developer landscape into account; you can read all about it in the &lt;a href="http://www.telerik.com/platformguidance.aspx">Telerik’s 2012 platform guidance for .NET developers&lt;/a>.&lt;/p>  &lt;p>Or, if you’re already familiar with the 2011 guidance, the rest of this post will be about what’s changed in 2012.&lt;/p>  &lt;h2>&lt;font style="font-weight: normal">Desktop Application&lt;/font>&lt;/h2>  &lt;p>Desktop applications represent the range of applications from those supporting internal information workers to those delighting consumers. These applications typically involve richly interactive interfaces, either for heavy-duty data management or entertainment. They key characteristic of desktop apps is the need to take advantage of the full range of native capabilities of the platform.&lt;/p>  &lt;h3>&lt;font style="font-weight: normal">Ideal .NET Platform: WPF&lt;/font>&lt;/h3>  &lt;p>WPF provides the ideal platform for building desktop apps. With mature, rich tooling provided in Visual Studio and Expression Blend, readily available components that address the full range of app styles, a large developer community and ClickOnce deployment, WPF gives the .NET developer all of the power of building “native” Windows software with a simple deployment model.&lt;/p>  &lt;h3>&lt;font style="font-weight: normal">Key Advantages of WPF:&lt;/font>&lt;/h3>  &lt;ul>   &lt;li>Mature platform with 1&lt;sup>st&lt;/sup> class support for rich media and data visualization&lt;b>&lt;/b>&lt;/li>    &lt;li>Excellent tooling and active developer community&lt;b>&lt;/b>&lt;/li>    &lt;li>Rich, deep access to the native Windows platform&lt;b>&lt;/b>&lt;/li>    &lt;li>Simple deployment and updates with ClickOnce&lt;b>&lt;/b>&lt;/li>    &lt;li>Good availability of complete 3&lt;sup>rd&lt;/sup> party toolsets&lt;b>&lt;/b>&lt;/li> &lt;/ul>  &lt;p>&lt;i>[Special Silverlight Guidance Note:&lt;b> &lt;/b>Silverlight is also a good candidate for building desktop apps, sharing many of the same characteristics of WPF. While it seems clear that Microsoft will not release a major version beyond the recently released Silverlight 5, their commitment to 10 more years of support as well as continued 3&lt;sup>rd&lt;/sup> party vendor support means that it’s a viable alternative for WPF development for new or existing Silverlight projects.] &lt;/i>&lt;/p>  &lt;h2>&lt;font style="font-weight: normal">Tablet Application&lt;/font>&lt;/h2>  &lt;p>The use of tablets and touch-centric apps within companies is on the rise, and tablet sales are expected to double in 2012 (Gartner). Unlike their mobile smartphone counterparts, which frequently complement existing desktop apps, analysts see the potential for tablets to be more disruptive, replacing certain types of desktop apps in the enterprise. For .NET developers, it is important to address this trend and pick a Microsoft platform that will deliver the best tablet experience. Many platforms available from Microsoft can be used to build touch-enabled apps, even WinForms, but Microsoft is providing clear guidance for modern, touch-first apps with the arrival of Windows 8.&lt;/p>  &lt;p>Microsoft’s Windows 8 introduces a new model for building touch-enabled, tablet friendly apps that are meant to be content-focused, easy to use with no documentation, touch-centric and tailored to the device. These apps will run in a new dedicated environment only available in Windows 8.&lt;/p>  &lt;p>Since Microsoft is making it clear that Windows 8 is their ideal platform for tablet apps, the bigger question developers must answer is &lt;i>how&lt;/i> to develop tablet apps. Tablet apps can be built with either XAML/.NET or HTML/JavaScript. Both approaches have access to the full capabilities of the device and share a common Windows Runtime API.&lt;/p>  &lt;h3>&lt;font style="font-weight: normal">Ideal Tablet Platform: XAML and .NET&lt;/font>&lt;/h3>  &lt;p>When building Windows 8 tablet apps, choosing between XAML/.NET and HTML/JS largely depends on the kinds of existing assets within an organization and the skills of the developers, but we recommend XAML and .NET for most tablet app development. Tablet apps built with XAML and .NET not only offer the familiar .NET programming paradigms (and tools) that have been popularized over years of .NET and XAML development, but a large amount of the code, assets and skills carry over to Windows Phone 8 (WP8) app development. In contrast, it is not possible to leverage HTML/JS assets if you’re also building apps for WP8.&lt;/p>  &lt;p>If supporting WP8 is not a key consideration for your tablet development, then it is important to know that Microsoft has worked to ensure the capabilities, tooling and run-time performance for both XAML and HTML tablet apps is as close to identical as possible. At that point, your choice between the two options is about the past and future technology strategy of your organization, not the capabilities of the platform.&lt;/p>  &lt;p>So while we primarily recommend XAML and .NET for tablet app development, here are key advantages to both approaches that should be considered:&lt;/p>  &lt;h3>&lt;font style="font-weight: normal">Key Advantages of XAML for building Metro-style apps:&lt;/font>&lt;/h3>  &lt;ul>   &lt;li>Based on the same core tools, assets and techniques of WPF and Silverlight.&lt;/li>    &lt;li>Comprehensive access to the underlying Windows Runtime (WinRT).&lt;/li>    &lt;li>Extensible with native C++ components for performance-intensive activities or complete access to the underlying WinRT.&lt;/li>    &lt;li>The same XAML tooling and techniques are available to native C++ programmers, if you feel the need to write your complete XAML-based tablet app in native code.&lt;/li>    &lt;li>App code, assets and skills reusable between Windows 8 and Windows Phone 8&lt;/li> &lt;/ul>  &lt;h3>&lt;i>&lt;/i>&lt;font style="font-weight: normal">Key Advantages of HTML for building Metro-style apps:&lt;/font>&lt;/h3>  &lt;ul>   &lt;li>Based on the same core HTML, JavaScript and CSS engines that power IE10.&lt;/li>    &lt;li>Built to support 3&lt;sup>rd&lt;/sup> party libraries, e.g. jQuery, as much as possible (although the sandbox security model can introduce challenges for certain libraries).&lt;/li>    &lt;li>Comprehensive access to the underlying Windows Runtime (WinRT).&lt;/li>    &lt;li>Extensible with native C++ components for performance-intensive activities or complete access to the underlying WinRT.&lt;/li>    &lt;li>Lower learning curve for developers more familiar and comfortable with HTML, JavaScript, and CSS than XAML.&lt;/li> &lt;/ul>  &lt;p>&lt;i>[Game support note: Both Windows Phone and Windows 8 provide access to DirectX for building high-performance “twitch” games. This access is provided via .NET XNA in Windows Phone 7 and via native DirectX in Windows 8. If you are planning on building high-performance games for these Microsoft platforms, we suggest this third option .]&lt;/i>&lt;/p>  &lt;h2>&lt;font style="font-weight: normal">Where are we?&lt;/font>&lt;/h2>  &lt;p>It’s clear that Silverlight is in no sense “dead.” At Telerik, we still sell a large number of licenses to Silverlight developers, although from an engineering point-of-view, we spend more time making sure we’re taking the best advantage we can of WPF. Also, even if we don’t recommend starting new desktop or web deployment projects in Silverlight, it’s still alive and well on Windows Phone 7 &amp;amp; 8 and it provides an excellent springboard into XAML development on Windows 8. If you think of Silverlight as one of Microsoft’s implementations of XAML, along with WPF and the Windows 8 support, you’ll have the right mindset to move your Silverlight web and desktop apps, developers, skills and assets forward to WPF on the desktop, Silverlight on the phone and XAML on Windows 8.&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12721</id>
    <title>Telerik Loves Windows 8 and Visual Studio 2012 RTMs!</title>
    <updated>2012-08-16T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="/public/post-images/12721-149.png"/>
    <category term="win8" label="Windows 8"/>
    <category term="telerik" label="Telerik"/>
    <published>2012-08-16T07:00:00.000Z</published>
    <summary>Yesterday’s release of Visual Studio 2012 and Blend for Visual Studio 2012 marks the beginning of a new era. In some ways, VS2012 and Blend are incremental releases, adding even better support for building enterprise and consumer apps and services for the desktop and the web. However, in one very important way, the release of VS2012 and Blend, together with the release of Windows 8 earlier this month, signals a whole new focus for the platform – that of touch-centric tablets – and with it, a whole new way t...</summary>
    <content type="html">&lt;h1>Telerik Loves Windows 8 and Visual Studio 2012 RTMs!&lt;/h1>
&lt;p>&lt;b>&lt;/b>&lt;/p>  &lt;p>&lt;a href="/public/post-images/12721-148.png">&lt;img style="display: inline; float: right" title="win8vs2012" alt="win8vs2012" align="right" src="/public/post-images/12721-149.png" width="254" height="109" />&lt;/a>Yesterday’s release of Visual Studio 2012 and Blend for Visual Studio 2012 marks the beginning of a new era. In some ways, VS2012 and Blend are incremental releases, adding even better support for building enterprise and consumer apps and services for the desktop and the web. However, in one very important way, the release of VS2012 and Blend, together with the release of Windows 8 earlier this month, signals a whole new focus for the platform – that of touch-centric tablets – and with it, a whole new way to package and distribute apps for the Windows operating system – the Windows Store.&lt;/p>  &lt;p>If Windows 8 sells even half of what Windows 7 has sold (which seems low, considering the support for a great number of new form factors), then that will represent 300 million customers all looking for new Windows 8 apps in the Store. Currently, that Store holds about 500 apps and even if Microsoft increases that number to 5,000 by general availability in October, that’s far short of the 500,000 apps that similar app stores have. In short, Windows 8 is going to have lots of users and those users are going to want to buy lots of apps. This is, of course, why Visual Studio 2012 and Blend are so important – they’re the tools you can use to design, develop and package your app for the Store and tap into those hundreds of millions of customers. Make no mistake – Windows 8 represents nothing short of a reboot of the Windows developer ecosystem and Visual Studio 2012 and Blend are the keys to that ecosystem.&lt;/p>  &lt;p>Windows 8, Visual Studio 2012 and Blend are important to Windows developers, which makes it important to Telerik customers. Because of that, we’ve been on the cutting edge here since the BUILD conference in September, releasing metro themes that first week and supporting the Beta and RCs in our tools and controls. And now I’m happy to announce that we fully support Windows 8, Visual Studio 2012 and Blend across nearly all of our Windows developer products. And not only do we support them, but we take special advantage of their unique features in our products, as you can read in the following posts:&lt;/p>  &lt;ul>   &lt;li>&lt;a href="http://blogs.telerik.com/jesseliberty/posts/12-08-15/radcontrols-for-metro-ready-to-rock-roll-with-windows-8-rtm-and-visual-studio-rtm.aspx?utm_source=TN&amp;amp;utm_medium=email&amp;amp;utm_campaign=august">RadControls for Metro&lt;/a>; Ready To Rock &amp;amp; Roll With Windows 8 RTM &lt;/li>    &lt;li>Just Like a Second Birthday - Telerik's &lt;a href="http://blogs.telerik.com/blogs/posts/12-08-15/just-like-a-second-birthday-telerik-s-controls-for-asp-net-ajax-and-visual-studio-2012-rtm.aspx?utm_source=TN&amp;amp;utm_medium=email&amp;amp;utm_campaign=august">Controls for ASP.NET AJAX&lt;/a> and Visual Studio 2012 RTM &lt;/li>    &lt;li>The &lt;a href="http://blogs.telerik.com/michaelcrump/posts/12-08-15/radcontrols-for-wpf-control-suites-is-ready-for-vs2012-rtm-are-you.aspx?utm_source=TN&amp;amp;utm_medium=email&amp;amp;utm_campaign=august">RadControls for WPF Control Suite&lt;/a> is ready for VS 2012 RTM! Are you? &lt;/li>    &lt;li>&lt;u>&lt;a href="http://blogs.telerik.com/blogs/posts/12-08-15/it-just-works-in-visual-studio-2012.aspx?utm_source=TN&amp;amp;utm_medium=email&amp;amp;utm_campaign=august">JustCode&lt;/a>, JustTrace, JustMock and JustDecompile&lt;/u>: They Just Work in Visual Studio 2012 &lt;/li>    &lt;li>Telerik's &lt;a href="http://blogs.telerik.com/blogs/posts/12-08-15/telerik-s-winforms-are-now-visual-studio-2012-rtm-ready-play-with-metro-themes-and-touch-gestures-on-windows-8.aspx?utm_source=TN&amp;amp;utm_medium=email&amp;amp;utm_campaign=august">WinForms&lt;/a> Controls are now Visual Studio 2012 RTM Ready! Play with Metro Themes and Touch Gestures on Windows 8! &lt;/li>    &lt;li>Simplify Data Access in VS 2012 RTM with &lt;a href="http://blogs.telerik.com/openaccessteam/posts/12-08-16/simplify-data-access-in-vs-2012-rtm-with-openaccess-orm.aspx?utm_source=TN&amp;amp;utm_medium=email&amp;amp;utm_campaign=august">OpenAccess ORM&lt;/a> &lt;/li>    &lt;li>Rocking &lt;a href="http://www.kendoui.com/blogs/teamblog/posts/12-08-15/rocking_kendo_ui_in_visual_studio_2012_and_windows_8.aspx?utm_source=TN&amp;amp;utm_medium=email&amp;amp;utm_campaign=august">Kendo UI&lt;/a> in Visual Studio 2012 and Windows 8 &lt;/li>    &lt;li>&lt;u>&lt;a href="http://www.telerik.com/automated-testing-tools/blog/12-08-16/test-studio-s-love-for-visual-studio-2012-rtm.aspx?utm_source=TN&amp;amp;utm_medium=email&amp;amp;utm_campaign=august">Test Studio’s&lt;/a>&lt;/u> Love for Visual Studio 2012 RTM &lt;/li>    &lt;li>&lt;a href="http://www.sitefinity.com/blogs/gabesumner/posts/12-08-15/sitefinity_thunder_supports_visual_studio_2012_and_helps_developers_avoid_alt_tab.aspx?utm_source=TN&amp;amp;utm_medium=email&amp;amp;utm_campaign=august">Sitefinity Thunder&lt;/a> supports Visual Studio 2012 and helps developers avoid ALT + TAB &lt;/li> &lt;/ul>  &lt;p>Of course, this is just the beginning of the tablet and mobile era for Windows developers, so count on Telerik to continue to push into Windows 8 and Windows Phone 8 for building touch-centric apps for both the Windows Store and the Windows Phone Store, as well as continuing to push our products to meet your needs on the desktop and on the web. Telerik’s been right there through the last decade of Windows development and you can expect us to be there for the next decade.&lt;/p>  &lt;p>Chris Sells    &lt;br />VP, Developer Tools     &lt;br />&lt;a href="http://twitter.com/csells">@csells&lt;/a>&lt;/p>  &lt;p>&lt;iframe height="315" src="http://www.youtube.com/embed/zeg9hB-UtVE" frameborder="0" width="560" allowfullscreen="allowfullscreen">&lt;/iframe>&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12720</id>
    <title>June, 2012, Florida: Best TechEd Ever!</title>
    <updated>2012-06-07T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/jpg" href="http://northamerica.msteched.com/p/tena2011/resources/techEdHeaderLogo.jpg"/>
    <category term="conference" label="Conference"/>
    <category term="telerik" label="Telerik"/>
    <published>2012-06-07T07:00:00.000Z</published>
    <summary>This month in Florida is going to be my 2nd TechEd ever and I’m sure the best by far. The number of things I get to do is staggering: I get to work the Telerik booth for my first big show. We’ll be launching not one but two completely new Telerik products. Fun! Since the Telerik Ultimate Collection has been nominated for the Best of TechEd, I get to give a dead-run 15-minute demo to the judges with fellow Teleriker Michael Crump. Also with Michael, I’ll be giving the 30-minute &amp;quot;Telerik + Blend: Better ...</summary>
    <content type="html">&lt;h1>June, 2012, Florida: Best TechEd Ever!&lt;/h1>
&lt;p>&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="http://northamerica.msteched.com/p/tena2011/resources/techEdHeaderLogo.jpg" />This month in Florida is going to be my 2nd TechEd ever and I’m sure the best by far. The number of things I get to do is staggering:&lt;/p>  &lt;ul>   &lt;li>I get to work the Telerik booth for my first big show. We’ll be launching not one but two completely new Telerik products. Fun!     &lt;br />&lt;/li>    &lt;li>Since &lt;a href="http://www.telerik.com/purchase.aspx">the Telerik Ultimate Collection&lt;/a> has been nominated for the Best of TechEd, I get to give a dead-run 15-minute demo to the judges with fellow Teleriker &lt;a href="http://michaelcrump.net/">Michael Crump&lt;/a>.      &lt;br />&lt;/li>    &lt;li>Also with Michael, I’ll be giving the 30-minute &amp;quot;Telerik + Blend: Better Together&amp;quot; talk in the Microsoft Visual Studio booth showing off how 3rd party controls work inside the newest Blend for building Metro style apps on Windows 8.     &lt;br />&lt;/li>    &lt;li>The first chapter of &lt;a href="/win8jsbook">the Metro/JS book&lt;/a> I’m writing with another fellow Teleriker &lt;a href="http://www.userinexperience.com/">Brandon Statrom&lt;/a> is being printed and bound in a limited quantity for the show. Stop by and get your signed copy!      &lt;br />&lt;/li>    &lt;li>I get to be one of the Speaker Idol judges every day at lunch.     &lt;br />&lt;/li>    &lt;li>I’m sure there’s at least one podcast recording in there, too, somewhere…&lt;/li> &lt;/ul>  &lt;p>I honestly can’t remember when I’ve looked forward to a conference more. I’ll see you there!&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12719</id>
    <title>Microsoft + ASP.NET + Open Source: This Time for Sure!</title>
    <updated>2012-04-09T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/jpg" href="/public/post-images/12719-145.jpeg"/>
    <published>2012-04-09T07:00:00.000Z</published>
    <summary>Bullwinkle: “Hey Rocky! Watch me pull a rabbit out of a hat!” Rocky: “Again? That trick never works!” Bullwinkle: “This time for sure!” In the last week or so, I’ve heard mixed reactions to Scott Hanselman’s eye-popping announcement that, in addition to ASP.NET MVC that is already open source, that Microsoft is releasing ASP.NET Web API and Razor as open source as well. Further, and this is the big deal: Microsoft is going to take contributions on their open source ASP.NET components and ship those contribu...</summary>
    <content type="html">&lt;h1>Microsoft + ASP.NET + Open Source: This Time for Sure!&lt;/h1>
&lt;p>&lt;a href="/public/post-images/12719-144.jpeg">&lt;img style="display: inline; float: right" title="rocky-and-bullwinkle" alt="rocky-and-bullwinkle" align="right" src="/public/post-images/12719-145.jpeg" width="200" height="240" />&lt;/a>&lt;em>Bullwinkle: “Hey Rocky! Watch me pull a rabbit out of a hat!”&lt;/em>&lt;/p>  &lt;p>&lt;em>Rocky: “Again? That trick never works!”&lt;/em>&lt;/p>  &lt;p>&lt;em>Bullwinkle: “This time for sure!”&lt;/em>&lt;/p>  &lt;p>In the last week or so, I’ve heard mixed reactions to &lt;a href="http://www.hanselman.com/blog/ASPNETMVC4ASPNETWebAPIAndASPNETWebPagesV2RazorNowAllOpenSourceWithContributions.aspx">Scott Hanselman’s eye-popping announcement&lt;/a> that, in addition to ASP.NET MVC that is already open source, that Microsoft is releasing ASP.NET Web API and Razor as open source as well. Further, and this is the big deal:&lt;/p>  &lt;p>&lt;strong>Microsoft is going to take contributions on their open source ASP.NET components and ship those contributions in the box for future major releases.&lt;/strong>&lt;/p>  &lt;p>Of course, this is big news on the face of it, but some folks aren’t convinced. Some more jaded members of the community look at the open sourcing of a Microsoft component as the beginning of the end for that component. “Look at &lt;a href="http://en.wikipedia.org/wiki/IronPython">IronPython&lt;/a>!” they say. “That project was open sourced right before &lt;a href="http://hugunin.net/microsoft_farewell.html">the team imploded&lt;/a>.”&lt;/p>  &lt;p>Another jaded point of voice is that Microsoft is open sourcing MVC so that they have a story when it’s killed: “You can add features to it all you want,” they claim Microsoft will say.&lt;/p>  &lt;p>The funny thing about all of those points of view is that I hear people complain all the time when Microsoft cancels something, “I don’t care if they cancel my favorite project; just release the source to the community!” I find it ironic that when Microsoft does release the source for a dying project, people complain about that, too.&lt;/p>  &lt;p>However, in this case, I don’t think that ASP.NET is going to be side-lined. In the previous cases, it was easy to see that Microsoft was moving on and to what, e.g. &lt;a href="http://msdn.microsoft.com/en-us/library/dd264741.aspx">the C# dynamic keyword&lt;/a> in the case of IronPython.&lt;/p>  &lt;p>ASP.NET, on the other hand, is a huge part of the server-side story for Microsoft and MVC is clearly the thing they’re focusing on. It’s the common thread for custom servers for both UI and API on both Windows Server and the Cloud and a big focus in the tooling for VS11.&lt;/p>  &lt;p>Further, Scott has a track record with making OSS work from Microsoft, including NuGet and the user contributions that it takes.&lt;/p>  &lt;p>And finally, both Scott Hanselman and Phil Haack, respected, active community members, not only drove these projects but &lt;a href="http://www.hanselman.com/blog/ASPNETMVC4ASPNETWebAPIAndASPNETWebPagesV2RazorNowAllOpenSourceWithContributions.aspx">have&lt;/a> &lt;a href="http://haacked.com/archive/2012/03/29/asp-net-mvc-now-accepting-pull-requests.aspx">endorsed&lt;/a> them.&lt;/p>  &lt;p>Those three things add up to Microsoft pulling the rabbit out of the hat for me.&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/win8jsbook</id>
    <title>Building Windows 8 Apps with JavaScript</title>
    <updated>2012-03-20T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="/public/post-images/12718-153.png"/>
    <category term="books" label="Books"/>
    <published>2012-03-20T07:00:00.000Z</published>
    <summary>Brandon Satrom and I are writing a book on Metro/JS apps for Win8, with Don Box. All of the content on this page is subject to change. Read Online Safari Books Online Purchase Amazon Table of Contents Foreword: Chris Anderson Foreword: Rey Bango Preface Ch</summary>
    <content type="html">&lt;h1>Building Windows 8 Apps with JavaScript&lt;/h1>
&lt;p>&lt;a href="http://www.userinexperience.com/">Brandon Satrom&lt;/a> and I are writing a book on Metro/JS apps for Win8, with Don Box. All of the content on this page is subject to change.&lt;/p>  &lt;p>&lt;a href="/public/post-images/12718-152.png">&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="winjs book cover" border="0" alt="winjs book cover" src="/public/post-images/12718-153.png" width="382" height="486" />&lt;/a>&lt;/p>  &lt;h2>Read Online&lt;/h2>  &lt;ul>   &lt;li>&lt;a href="http://my.safaribooksonline.com/9780133090628">Safari Books Online&lt;/a>&lt;/li> &lt;/ul>  &lt;h2>Purchase&lt;/h2>  &lt;ul>   &lt;li>&lt;a href="http://www.amazon.com/Building-Windows-8-Apps-JavaScript/dp/0321861280/">Amazon&lt;/a> &lt;/li> &lt;/ul>  &lt;h2>Table of Contents&lt;/h2>  &lt;ul>   &lt;li>Foreword: Chris Anderson &lt;/li>    &lt;li>Foreword: Rey Bango &lt;/li>    &lt;li>Preface &lt;/li>    &lt;li>Chapter 1. Hello, Windows 8 &lt;/li>    &lt;li>Chapter 2. Binding and Controls &lt;/li>    &lt;li>Chapter 3. Layout &lt;/li>    &lt;li>Chapter 4. Typography &lt;/li>    &lt;li>Chapter 5. Media &lt;/li>    &lt;li>Chapter 6. Drawing and Animation &lt;/li>    &lt;li>Chapter 7. App State &lt;/li>    &lt;li>Chapter 8. Networking &lt;/li>    &lt;li>Chapter 9. Shell Contracts &lt;/li>    &lt;li>Chapter 10. Shell Integration &lt;/li>    &lt;li>Chapter 11. Device Interaction &lt;/li>    &lt;li>Chapter 12. Extending With C++ &lt;/li>    &lt;li>Chapter 13. Making Money &lt;/li>    &lt;li>Appendix A: JavaScript for C-family Programmers &lt;/li>    &lt;li>Appendix B: Styling &amp;amp; Presentation at a Glance &lt;/li> &lt;/ul>  &lt;h1>Samples&lt;/h1>  &lt;p>Most of the chapters have several source code samples that accompany them, which &lt;a href="/public/writing/win8jsbook/win8jsbooksamples.zip">you can download&lt;/a> and use how you see fit. Enjoy!&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12717</id>
    <title>WinJS Promises: then and done</title>
    <updated>2012-03-12T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="/public/post-images/12717-143.png"/>
    <category term="telerik" label="Telerik"/>
    <category term="win8" label="Windows 8"/>
    <category term="telerik" label="Telerik"/>
    <category term="win8" label="Windows 8"/>
    <published>2012-03-12T07:00:00.000Z</published>
    <summary>As of the Windows Consumer Preview (aka Win8 Beta), the WinJS promises object has a “done” method as well as a “then” method. The “done” method is just like “then” except that it turns unhandled errors into exceptions. If you read no further, know this: Always call “done” as the last promise method in your promise chain. Let’s say you have a promise implementation that makes failure a strong possibility: &lt;ol style="background: #ffffff; mar</summary>
    <content type="html">&lt;h1>WinJS Promises: then and done&lt;/h1>
&lt;p>As of the Windows Consumer Preview (aka Win8 Beta), the WinJS promises object has a “done” method as well as a “then” method. The “done” method is just like “then” except that it turns unhandled errors into exceptions. If you read no further, know this:&lt;/p>  &lt;p>&lt;strong>Always call “done” as the last promise method in your promise chain.&lt;/strong>&lt;/p>  &lt;p>Let’s say you have a &lt;a href="http://msdn.microsoft.com/en-us/library/windows/apps/br211867.aspx">promise&lt;/a> implementation that makes failure a strong possibility:&lt;/p>  &lt;div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:78146b93-03d5-4e1a-9e89-1d88ab88db3c" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> &lt;div style="background: #fff; overflow: auto"> &lt;ol style="background: #ffffff; margin: 0; padding: 0 0 0 5px;"> &lt;li>&lt;span style="background:#ffffff;color:#0000ff">var&lt;/span>&lt;span style="background:#ffffff;color:#000000"> prom = &lt;/span>&lt;span style="background:#ffffff;color:#0000ff">new&lt;/span>&lt;span style="background:#ffffff;color:#000000"> WinJS.Promise(&lt;/span>&lt;span style="background:#ffffff;color:#0000ff">function&lt;/span>&lt;span style="background:#ffffff;color:#000000"> (c, e, p) { e(&lt;/span>&lt;span style="background:#ffffff;color:#a31515">&amp;quot;#fail&amp;quot;&lt;/span>&lt;span style="background:#ffffff;color:#000000">); });&lt;/span>&lt;/li> &lt;/ol> &lt;/div> &lt;/div> &lt;/div>  &lt;p>A fastidious developer will always pass in an error handler whenever then call the “then” method of a promise:&lt;/p>  &lt;div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b19317ab-24e4-4517-bcda-0119bfa583f2" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> &lt;div style="background: #fff; overflow: auto"> &lt;ol style="background: #ffffff; margin: 0; padding: 0 0 0 5px;"> &lt;li>&lt;span style="background:#ffffff;color:#000000">prom.then(..., &lt;/span>&lt;span style="background:#ffffff;color:#0000ff">function&lt;/span>&lt;span style="background:#ffffff;color:#000000"> (m) { content.innerText = &lt;/span>&lt;span style="background:#ffffff;color:#a31515">&amp;quot;Handled: &amp;quot;&lt;/span>&lt;span style="background:#ffffff;color:#000000"> + m; });&lt;/span>&lt;/li> &lt;/ol> &lt;/div> &lt;/div> &lt;/div>    &lt;p>However, in the case that the developer doesn’t pass in a error handler function when calling “then”, the error will silently drop on the floor:&lt;/p>  &lt;div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b993e38a-3fb0-449a-99c6-290039f32525" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> &lt;div style="background: #fff; overflow: auto"> &lt;ol style="background: #ffffff; margin: 0; padding: 0 0 0 5px;"> &lt;li>&lt;span style="background:#ffffff;color:#000000">prom.then(); &lt;/span>&lt;span style="background:#ffffff;color:#008000">// error? what error?&lt;/span>&lt;/li> &lt;/ol> &lt;/div> &lt;/div> &lt;/div>  &lt;p>I realize that the web was built around the idea that page errors should just silently whistle into the wind, but as an app developer:&lt;/p>  &lt;p>&lt;strong>Errors should be loud.&lt;/strong>&lt;/p>  &lt;p>So, I want my errors to be loud, I should default to using the “done” method on a promise instead:&lt;/p>  &lt;div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4258e7c2-86b7-4b6a-a1e6-2435a97525e0" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> &lt;div style="background: #fff; overflow: auto"> &lt;ol style="background: #ffffff; margin: 0; padding: 0 0 0 5px;"> &lt;li>&lt;span style="background:#ffffff;color:#000000">prom.done(); &lt;/span>&lt;span style="background:#ffffff;color:#008000">// error == BOOM!&lt;/span>&lt;/li> &lt;/ol> &lt;/div> &lt;/div> &lt;/div>  &lt;p>When I call the “done” method and an unhandled error is detected, WinJS throws an error that not even a try-catch handler will stop from showing in the developer’s face:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12717-142.png">&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/public/post-images/12717-143.png" width="644" height="368" />&lt;/a>&lt;/p>          &lt;p>Personally, I’d prefer to be able to catch such errors in try-catch blocks, but this behavior is far preferable to the error being ignored. Of course, if I care that much, I can provide an error handler function when calling done:&lt;/p>  &lt;div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:73bbd372-5337-4803-a97f-f9f363a49f9e" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> &lt;div style="background: #fff; overflow: auto"> &lt;ol style="background: #ffffff; margin: 0; padding: 0 0 0 5px;"> &lt;li>&lt;span style="background:#ffffff;color:#000000">prom.done(..., &lt;/span>&lt;span style="background:#ffffff;color:#0000ff">function&lt;/span>&lt;span style="background:#ffffff;color:#000000"> (m) { content.innerText = &lt;/span>&lt;span style="background:#ffffff;color:#a31515">&amp;quot;Handled: &amp;quot;&lt;/span>&lt;span style="background:#ffffff;color:#000000"> + m; });&lt;/span>&lt;/li> &lt;/ol> &lt;/div> &lt;/div> &lt;/div>  &lt;p>And finally, if I want to chain my promises, I just need to put the “then” methods in between so the errors flow, but the “done” method should always be last:&lt;/p>  &lt;div id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3dc3a217-b52c-4c06-a60c-0ef48d23a8a5" class="wlWriterEditableSmartContent" style="float: none; padding-bottom: 0px; padding-top: 0px; padding-left: 0px; margin: 0px; display: inline; padding-right: 0px"> &lt;div style="border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt"> &lt;div style="background: #ddd; overflow: auto"> &lt;ol start="1" style="background: #ffffff; margin: 0 0 0 2.5em; padding: 0 0 0 5px;"> &lt;li>&lt;span style="background:#ffffff;color:#0000ff">var&lt;/span>&lt;span style="background:#ffffff;color:#000000"> app = WinJS.Application;&lt;/span>&lt;/li> &lt;li style="background: #f3f3f3">&lt;span style="background:#ffffff;color:#000000">app.onactivated = &lt;/span>&lt;span style="background:#ffffff;color:#0000ff">function&lt;/span>&lt;span style="background:#ffffff;color:#000000"> (eventObject) {&lt;/span>&lt;/li> &lt;li>  &lt;span style="background:#ffffff;color:#000000">&lt;/span>&lt;span style="background:#ffffff;color:#008000">// start the download&lt;/span>&lt;/li> &lt;li style="background: #f3f3f3">  &lt;span style="background:#ffffff;color:#000000">downloadStatus.innerText = &lt;/span>&lt;span style="background:#ffffff;color:#a31515">&amp;quot;downloading posts...&amp;quot;&lt;/span>&lt;span style="background:#ffffff;color:#000000">;&lt;/span>&lt;/li> &lt;li>&amp;nbsp;&lt;/li> &lt;li style="background: #f3f3f3">  &lt;span style="background:#ffffff;color:#000000">&lt;/span>&lt;span style="background:#ffffff;color:#008000">// process the declarative controls&lt;/span>&lt;/li> &lt;li>  &lt;span style="background:#ffffff;color:#000000">WinJS.UI.processAll()&lt;/span>&lt;/li> &lt;li style="background: #f3f3f3">  &lt;span style="background:#ffffff;color:#000000">.then(&lt;/span>&lt;span style="background:#ffffff;color:#0000ff">function&lt;/span>&lt;span style="background:#ffffff;color:#000000"> () {&lt;/span>&lt;/li> &lt;li>    &lt;span style="background:#ffffff;color:#000000">&lt;/span>&lt;span style="background:#ffffff;color:#008000">// use the WinRT to download the RSS&lt;/span>&lt;/li> &lt;li style="background: #f3f3f3">    &lt;span style="background:#ffffff;color:#000000">&lt;/span>&lt;span style="background:#ffffff;color:#0000ff">var&lt;/span>&lt;span style="background:#ffffff;color:#000000"> syn = &lt;/span>&lt;span style="background:#ffffff;color:#0000ff">new&lt;/span>&lt;span style="background:#ffffff;color:#000000"> Windows.Web.Syndication.SyndicationClient();&lt;/span>&lt;/li> &lt;li>    &lt;span style="background:#ffffff;color:#000000">&lt;/span>&lt;span style="background:#ffffff;color:#0000ff">var&lt;/span>&lt;span style="background:#ffffff;color:#000000"> url = &lt;/span>&lt;span style="background:#ffffff;color:#0000ff">new&lt;/span>&lt;span style="background:#ffffff;color:#000000"> Windows.Foundation.Uri(&lt;/span>&lt;span style="background:#ffffff;color:#a31515">&amp;quot;http://blogs.msdn.com/b/oldnewthing/rss.aspx&amp;quot;&lt;/span>&lt;span style="background:#ffffff;color:#000000">);&lt;/span>&lt;/li> &lt;li style="background: #f3f3f3">    &lt;span style="background:#ffffff;color:#000000">&lt;/span>&lt;span style="background:#ffffff;color:#0000ff">return&lt;/span>&lt;span style="background:#ffffff;color:#000000"> syn.retrieveFeedAsync(url);&lt;/span>&lt;/li> &lt;li>  &lt;span style="background:#ffffff;color:#000000">})&lt;/span>&lt;/li> &lt;li style="background: #f3f3f3">  &lt;span style="background:#ffffff;color:#000000">.done(processPosts, downloadError);&lt;/span>&lt;/li> &lt;li>&lt;span style="background:#ffffff;color:#000000">};&lt;/span>&lt;/li> &lt;/ol> &lt;/div> &lt;/div> &lt;/div>  &lt;p>This is actual code from an app that pulls down an RSS feed after the processAll method is completed in the “then” method on line 8, which returns another promise on line 12. That promise is handled by the “done” method on line 14. If there had been an error in the download and as a developer, I’d forgotten to provide the “downloadError” error handler, I’d have gotten a giant exception dialog that would’ve encouraged me down a different path.&lt;/p>  &lt;p>&lt;em>Thanks to Josh Williams from the WinJS team for reminding me of the “done” method.&lt;/em>&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12716</id>
    <title>What’s New in the Beta Metro/JS Templates for VS11</title>
    <updated>2012-02-29T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="/public/post-images/12716-124.png"/>
    <category term="tools" label="Tools"/>
    <category term="win8" label="Windows 8"/>
    <category term="telerik" label="Telerik"/>
    <published>2012-02-29T08:00:00.000Z</published>
    <summary>The Consumer Preview of Windows 8 (aka the Win8 beta) is now available for download, along with the matching Visual Studio 11 beta. You can download them both from the Developer Center for Metro style Apps and at least when I did the downloading this morning, it was smooth and worked well. In case you’re interested, I downloaded the ISO, not the setup, and I am currently writing this blog entry in Windows Live Writer running inside a WMWare Workstation 8.0 virtual machine running on the Windows 7 host OS ru...</summary>
    <content type="html">&lt;h1>What’s New in the Beta Metro/JS Templates for VS11&lt;/h1>
&lt;p>The Consumer Preview of Windows 8 (aka the Win8 beta) is now available for download, along with the matching Visual Studio 11 beta. You can download them both from &lt;a href="http://msdn.microsoft.com/en-us/windows/apps/br229516.aspx">the Developer Center for Metro style Apps&lt;/a> and at least when I did the downloading this morning, it was smooth and worked well. In case you’re interested, I downloaded the ISO, not the setup, and I am currently writing this blog entry in Windows Live Writer running inside a WMWare Workstation 8.0 virtual machine running on the Windows 7 host OS running inside Boot Camp on my MacBook Pro. As someone said to me this morning: “That’s a lot of VMs!” Maybe so, but the Win8 and VS11 betas are running surprisingly well inside of my Inception-box.&lt;/p>  &lt;h2>Metro/JS Templates for VS11 in BUILD&lt;/h2>  &lt;p>If you played around with the Metro/JS templates in VS11 from the BUILD conference in September, you’ll have noticed that the generated apps were compliant with the Windows 8 UX style guidelines, but that two of the templates – Grip and Split – generated large amounts of code. That’s because these are pretty much the biggest apps that Microsoft has ever shipped as templates. They each have multiples pages and they work hard at being simple but feature complete Metro style apps.&lt;/p>  &lt;p>However, as well as the BUILD templates implemented the Win8 UX, their code wasn’t the greatest, for the following reasons:&lt;/p>  &lt;ul>   &lt;li>The templates were attempting to codify best practices for a brand-new app model. That’s always going to take time to get right. &lt;/li>    &lt;li>There was only so much time to get it right before BUILD – it was either have great code or implement a great UX, so the template team chose the latter. &lt;/li>    &lt;li>The bonehead PM in charge at the time (me) decided it was a better choice to push the data model into each page instead of centralizing it. That was a bad idea. &lt;/li>    &lt;li>The data model, spread as it was across nearly every JS file in the templates, was assumed to be static. However, the vast majority of apps get their data dynamically from some external source and the template-generated code made that very hard to implement. &lt;/li>    &lt;li>There were a number of features that the templates needed that didn’t exist directly in the platform, either in WinJS, the IE DOM or in the WinRT libraries, so the templates needed to provide those features. &lt;/li> &lt;/ul>  &lt;p>All of these reasons meant that the functionality of the generate Grid and Split apps made for an instructional start to building your own Metro style apps, assuming you were willing to wade through a great deal of code. The new templates in the Win8 beta solve nearly all of these problems.&lt;/p>  &lt;h2>&lt;a href="http://go.microsoft.com/?linkid=9801754">&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" title="Get-VS-11-Beta" alt="Get-VS-11-Beta" align="right" src="/public/post-images/12716-124.png" width="218" height="78" />&lt;/a>Metro/JS Templates for VS11 Beta&lt;/h2>  &lt;p>Out of the box, the Metro/JS templates in the VS11 beta (made available today, Feb 29, 2012), get more betterer as they get more complex.Let’s start simple and work our way up.&lt;/p>  &lt;p>&lt;a href="/public/post-images/12716-125.png">&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="/public/post-images/12716-126.png" width="644" height="364" />&lt;/a>&lt;/p>  &lt;h3>&lt;/h3>  &lt;h3>Blank Application&lt;/h3>  &lt;p>The Blank Application template is almost the smallest Metro/JS app you can build, except that it includes a reference to the Microsoft Windows Library for JavaScript (aka WinJS):&lt;/p>  &lt;p>&lt;a href="/public/post-images/12716-127.png">&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="/public/post-images/12716-128.png" width="340" height="529" />&lt;/a>&lt;/p>  &lt;p>And to be clear, this is a brand new feature. Including WinJS as a reference instead of dropping the code into each project means that MS can shipped a single shared implementation instead of every app in the store duplicating the code. If you want to duplicate the code into your project, you can do so, but you’ll also have to update the URL references to the JS and CSS files from your HTML files, like this snippet from the generated default.html:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d94a04ba-7a2b-4249-b85c-7ad18fe06018" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">default.html&lt;/div>      &lt;div style="background: #ddd; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #006400">&amp;lt;!-- WinJS references --&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">link&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">href&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;//Microsoft.WinJS.0.6/css/ui-dark.css&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">rel&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;stylesheet&amp;quot;&amp;gt;&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">script&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">src&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;//Microsoft.WinJS.0.6/js/base.js&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">script&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">script&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">src&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;//Microsoft.WinJS.0.6/js/ui.js&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">script&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>In addition to the new syntax with the leading double-slashes, that the number of WinJS files to include is a far smaller number in the Beta. Now it’s just base.js and ui.js, which makes it easy to decide which one(s) you want and in what order to include them, fixing a common problem in the BUILD bits.&lt;/p>  &lt;p>One other thing that’s new in the Blank Application template is that there are stubs for implementing tomb-stoning to easily save and restore your app’s session state in the default.js:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:07c59867-b719-4b20-8667-2e4906586fe4" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">default.js&lt;/div>      &lt;div style="background: #ddd; max-height: 500px; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2.5em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> app = WinJS.Application;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160; &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">app.onactivated = &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">function&lt;/span>&lt;span style="background: #ffffff; color: #000000"> (eventObject) {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">if&lt;/span>&lt;span style="background: #ffffff; color: #000000"> (eventObject.detail.kind === Windows.ApplicationModel.Activation.ActivationKind.launch) {&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">if&lt;/span>&lt;span style="background: #ffffff; color: #000000"> (eventObject.detail.previousExecutionState !== Windows.ApplicationModel.Activation.ApplicationExecutionState.terminated) {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// TODO: This application has been newly launched. Initialize &lt;/span>&lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// your application here.&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">} &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">else&lt;/span>&lt;span style="background: #ffffff; color: #000000"> {&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// TODO: This application has been reactivated from suspension. &lt;/span>&lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// Restore application state here.&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">}&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">WinJS.UI.processAll();&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">}&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">};&lt;/span> &lt;/li>          &lt;li>&amp;#160; &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">app.oncheckpoint = &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">function&lt;/span>&lt;span style="background: #ffffff; color: #000000"> (eventObject) {&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// TODO: This application is about to be suspended. Save any state&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// that needs to persist across suspensions here. You might use the &lt;/span>&lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// WinJS.Application.sessionState object, which is automatically&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// saved and restored across suspension. If you need to complete an&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// asynchronous operation before your application is suspended, call&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// eventObject.setPromise(). &lt;/span>&lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">};&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>The handling of the terminated state in the onactivated event on line 3 and the checkpoint event handler on like 16 are for reactivating and saving your app state respectively.&lt;/p>  &lt;p>And finally, the handy TODO comments are something you’ll find sprinkled throughout the templates based on usability feedback conducted to determine what developers really need help with as they add their own functionality to the app.&lt;/p>  &lt;h3>Fixed Layout Application&lt;/h3>  &lt;p>Moving up the complexity scale, the Fixed Layout Application template is meant to do just what it says – provide a jumping off point for apps that are logically fixed layout. The crux of this code is the use of the ViewBox control in the default.html:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:15058236-9480-452b-a252-e79df54efc78" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">default.html&lt;/div>      &lt;div style="background: #ddd; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">body&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">div&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">data-win-control&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;WinJS.UI.ViewBox&amp;quot;&amp;gt;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">div&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">class&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;fixedlayout&amp;quot;&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">p&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span>&lt;span style="background: #ffffff; color: #000000">Content goes here&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">p&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">div&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">div&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">body&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>Line 2 wraps the content of the app in a ViewBox control, which will scale everything inside of it to the size of the content, which is defined in the default.css file with the fixedLayout style:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0e2cadbb-a834-4d77-9b11-464691d7d889" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">default.css&lt;/div>      &lt;div style="background: #ddd; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #800000">.fixedlayout&lt;/span>&lt;span style="background: #ffffff; color: #000000"> {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #ff0000">-ms-grid-columns&lt;/span>&lt;span style="background: #ffffff; color: #000000">: &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">1fr&lt;/span>&lt;span style="background: #ffffff; color: #000000">;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #ff0000">-ms-grid-rows&lt;/span>&lt;span style="background: #ffffff; color: #000000">: &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">1fr&lt;/span>&lt;span style="background: #ffffff; color: #000000">;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #ff0000">display&lt;/span>&lt;span style="background: #ffffff; color: #000000">: &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">-ms-grid&lt;/span>&lt;span style="background: #ffffff; color: #000000">;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #ff0000">height&lt;/span>&lt;span style="background: #ffffff; color: #000000">: &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">768px&lt;/span>&lt;span style="background: #ffffff; color: #000000">;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #ff0000">width&lt;/span>&lt;span style="background: #ffffff; color: #000000">: &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">1024px&lt;/span>&lt;span style="background: #ffffff; color: #000000">;&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">}&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>You’ll see in lines 5 and 6 that the height and width of the div contained in the ViewBox is 768x1024, which means that the content can be created using absolute positioning and sizing. The job of the ViewBox is as the app is resized, either the computer’s resolution changes or more likely the app is moved between landscape, portrait, split and full sizes, the ViewBox will scale the content to take up as much room as possible, keeping the aspect ratio constant and scaling the content such that the app itself can think of itself as logically 768x1024 (or whatever the top-level div’s size is). This is very handy for building things like casual games where you want scaling, but generally not flowing – you want to control where the Scrabble tiles are or the tic-tac-toe pieces and it’s much easier to do that with a fixed size.&lt;/p>  &lt;p>And now that I’ve described it, I’ll tell you that this template is the only one that’s structurally identical between BUILD and Beta. Still, it is useful.&lt;/p>  &lt;h3>Navigation Application&lt;/h3>  &lt;p>The next one up the ladder is the Navigation Application template, which is where we get the Back button and the support for moving HTML fragments into and out of the DOM just like the user was logically navigation page-to-page. In the BUILD bits, this navigation functionality was packaged in the default.js file, but in the Beta, default.js is just the same as the simpler templates. Instead, the navigation functionality is packaged into a new file: navigator.js. The reason this file is separate is to make it clear if you’d like to implement a different navigation policy, e.g. MVC, then this is the file to start with. Further, while this functionality would seem a shoe-in to be included in WinJS, it’s not quite “baked” enough, which means that MS hasn’t yet decided that this is “the way” to do navigation.&lt;/p>  &lt;p>Still, it’s “a way” to do navigation in a Metro/JS app and a pretty useful one. Essential the way it works is that there is a singleton PageControlNavigator in the default.html file that holds the pages as they’re swapped in. The default.html is also where navigator.js is included:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:32fac664-9b38-4b3e-be8a-437474acaf4e" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">default.html&lt;/div>      &lt;div style="background: #ddd; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">script&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">src&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;/js/navigator.js&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">script&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">...&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">div&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">id&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;contenthost&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">data-win-control&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;Application7.PageControlNavigator&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">data-win-options&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;{home: '/html/homePage.html'}&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">div&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>The navigator.js file defines the PageControlNavigator control, which holds the logical pages as the user clicks around in the application. The home parameter is where to start the navigation. Navigation is to a Page, which is really a mapping between an HTML file and a set of events to handle over the lifetime of that Page:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:05287935-74e4-4b23-95de-6b3638f3f833" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">homePage.js&lt;/div>      &lt;div style="background: #ddd; max-height: 500px; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2.5em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #008000">// This function is called whenever a user navigates to this page. It&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #008000">// populates the page elements with the app's data.&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #0000ff">function&lt;/span>&lt;span style="background: #ffffff; color: #000000"> ready(element, options) {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// TODO: Initialize the fragment here.&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">}&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160; &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">WinJS.UI.Pages.define(&lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;/html/homePage.html&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">ready: ready&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">});&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>Of course, navigating to the home page is going to be rare compared to navigating between pages. The easiest way to get a new page to add to your app is to right-click on your project in the Solution Explorer and select Add | New Item:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12716-129.png">&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="/public/post-images/12716-130.png" width="644" height="364" />&lt;/a>&lt;/p>  &lt;p>The last item three item templates on the list are for shell contract implementations, which are beyond the scope of this blog post, but the first one is a Page Control, which gives us a triad of HTML, JS and CSS that fits exactly into the navigation model provided by the PageControlNavigator control:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8d3ef646-01c1-4380-947c-7abc1cbd5c56" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">page2.html&lt;/div>      &lt;div style="background: #ddd; max-height: 500px; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2.5em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;!&lt;/span>&lt;span style="background: #ffffff; color: #800000">DOCTYPE&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">html&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">html&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">head&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">meta&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">charset&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">title&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span>&lt;span style="background: #ffffff; color: #000000">page2&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">title&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160; &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #006400">&amp;lt;!-- WinJS references --&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">link&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">href&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;//Microsoft.WinJS.0.6/css/ui-dark.css&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">rel&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;stylesheet&amp;quot;&amp;gt;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">script&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">src&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;//Microsoft.WinJS.0.6/js/base.js&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">script&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">script&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">src&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;//Microsoft.WinJS.0.6/js/ui.js&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">script&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">link&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">href&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;page2.css&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">rel&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;stylesheet&amp;quot;&amp;gt;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">script&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">src&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;page2.js&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">script&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">head&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">body&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">div&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">class&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;page2 fragment&amp;quot;&amp;gt;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">header&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">aria-label&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;Header content&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">role&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;banner&amp;quot;&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">button&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">class&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;win-backbutton&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">aria-label&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;Back&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">disabled&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">button&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">h1&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">class&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;titlearea win-type-ellipsis&amp;quot;&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">span&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">class&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;pagetitle&amp;quot;&amp;gt;&lt;/span>&lt;span style="background: #ffffff; color: #000000">Welcome to page2&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">span&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">h1&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">header&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">section&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">aria-label&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;Main content&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">role&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;main&amp;quot;&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">p&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span>&lt;span style="background: #ffffff; color: #000000">Content goes here.&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">p&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">section&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">div&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">body&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">html&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>&amp;#160;&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8cb70abf-5758-4273-8260-3f3c546891e9" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">page2.cs&lt;/div>      &lt;div style="background: #ddd; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #800000">.page2&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #800000">p&lt;/span>&lt;span style="background: #ffffff; color: #000000"> {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #ff0000">margin-left&lt;/span>&lt;span style="background: #ffffff; color: #000000">: &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">120px&lt;/span>&lt;span style="background: #ffffff; color: #000000">;&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">}&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>&amp;#160;&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:019ca828-52a4-404d-bb75-bf124574b348" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">page2.js&lt;/div>      &lt;div style="background: #ddd; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2.5em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #008000">// This function is called whenever a user navigates to this page. It&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #008000">// populates the page elements with the app's data.&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #0000ff">function&lt;/span>&lt;span style="background: #ffffff; color: #000000"> ready(element, options) {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// TODO: Initialize the fragment here.&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">}&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160; &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #0000ff">function&lt;/span>&lt;span style="background: #ffffff; color: #000000"> updateLayout(element, viewState) {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// TODO: Respond to changes in viewState.&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">}&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160; &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">WinJS.UI.Pages.define(&lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;/page2.html&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">ready: ready,&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">updateLayout: updateLayout&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">});&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>Navigating to this new control defined by these files is a simple matter of calling the navigate method:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ead6a908-bef3-4cf7-9b8e-f6486af504a3" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">homePage.html&lt;/div>      &lt;div style="background: #ddd; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;&lt;/span>&lt;span style="background: #ffffff; color: #800000">a&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #ff0000">onclick&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">=&amp;quot;WinJS.Navigation.navigate('/page2.html')&amp;quot;&amp;gt;&lt;/span>&lt;span style="background: #ffffff; color: #000000">Page 2&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;lt;/&lt;/span>&lt;span style="background: #ffffff; color: #800000">a&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">&amp;gt;&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>As far as the user is concerned, the anchor tag shows up as a link like any other:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12716-131.png">&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="/public/post-images/12716-132.png" width="644" height="156" />&lt;/a>&lt;/p>  &lt;p>Clicking on “Page 2” fires the onclick event, which calls the navigate method, passing in the path to the HTML file and causes the Page control defined in page2.html, page2.js and page2.css to be loaded:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12716-133.png">&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="/public/post-images/12716-134.png" width="644" height="156" />&lt;/a>&amp;#160;&lt;/p>  &lt;p>In addition to whatever content on your Page control, notice that the Back button shows up automatically. The Back button manages navigation via clicking, touching and the browser keys; Ctrl+Left Arrow and Ctrl+Right Arrow work as Back and Forward respectively.&lt;/p>  &lt;h3>Grid and Split Application&lt;/h3>  &lt;p>At this point, we’ve covered almost all of the core concepts that make up the Grid and Split applications: they bring in WinJS by reference, they use controls and they use navigation via the Page controls. In fact, even though the Grid app has three pages and the Split app has two, they’re really just the navigation template with the pages to implement the Grid and Split app patterns that MS decided were the major app patterns appropriate for Win8. However, the Grid and Split application templates do have two major features that the other templates don’t have: support for multiple view states and a centralized data model.&lt;/p>  &lt;p>Multiple view state support means that as the app is moved between portrait, landscape, full and split, the app adjusts itself to look good in all states. The view state management is mostly handled with CSS styles associated with media modes, like in the Split App’s itemsPage.css:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:604c22dd-392a-4cfa-b8a5-cfac149338ee" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">itemsPage.css&lt;/div>      &lt;div style="background: #ddd; max-height: 500px; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #800000">...&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #800000">@media&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #800000">screen&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #800000">and&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #800000">(-ms-view-state:&lt;/span>&lt;span style="background: #ffffff; color: #000000"> &lt;/span>&lt;span style="background: #ffffff; color: #800000">snapped)&lt;/span>&lt;span style="background: #ffffff; color: #000000"> {&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">.itemspage .itemslist .win-vertical.win-viewport .win-surface {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #ff0000">margin-bottom&lt;/span>&lt;span style="background: #ffffff; color: #000000">: &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">30px&lt;/span>&lt;span style="background: #ffffff; color: #000000">;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">}&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #800000">...&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>In Metro/JS apps, MS has provided a media query predicate called -ms-view-state, which can be one of the four view states and the styles in the media query block will be applied when the app moves to that state. In addition, if you want to handle the view state change in JS, you can do so with updateLayout event in your Page control, like this snippet from itemsPage.js:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:580f74cf-273a-4196-af17-3ef3dacc1e92" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">itemsPage.js&lt;/div>      &lt;div style="background: #ddd; max-height: 500px; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2.5em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// This function updates the page layout in response to viewState changes.&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">updateLayout: &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">function&lt;/span>&lt;span style="background: #ffffff; color: #000000"> (element, viewState) {&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> listView = element.querySelector(&lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;.itemslist&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">).winControl;&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">if&lt;/span>&lt;span style="background: #ffffff; color: #000000"> (viewState === Windows.UI.ViewManagement.ApplicationViewState.snapped) {&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">listView.layout = &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">new&lt;/span>&lt;span style="background: #ffffff; color: #000000"> ui.ListLayout();&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">} &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">else&lt;/span>&lt;span style="background: #ffffff; color: #000000"> {&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">listView.layout = &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">new&lt;/span>&lt;span style="background: #ffffff; color: #000000"> ui.GridLayout();&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">}&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">}&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>In this case, the updateLayout event is called when the control is initially created and as the app moves through the view states so it can change the layout style for the ListView control showing the contents of the page:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12716-135.png">&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="/public/post-images/12716-136.png" width="343" height="484" />&lt;/a>&lt;a href="/public/post-images/12716-137.png">&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="/public/post-images/12716-138.png" width="251" height="484" />&lt;/a>&lt;/p>  &lt;p>&lt;strong>Landscape vs. Snapped view state layout for the itemsPage ListView control&lt;/strong>&lt;/p>  &lt;p>The other major feature of the Grid and Split app templates – and this feature is new in the Beta bits – is the centralized data model, which is where the data for all pages comes from. This data model is defined in data.js and it contains the static group and item data as you just saw. The core of the data is exposed from data.js like so:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:88922e97-4361-43ef-b3a9-494e1086819f" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">data.js&lt;/div>      &lt;div style="background: #ddd; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #000000">WinJS.Namespace.define(&lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;data&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">items: groupedItems,&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">groups: groupedItems.groups,&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">getItemsFromGroup: getItemsFromGroup&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">});&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>These three members of the data object are used throughout the templates, e.g. in the itemsPage.js ready event handler:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:40aa5ee9-d867-4a1c-b819-5077f2d9caa5" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">itemsPage.js&lt;/div>      &lt;div style="background: #ddd; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2.5em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// This function is called whenever a user navigates to this page. It&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// populates the page elements with the app's data.&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">ready: &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">function&lt;/span>&lt;span style="background: #ffffff; color: #000000"> (element, options) {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> listView = element.querySelector(&lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;.itemslist&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">).winControl;&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">ui.setOptions(listView, {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">itemDataSource: data.groups.dataSource,&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">itemTemplate: element.querySelector(&lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;.itemtemplate&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">),&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">oniteminvoked: &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">this&lt;/span>&lt;span style="background: #ffffff; color: #000000">.itemInvoked.bind(&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">this&lt;/span>&lt;span style="background: #ffffff; color: #000000">),&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">});&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">this&lt;/span>&lt;span style="background: #ffffff; color: #000000">.updateLayout(element, Windows.UI.ViewManagement.ApplicationView.value);&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">},&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>Notice that the data.groups property is used on line 6 to perform a data binding operation. That data binding is against the dataSource property of the object returned from data.groups, which itself is created by a method on the WinJS.Binding.List object that holds the grouped item data. It’s this binding list, a new feature in WinJS for the Beta, that makes it easy to move from the static data provided by the templates and dynamic data that your app defines.&lt;/p>  &lt;p>The binding list is a binding data source, which means that as you add items to it, it notifies any control that happens to be bound to it. This is especially handy when your app starts up with zero data, but you need to initialize the ListViews such that as the data is available (perhaps from an asynchronous network call), it will be shown.&lt;/p>  &lt;p>If you open up the data.js, you’ll see the static sample data:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:6292256e-028d-4639-b496-b54ccd4e517b" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">static sample data&lt;/div>      &lt;div style="background: #ddd; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2.5em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// Each of these sample groups must have a unique key to be displayed&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// separately.&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> sampleGroups = [&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">{ key: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;group1&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, title: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;Group Title: 1&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, subtitle: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;Group Subtitle: 1&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, backgroundImage: darkGray, description: groupDescription },&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">...&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">];&lt;/span> &lt;/li>          &lt;li>&amp;#160; &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// Each of these sample items should have a reference to a particular&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// group.&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> sampleItems = [&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">{ group: sampleGroups[0], title: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;Item Title: 1&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, subtitle: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;Item Subtitle: 1&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, description: itemDescription, content: itemContent, backgroundImage: lightGray },&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">...&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">];&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>The group data has a unique key, a title, a subtitle, a background image and a description, which are all fields that the data templates used in the Split and Grid apps depend upon (although you can change them if you like). The item data has a reference to the group to which it belongs, a title, a subtitle, a description, a background image and the content for the item itself.&lt;/p>  &lt;p>The code that populates the binding list with the sample data looks like this:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:acbec226-c92e-4927-bbd2-0a04b45d9cdc" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">statically bound data&lt;/div>      &lt;div style="background: #ddd; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> list = &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">new&lt;/span>&lt;span style="background: #ffffff; color: #000000"> WinJS.Binding.List();&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> groupedItems = list.createGrouped(groupKeySelector, groupDataSelector);&lt;/span> &lt;/li>          &lt;li>&amp;#160; &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// TODO: Replace the data with your real data.&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// You can add data from asynchronous sources whenever it becomes available.&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">sampleItems.forEach(&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">function&lt;/span>&lt;span style="background: #ffffff; color: #000000"> (item) {&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">list.push(item);&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">});&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>As the comment makes clear, it’s this code you’re most likely to want to change. Instead of pulling in static data from the sampleItems array, we want to pull the items in asynchronously, perhaps &lt;a href="/12713">from an RSS feed or two just like my earlier post&lt;/a>:&lt;/p>  &lt;div style="padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px" id="scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:fabf93ef-d9ba-4d51-86a8-6a436eeb9f47" class="wlWriterSmartContent">   &lt;div style="border-bottom: #000080 1px solid; border-left: #000080 1px solid; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; color: #000; font-size: 10pt; border-top: #000080 1px solid; border-right: #000080 1px solid">     &lt;div style="padding-bottom: 2px; padding-left: 5px; padding-right: 5px; font-family: verdana, tahoma, arial, sans-serif; background: #000080; color: #fff; font-weight: bold; padding-top: 2px">dynamically bound data&lt;/div>      &lt;div style="background: #ddd; overflow: auto">       &lt;ol style="padding-bottom: 0px; margin: 0px 0px 0px 2.5em; padding-left: 5px; padding-right: 0px; background: #ffffff; padding-top: 0px">         &lt;li>&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> list = &lt;/span>&lt;span style="background: #ffffff; color: #0000ff">new&lt;/span>&lt;span style="background: #ffffff; color: #000000"> WinJS.Binding.List();&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> groupedItems = list.createGrouped(groupKeySelector, groupDataSelector);&lt;/span> &lt;/li>          &lt;li>&amp;#160; &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// RSS feeds&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> feeds = [&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">{ key: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;feed1&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, title: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;Scott Hanselman&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, subtitle: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;a blog&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, backgroundImage: darkGray, description: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;a blog&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, url: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;http://feeds.feedburner.com/ScottHanselman&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000"> },&lt;/span> &lt;/li>          &lt;li>&amp;#160; &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">{ key: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;feed2&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, title: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;Raymond Chen&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, subtitle: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;a blog&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, backgroundImage: lightGray, description: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;a blog&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, url: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;http://blogs.msdn.com/b/oldnewthing/rss.aspx&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000"> },&lt;/span> &lt;/li>          &lt;li>&amp;#160; &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">{ key: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;feed3&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, title: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;Chris Sells&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, subtitle: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;a blog&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, backgroundImage: mediumGray, description: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;a blog&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">, url: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;http://127.0.0.1:8080/posts/?format=rss&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000"> },&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">];&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160; &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">feeds.forEach(&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">function&lt;/span>&lt;span style="background: #ffffff; color: #000000"> (feed) {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">WinJS.xhr({ url: feed.url }).then(&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">function&lt;/span>&lt;span style="background: #ffffff; color: #000000"> (request) { processPosts(feed, request); });&lt;/span> &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">});&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160; &lt;/li>          &lt;li>&lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">function&lt;/span>&lt;span style="background: #ffffff; color: #000000"> processPosts(feed, request) {&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #008000">// parse the RSS&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> nodes = request.responseXML.selectNodes(&lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;//item&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">);&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">for&lt;/span>&lt;span style="background: #ffffff; color: #000000"> (&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> i = 0, len = nodes.length; i &amp;lt; len; i++) {&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> node = nodes[i];&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">&lt;/span>&lt;span style="background: #ffffff; color: #0000ff">var&lt;/span>&lt;span style="background: #ffffff; color: #000000"> item = {&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">group: feed,&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">title: node.selectNodes(&lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;title&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">)[0].text,&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">subtitle: node.selectNodes(&lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;pubDate&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">)[0].text,&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">description: &lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;a post&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">,&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">content: node.selectNodes(&lt;/span>&lt;span style="background: #ffffff; color: #a31515">&amp;quot;description&amp;quot;&lt;/span>&lt;span style="background: #ffffff; color: #000000">)[0].text,&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">backgroundImage: feed.backgroundImage&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">};&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">list.push(item);&lt;/span> &lt;/li>          &lt;li>&amp;#160;&amp;#160;&amp;#160; &lt;span style="background: #ffffff; color: #000000">}&lt;/span> &lt;/li>          &lt;li style="background: #f3f3f3">&lt;span style="background: #ffffff; color: #000000">}&lt;/span> &lt;/li>       &lt;/ol>     &lt;/div>   &lt;/div> &lt;/div>  &lt;p>In this case, our group data is a set of RSS feeds, being careful to continue to use the same group field names so I don’t have to update the data templates in the rest of the app. When the app loads, I still create a binding list, but instead of filling it directly, I start an async xhr call (the WinJS XMLHttpRequest wrapper) for each feed, creating an item for each RSS post I find upon a successful completion. Because I’ve left the data model alone and because I’m using the binding list, that’s all I have to change and now the entire app has been updated to support that data:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12716-139.png">&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="/public/post-images/12716-140.png" width="365" height="772" />&lt;/a>&lt;/p>  &lt;p>&lt;strong>The items page with the set of feeds in the Split app template&lt;/strong>&lt;/p>  &lt;p>&lt;strong>&lt;/strong>&lt;/p>  &lt;p>&lt;img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="/public/post-images/12716-141.png" width="594" height="484" />&lt;/p>  &lt;p>&lt;strong>The split page with the posts from the selected feed&lt;/strong>&lt;/p>  &lt;h2>&lt;/h2>  &lt;h2>Where Are We?&lt;/h2>  &lt;p>As you can see, the Metro/JS templates in the VS11 beta start simple and add features with navigation, pages with specific app pattern functionality, multiple view state support and a unified data model. The main difference is the Beta versions of this templates is that code has been simplified, beautified and pushed into WinJS as much as possible to make the inside of your app just as pretty and easy to use as the outside.&lt;/p>  &lt;h2>&lt;/h2>  &lt;h2>Translation&lt;/h2>  &lt;p>This article has been &lt;a href="http://science.webhostinggeeks.com/sta-je-novo-u-beta">translated into Serbo-Croatian&lt;/a> by Jovana Milutinovich. Enjoy.&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12715</id>
    <title>Editor’s Note, Telerik Newsletter, February 2012</title>
    <updated>2012-02-14T08:00:00.000Z</updated>
    <published>2012-02-14T08:00:00.000Z</published>
    <summary>Hello, all, and welcome to the February, 2012 edition of the Telerik newsletter! As the newest employee at Telerik, I’m still learning all of the good stuff we’re doing just in the area of developer tools. For example, the features in JustCode that fix up my using statements (Ctrl+Shift+U) and show me a type’s shape and implementation via the JustDecompile integration (F12) are now ingrained into my fingertips, but I just learned (JustLearned!) that if I want to get completions on types that aren’t even lis...</summary>
    <content type="html">&lt;h1>Editor’s Note, Telerik Newsletter, February 2012&lt;/h1>
&lt;p>Hello, all, and welcome to the February, 2012 edition of the &lt;a href="http://telerik.com">Telerik&lt;/a> newsletter! As the newest employee at Telerik, I’m still learning all of the good stuff we’re doing just in the area of developer tools.&lt;/p>  &lt;p>For example, the features in JustCode that fix up my using statements (Ctrl+Shift+U) and show me a type’s shape and implementation via the JustDecompile integration (F12) are now ingrained into my fingertips, but I just learned (JustLearned!) that if I want to get completions on types that aren’t even listed in my using statements, I can use Ctrl+Alt+Space and keep right on coding, which is one of &lt;a href="http://www.telerik.com/products/justcode/whats-new.aspx">a ton of new features in the 2012 Q1 release&lt;/a>. More new features in the Just family of tools include a new decompilation engine in JustDecompile to more completely handle new .NET constructs, a new “Largest Memory Retainer” view in JustTrace to find memory leakers and the ability write your very own JustCode extensions. And the &lt;a href="http://www.telerik.com/products/reporting/whats-new.aspx">Reporting&lt;/a> and &lt;a href="http://www.telerik.com/products/orm/whats-new.aspx">OpenAccess ORM&lt;/a> tools have great new features coming, too!&lt;/p>  &lt;p>On the controls side, for which Telerik is very well-known, we have new features in the &lt;a href="http://www.telerik.com/products/aspnet-ajax/whats-new.aspx">ASP.NET AJAX&lt;/a> and &lt;a href="http://www.telerik.com/products/aspnet-mvc/whats-new.aspx">MVC&lt;/a> suites, XAML &lt;a href="http://www.telerik.com/products/silverlight/whats-new.aspx">Silverlight&lt;/a>, &lt;a href="http://www.telerik.com/products/wpf/whats-new.aspx">WPF&lt;/a> and &lt;a href="http://blogs.telerik.com/blogs/posts/12-02-16/announcing-radcontrols-for-windows-phone-q1-2012.aspx">Windows Phone 7&lt;/a> suites and even &lt;a href="http://www.telerik.com/products/winforms/whats-new.aspx">the WinForms suite&lt;/a>. For example, one of the more amazing controls for me is that RadFileExplorer, which provides an entire logical way to explore files over the web, however you’d like to expose them, and is now &lt;a href="http://blogs.telerik.com/blogs/posts/12-02-08/a-better-way-to-view-images-in-radfileexplorer-for-asp-net-ajax-thumbnail-view-comes-in-q1-2012.aspx">updated with thumbnail image support&lt;/a>. Plus, AJAX adds support for client-side data binding, exporting to Excel for RadTreeList and nearly complete support across the entire suite for OData. Further, MVC, Silverlight and WPF all get much enhanced data visualizations with charting and diagramming.&lt;/p>  &lt;p>However, my favorite set of additions in the controls suite has to be focus on the end-to-end app building support from the WP7 team, including handling ratings, tooltips and &lt;a href="http://blogs.telerik.com/valentinstoychev/posts/12-02-01/announcing-application-building-blocks-for-metro-applications.aspx">the new Application Building Blocks&lt;/a>, which includes components for sending diagnostic data back to the developer, implementing trial feature and app expirations and a helper for implementing LiveTiles. This set of components came directly out of the experience the WP7 team had in building and shipping &lt;a href="http://www.windowsphone.com/en-US/apps/21c17744-f63c-4b21-8a69-600cd08193f5">the Tasks apps&lt;/a>, which started as &lt;a href="http://www.telerik.com/products/windows-phone/getting-started/todolists.aspx">the ToDoLists sample&lt;/a>. The WP7 team that working hard to make mobile developers happy, even providing guidance on how to &lt;a href="http://blogs.telerik.com/blogs/posts/12-02-07/what-makes-end-users-and-the-marketplace-love-your-windows-phone-app.aspx">build apps your customers will love&lt;/a> and how you can &lt;a href="http://blogs.telerik.com/telerikmarketing/posts/11-12-02/how-to-promote-your-windows-phone-app-on-a-shoestring.aspx">make money on your apps&lt;/a>.&lt;/p>  &lt;p>All of this mobile experience is pouring directly into a whole new set of controls, tools and components that we’re building for Windows 8. Even today, &lt;a href="http://blogs.telerik.com/blogs/posts/11-09-22/justcode-support-for-visual-studio-11.aspx">JustCode already support the Visual Studio 11&lt;/a> and &lt;a href="http://blogs.telerik.com/blogs/posts/11-06-22/metro-ui-for-radcontrols-for-silverlight-and-wpf.aspx">our controls have a Metro style theme built right in&lt;/a>. Of course, we’re not going to stop there; we’re already spinning up a team dedicated to helping you build end-to-end mobile apps on Windows 8. We’re working closely with Microsoft to make sure we release our Visual Studio 12 extensions and support when VS12 ships, but you’ll see more from us even sooner than that. Stay tuned!&lt;/p>  &lt;p>Really, there’s too much good stuff to list, so if I were you, I’d hang out on &lt;a href="http://blogs.telerik.com/blogs.aspx">the Telerik blogs&lt;/a> and on &lt;a href="https://twitter.com/#!/telerik">the @Telerik twitter feed&lt;/a> to see what’s coming up. Even better, &lt;a href="http://www.telerik.com/support/webinars.aspx">check out the upcoming webinars&lt;/a> to see the new features in action and &lt;a href="http://www.telerik.com/download.aspx">install the free trials&lt;/a>. And, if you’re got questions, even with the trials, drop us a line on &lt;a href="http://www.telerik.com/support.aspx">our support center&lt;/a> and we’ll get you answers right away. Or, if you’d like to talk to me directly, feel free to &lt;a href="mailto:csells@telerik.com">drop me a line&lt;/a>. We care deeply about making sure our customers get when they need, so keep those cards and letters coming!&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12713</id>
    <title>The Windows Libraries for JavaScript: Part I</title>
    <updated>2012-01-06T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/jpg" href="/public/post-images/12713-119.jpeg"/>
    <category term="telerik" label="Telerik"/>
    <category term="win8" label="Windows 8"/>
    <published>2012-01-06T08:00:00.000Z</published>
    <summary>DISCLAIMER: This post is targeted at the //build/ version of the Windows Developer Preview (aka Windows 8). Things are likely to change with future releases. On your head be it. In the last post in this series, we looked at getting started building Metro style apps built using JavaScript (Metro/JS apps) with Microsoft Visual Studio 11 for the Windows Developer Preview (aka VS11) and Microsoft Expression Blend 5 Developer Preview (aka Blend). In this installment, we’re going to take a look at the library tha...</summary>
    <content type="html">&lt;h1>The Windows Libraries for JavaScript: Part I&lt;/h1>
&lt;p>&lt;font color="#ff0000">DISCLAIMER: This post is targeted at &lt;/font>&lt;a href="http://buildwindows.com">&lt;font color="#ff0000">the //build/ version of the Windows Developer Preview&lt;/font>&lt;/a>&lt;font color="#ff0000"> (aka Windows 8). Things are likely to change with future releases. On your head be it.&lt;/font>&lt;/p>  &lt;p>In &lt;a href="/12712">the last post in this series&lt;/a>, we looked at getting started building Metro style apps built using JavaScript (Metro/JS apps) with Microsoft Visual Studio 11 for the Windows Developer Preview (aka VS11) and Microsoft Expression Blend 5 Developer Preview (aka Blend).&lt;/p>  &lt;p>In this installment, we’re going to take a look at the library that brings WinRT and the web platform together: the Windows Library for JavaScript (aka WinJS) and build an app while we’re doing it.&lt;/p>  &lt;h2>The Need for WinJS&lt;/h2>  &lt;p>While it is the case, as you’ll see, that a Metro/JS apps have the same access to the underlying Windows platform as any other language projection (like Metro/VB, Metro/C# and Metro/C++ apps), it’s also the case that HTML/JavaScript programmers have a certain style that they are used to programming in. In some cases, those habits need to change because Metro/JS apps aren’t web sites or even web applications; Metro/JS apps are native applications that happen to be built with HTML, JavaScript, CSS, SVG, etc.&lt;/p>  &lt;p>However, in many cases, existing JavaScript habits are good ones and should be encouraged. Towards that end, Microsoft engineers have built the Windows Libraries for JavaScript (WinJS), which is a set of reusable JavaScript and CSS files which were created specifically to make it easier for you to build Metro/JS apps with the right Win8 “feel” to them.&lt;/p>  &lt;p>The easiest way to bring WinJS into your project is to create an application using any of the Metro/JS project templates, since all of them include the WinJS files:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12713-118.jpeg">&lt;img style="display: inline" title="clip_image002" alt="clip_image002" src="/public/post-images/12713-119.jpeg" width="280" height="480" />&lt;/a>&lt;/p>  &lt;p>WinJS is defined by the files under the winjs folder. The Blank Application project template produces an application with an empty window, but it does it with style; specifically the style that makes a Metro/JS app look like a Win8 app. Of course, the styles alone can’t make everything right – you’ll also need the right layout, behavior, etc. As an example of how to build a Metro/JS apps that’s slightly more exciting than the one we’ve been looking at so far, let’s build one of the most famous members of the Windows team – Raymond Chen.&lt;/p>  &lt;p>Mr. Chen is a developer on the Windows team that brought you the Windows Developer Preview (aka Win8). Further, he’s the author of the most excellent book “The Old New Thing” based on &lt;a href="http://blogs.msdn.com/b/oldnewthing/">a blog of the same name&lt;/a>:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12713-120.jpeg">&lt;img style="display: inline" title="clip_image004" alt="clip_image004" src="/public/post-images/12713-121.jpeg" width="726" height="768" />&lt;/a>&lt;/p>  &lt;p>Chen’s blog is famous for digging into the forgotten nooks and crannies of the Windows platform. And for our purposes, Chen’s blog is an excellent target for our sample because he’s chosen a blogging platform that exposes the full text of his posts in a programmatic form (both RSS and Atom) so that we can build a Win8 app to show them.&lt;/p>  &lt;p>Any blog displayed in the browser is essentially the title, date and content from each of the latest blog posts. To start, we need to download the data for each of his posts. To do that, we first need to know where to put that code.&lt;/p>  &lt;h2>The WinJS.Application object&lt;/h2>  &lt;p>The Blank Application template-generated default.html loads a minimal set of WinJS JavaScript and CSS files:&lt;/p>  &lt;pre class="code">&lt;span style="background: white; color: blue">&amp;lt;!&lt;/span>&lt;span style="background: white; color: maroon">DOCTYPE &lt;/span>&lt;span style="background: white; color: red">html&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">html&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">head&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">meta &lt;/span>&lt;span style="background: white; color: red">charset&lt;/span>&lt;span style="background: white; color: blue">=&amp;quot;utf-8&amp;quot; /&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">title&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&lt;/span>&lt;span style="background: white; color: black">RssReader&lt;/span>&lt;span style="background: white; color: blue">&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">title&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&lt;strong>    &lt;/strong>&lt;/span>&lt;strong>&lt;span style="background: white; color: #006400">&amp;lt;!-- WinJS references --&amp;gt;
    &lt;/span>&lt;span style="background: white; color: blue">&amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">link &lt;/span>&lt;span style="background: white; color: red">rel&lt;/span>&lt;span style="background: white; color: blue">=&amp;quot;stylesheet&amp;quot; &lt;/span>&lt;span style="background: white; color: red">href&lt;/span>&lt;/strong>&lt;strong>&lt;span style="background: white; color: blue">=&amp;quot;/winjs/css/ui-dark.css&amp;quot; /&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">script &lt;/span>&lt;span style="background: white; color: red">src&lt;/span>&lt;span style="background: white; color: blue">=&amp;quot;/winjs/js/base.js&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">script&lt;/span>&lt;/strong>&lt;strong>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">script &lt;/span>&lt;span style="background: white; color: red">src&lt;/span>&lt;span style="background: white; color: blue">=&amp;quot;/winjs/js/wwaapp.js&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">script&lt;/span>&lt;/strong>&lt;span style="background: white; color: blue">&lt;strong>&amp;gt;
&lt;/strong>    &lt;/span>&lt;span style="background: white; color: #006400">&amp;lt;!-- RssReader references --&amp;gt;
    &lt;/span>&lt;span style="background: white; color: blue">&amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">link &lt;/span>&lt;span style="background: white; color: red">rel&lt;/span>&lt;span style="background: white; color: blue">=&amp;quot;stylesheet&amp;quot; &lt;/span>&lt;span style="background: white; color: red">href&lt;/span>&lt;span style="background: white; color: blue">=&amp;quot;/css/default.css&amp;quot; /&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">script &lt;/span>&lt;span style="background: white; color: red">src&lt;/span>&lt;span style="background: white; color: blue">=&amp;quot;/js/default.js&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">script&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">head&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">body&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">body&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">html&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&lt;/span>&lt;/pre>

&lt;p>Updating the sample with some slightly more interesting HTML:&lt;/p>

&lt;pre class="code">&lt;span style="background: white; color: blue">&amp;lt;!&lt;/span>&lt;span style="background: white; color: maroon">DOCTYPE &lt;/span>&lt;span style="background: white; color: red">html&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">html&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
...&lt;br />&lt;/span>&lt;span style="background: white; color: blue">&amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">body&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&lt;strong>    &amp;lt;&lt;/strong>&lt;/span>&lt;strong>&lt;span style="background: white; color: maroon">h1&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&lt;/span>&lt;span style="background: white; color: black">The Old New Thing&lt;/span>&lt;span style="background: white; color: blue">&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">h1&lt;/span>&lt;/strong>&lt;strong>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">div &lt;/span>&lt;span style="background: white; color: red">id&lt;/span>&lt;span style="background: white; color: blue">=&amp;quot;downloadStatus&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">div&lt;/span>&lt;/strong>&lt;strong>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">div &lt;/span>&lt;span style="background: white; color: red">id&lt;/span>&lt;span style="background: white; color: blue">=&amp;quot;posts&amp;quot;&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">div&lt;/span>&lt;/strong>&lt;span style="background: white; color: blue">&lt;strong>&amp;gt;
&lt;/strong>&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">body&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">html&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&lt;/span>&lt;/pre>

&lt;p>Here we’re setting the header text of our app and creating two div elements as placeholders: one for the status of our RSS download and one for the data from the RSS when we get it. Also, let’s replace the contents of default.css with styles to match Chen’s blog:&lt;/p>

&lt;pre class="code">&lt;span style="background: white; color: maroon">body &lt;/span>&lt;span style="background: white; color: black">{
    &lt;/span>&lt;span style="background: white; color: red">background-color&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">#fff&lt;/span>&lt;span style="background: white; color: black">;
    &lt;/span>&lt;span style="background: white; color: red">color&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">#000&lt;/span>&lt;span style="background: white; color: black">;
    &lt;/span>&lt;span style="background: white; color: red">font-family&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">Verdana&lt;/span>&lt;span style="background: white; color: black">;
    &lt;/span>&lt;span style="background: white; color: red">padding&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">8pt&lt;/span>&lt;span style="background: white; color: black">;
}

&lt;/span>&lt;span style="background: white; color: maroon">a:link&lt;/span>&lt;span style="background: white; color: black">, &lt;/span>&lt;span style="background: white; color: maroon">a:visited&lt;/span>&lt;span style="background: white; color: black">, &lt;/span>&lt;span style="background: white; color: maroon">a:active &lt;/span>&lt;span style="background: white; color: black">{
    &lt;/span>&lt;span style="background: white; color: red">color&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">#700&lt;/span>&lt;span style="background: white; color: black">;
    &lt;/span>&lt;span style="background: white; color: red">font-weight&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">inherit&lt;/span>&lt;span style="background: white; color: black">;
}

&lt;/span>&lt;span style="background: white; color: maroon">h1 &lt;/span>&lt;span style="background: white; color: black">{
    &lt;/span>&lt;span style="background: white; color: red">text-transform&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">none&lt;/span>&lt;span style="background: white; color: black">;
    &lt;/span>&lt;span style="background: white; color: red">font-family&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">inherit&lt;/span>&lt;span style="background: white; color: black">;
    &lt;/span>&lt;span style="background: white; color: red">font-size&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">22pt&lt;/span>&lt;span style="background: white; color: black">;
}

&lt;/span>&lt;span style="background: white; color: maroon">#posts &lt;/span>&lt;span style="background: white; color: black">{
    &lt;/span>&lt;span style="background: white; color: red">width&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">99%&lt;/span>&lt;span style="background: white; color: black">;
    &lt;/span>&lt;span style="background: white; color: red">height&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">100%&lt;/span>&lt;span style="background: white; color: black">;
    &lt;/span>&lt;span style="background: white; color: red">overflow&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">auto&lt;/span>&lt;span style="background: white; color: black">;
}

&lt;/span>&lt;span style="background: white; color: maroon">.postTitle &lt;/span>&lt;span style="background: white; color: black">{
    &lt;/span>&lt;span style="background: white; color: red">color&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">#700&lt;/span>&lt;span style="background: white; color: black">;
    &lt;/span>&lt;span style="background: white; color: red">font-size&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">1.2em&lt;/span>&lt;span style="background: white; color: black">;
    &lt;/span>&lt;span style="background: white; color: red">font-weight&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">bold&lt;/span>&lt;span style="background: white; color: black">;
}

&lt;/span>&lt;span style="background: white; color: maroon">.postDate &lt;/span>&lt;span style="background: white; color: black">{
    &lt;/span>&lt;span style="background: white; color: red">color&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">#666&lt;/span>&lt;span style="background: white; color: black">;
    &lt;/span>&lt;span style="background: white; color: red">font-size&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">11pt&lt;/span>&lt;span style="background: white; color: black">;
}

&lt;/span>&lt;span style="background: white; color: maroon">.postContent &lt;/span>&lt;span style="background: white; color: black">{
    &lt;/span>&lt;span style="background: white; color: red">font-size&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">medium&lt;/span>&lt;span style="background: white; color: black">;
    &lt;/span>&lt;span style="background: white; color: red">line-height&lt;/span>&lt;span style="background: white; color: black">: &lt;/span>&lt;span style="background: white; color: blue">18px&lt;/span>&lt;span style="background: white; color: black">;
}&lt;/span>&lt;span style="background: white; color: black">
&lt;/span>&lt;/pre>

&lt;p>To support app lifetime, Win8 provides a set of app-level events. The generated default.js file subscribes to the app’s mainwindowactivated event and then starts the WinJS application:&lt;/p>

&lt;pre class="code">&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: blue">function &lt;/span>&lt;span style="background: white; color: teal">() {
  &lt;/span>&lt;span style="background: white; color: #a31515">'use strict'&lt;/span>&lt;span style="background: white; color: teal">;
  &lt;/span>&lt;span style="background: white; color: green">// Uncomment the following line to enable first chance exceptions.
  // Debug.enableFirstChanceException(true);

&lt;strong>  &lt;/strong>&lt;/span>&lt;strong>&lt;span style="background: white; color: black">WinJS&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">Application&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">onmainwindowactivated &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: blue">function &lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: black">e&lt;/span>&lt;/strong>&lt;span style="background: white; color: teal">&lt;strong>) {
&lt;/strong>    &lt;/span>&lt;span style="background: white; color: blue">if &lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: black">e&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">detail&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">kind &lt;/span>&lt;span style="background: white; color: teal">===&lt;br />        &lt;/span>&lt;span style="background: white; color: black">Windows&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">ApplicationModel&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">Activation&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">ActivationKind&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">launch&lt;/span>&lt;span style="background: white; color: teal">) {&lt;br />
&lt;/span>&lt;span style="background: white; color: teal">&lt;br />&lt;br />      &lt;/span>&lt;span style="background: white; color: green">// TODO: startup code here
    &lt;/span>&lt;span style="background: white; color: teal">}
&lt;strong>  }

  &lt;/strong>&lt;/span>&lt;strong>&lt;span style="background: white; color: black">WinJS&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">Application&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">start&lt;/span>&lt;/strong>&lt;span style="background: white; color: teal">&lt;strong>();
&lt;/strong>})();&lt;/span>&lt;/pre>

&lt;p>&lt;a>&lt;/a>

  &lt;pre class="code">&lt;/a>&lt;/pre>
&lt;/a>

  &lt;p>The contents of the generated default.js file are contained within a self-executing anonymous function declaration (that is a mouthful – it’s fun to use a language with key concepts missing).&lt;/p>

  &lt;p>By default, any function or variable defined outside of a function in your JavaScript files is global across your Metro/JS app. Variables and functions defined within a function are only visible within that function. The template uses this outer function declaration to help you follow good JavaScript design patterns, ensuring that your functions and variables do not pollute the global namespace.&lt;/p>

  &lt;p>After grabbing the Application object from the WinJS namespace, the code subscribes to the event fired after the application and its resources (like default.html) have been loaded. This is a good place to do initialization, as we’ll see.&lt;/p>

  &lt;p>For any of the application events to fire, you need to let the application know you’re ready to receive them, which is what the call to the start method does.&lt;/p>

  &lt;p>The mainwindowactivated event handler is the perfect place for us to kick off the download of the data from Chen’s blog.&lt;/p>

  &lt;h2>Async HTTP using WinJS.xhr&lt;/h2>

  &lt;p>The xhr function in the WinJS namespaces provides a series of options for downloading data in both text and XML formats using HTTP. The name of the xhr function stands for XMLHttpRequest, which is the name of the object that sparked the &lt;a href="http://en.wikipedia.org/wiki/Ajax_%28programming%29">AJAX&lt;/a>/&lt;a href="http://en.wikipedia.org/wiki/Web_2.0">Web 2.0&lt;/a> revolution around 2005 (although the object has been part of Internet Explorer since version 5.0 released in 1999). The xhr function provided with WinJS is a wrapper that takes a number of options, including which HTTP verb to use (GET by default), which HTTP headers to include (none by default) and which URL to retrieve data from:&lt;/p>

  &lt;pre class="code">&lt;span style="background: white; color: black">WinJS&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">Application&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">onmainwindowactivated &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: blue">function &lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: black">e&lt;/span>&lt;span style="background: white; color: teal">) {
  &lt;/span>&lt;span style="background: white; color: green">// start the download
  &lt;/span>&lt;span style="background: white; color: blue">var &lt;/span>&lt;span style="background: white; color: black">chen &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;http://blogs.msdn.com/b/oldnewthing/rss.aspx&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">;
  &lt;/span>&lt;span style="background: white; color: black">downloadStatus&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">innerText &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;downloading posts...&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">;
&lt;strong>  &lt;/strong>&lt;/span>&lt;strong>&lt;span style="background: white; color: black">WinJS&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">xhr&lt;/span>&lt;span style="background: white; color: teal">({ &lt;/span>&lt;span style="background: white; color: black">url&lt;/span>&lt;span style="background: white; color: teal">: &lt;/span>&lt;span style="background: white; color: black">chen &lt;/span>&lt;span style="background: white; color: teal">}).&lt;/span>&lt;span style="background: white; color: black">then&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: black">processPosts&lt;/span>&lt;span style="background: white; color: teal">, &lt;/span>&lt;span style="background: white; color: black">downloadError&lt;/span>&lt;/strong>&lt;span style="background: white; color: teal">&lt;strong>);
&lt;/strong>}
&lt;/span>&lt;/pre>

  &lt;p>Instead of providing the option to retrieve the data synchronously or asynchronously the way the XMLHttpRequest object does, xhr forces an asynchronous call so that the UI will not be blocked while data is retrieved. You’ll see this all over the Win8 programming model as reflected into Metro/JS and it helps you make more responsive programs. In our case, because we don’t know how long the request is going to take, we’re setting the text content of the downloadStatus div to indicate progress.&lt;/p>

  &lt;p>Asynchronous functions from WinJS return an object called a promise, which represents results to be provided at some time in the future. The promise object exposes the then method, which takes an optional three functions, one for success, one for failure and one for progress.&lt;/p>

  &lt;p>The call to the xhr function returns the promise immediately, at which point we set the functions to call in the case of success or failure, ignoring progress:&lt;/p>

  &lt;pre class="code">&lt;span style="background: white; color: blue">function &lt;/span>&lt;span style="background: white; color: black">processPosts&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: black">request&lt;/span>&lt;span style="background: white; color: teal">) {
  &lt;/span>&lt;span style="background: white; color: green">// clear the progress indicator
  &lt;/span>&lt;span style="background: white; color: black">downloadStatus&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">innerText &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">;

  &lt;/span>&lt;span style="background: white; color: green">// parse the RSS
  &lt;/span>&lt;span style="background: white; color: blue">var &lt;/span>&lt;span style="background: white; color: black">items &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: black">request&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">responseXML&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">selectNodes&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;//item&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">);
  &lt;/span>&lt;span style="background: white; color: blue">if &lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: black">items&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">length &lt;/span>&lt;span style="background: white; color: teal">== &lt;/span>&lt;span style="background: white; color: black">0&lt;/span>&lt;span style="background: white; color: teal">) {
    &lt;/span>&lt;span style="background: white; color: black">downloadStatus&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">innerText &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;error downloading posts&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">;
  }

  &lt;/span>&lt;span style="background: white; color: blue">for &lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: blue">var &lt;/span>&lt;span style="background: white; color: black">i &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: black">0&lt;/span>&lt;span style="background: white; color: teal">, &lt;/span>&lt;span style="background: white; color: black">len &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: black">items&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">length&lt;/span>&lt;span style="background: white; color: teal">; &lt;/span>&lt;span style="background: white; color: black">i &lt;/span>&lt;span style="background: white; color: teal">&amp;lt; &lt;/span>&lt;span style="background: white; color: black">len&lt;/span>&lt;span style="background: white; color: teal">; &lt;/span>&lt;span style="background: white; color: black">i&lt;/span>&lt;span style="background: white; color: teal">++) {
    &lt;/span>&lt;span style="background: white; color: blue">var &lt;/span>&lt;span style="background: white; color: black">item &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: black">items&lt;/span>&lt;span style="background: white; color: teal">[&lt;/span>&lt;span style="background: white; color: black">i&lt;/span>&lt;span style="background: white; color: teal">];

    &lt;/span>&lt;span style="background: white; color: green">// append data to #posts div
    &lt;/span>&lt;span style="background: white; color: blue">var &lt;/span>&lt;span style="background: white; color: black">parent &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: black">document&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">createElement&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;div&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">);
    &lt;/span>&lt;span style="background: white; color: black">appendDiv&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: black">parent&lt;/span>&lt;span style="background: white; color: teal">, &lt;/span>&lt;span style="background: white; color: black">item&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">selectNodes&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;title&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">)[&lt;/span>&lt;span style="background: white; color: black">0&lt;/span>&lt;span style="background: white; color: teal">].&lt;/span>&lt;span style="background: white; color: black">text&lt;/span>&lt;span style="background: white; color: teal">, &lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;postTitle&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">);
    &lt;/span>&lt;span style="background: white; color: black">appendDiv&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: black">parent&lt;/span>&lt;span style="background: white; color: teal">, &lt;/span>&lt;span style="background: white; color: black">item&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">selectNodes&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;pubDate&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">)[&lt;/span>&lt;span style="background: white; color: black">0&lt;/span>&lt;span style="background: white; color: teal">].&lt;/span>&lt;span style="background: white; color: black">text&lt;/span>&lt;span style="background: white; color: teal">, &lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;postDate&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">);
    &lt;/span>&lt;span style="background: white; color: black">appendDiv&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: black">parent&lt;/span>&lt;span style="background: white; color: teal">, &lt;/span>&lt;span style="background: white; color: black">item&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">selectNodes&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;description&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">)[&lt;/span>&lt;span style="background: white; color: black">0&lt;/span>&lt;span style="background: white; color: teal">].&lt;/span>&lt;span style="background: white; color: black">text&lt;/span>&lt;span style="background: white; color: teal">, &lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;postContent&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">);
    &lt;/span>&lt;span style="background: white; color: black">posts&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">appendChild&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: black">parent&lt;/span>&lt;span style="background: white; color: teal">);
  }
}

&lt;/span>&lt;span style="background: white; color: blue">function &lt;/span>&lt;span style="background: white; color: black">appendDiv&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: black">parent&lt;/span>&lt;span style="background: white; color: teal">, &lt;/span>&lt;span style="background: white; color: black">html&lt;/span>&lt;span style="background: white; color: teal">, &lt;/span>&lt;span style="background: white; color: black">className&lt;/span>&lt;span style="background: white; color: teal">) {
  &lt;/span>&lt;span style="background: white; color: blue">var &lt;/span>&lt;span style="background: white; color: black">div &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: black">document&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">createElement&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;div&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">);
  &lt;/span>&lt;span style="background: white; color: black">div&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">innerHTML &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: black">html&lt;/span>&lt;span style="background: white; color: teal">;
  &lt;/span>&lt;span style="background: white; color: black">div&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">className &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: black">className&lt;/span>&lt;span style="background: white; color: teal">;
  &lt;/span>&lt;span style="background: white; color: black">parent&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">appendChild&lt;/span>&lt;span style="background: white; color: teal">(&lt;/span>&lt;span style="background: white; color: black">div&lt;/span>&lt;span style="background: white; color: teal">);
}

&lt;/span>&lt;span style="background: white; color: blue">function &lt;/span>&lt;span style="background: white; color: black">downloadError&lt;/span>&lt;span style="background: white; color: teal">() {
  &lt;/span>&lt;span style="background: white; color: black">downloadStatus&lt;/span>&lt;span style="background: white; color: teal">.&lt;/span>&lt;span style="background: white; color: black">innerText &lt;/span>&lt;span style="background: white; color: teal">= &lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;error downloading posts&amp;quot;&lt;/span>&lt;span style="background: white; color: teal">;
}
&lt;/span>&lt;/pre>

  &lt;p>When the xhr call has completed successfully, the processPosts function is called with a request object which has all the information as if we’d use the XMLHttpRequest object directly. The property we care about is responseXML, which contains the RSS data we requested. From the RSS, we use an XPath expression to select the set of item nodes, extracting the title, pubDate and description data to be used to create a div element per item, with div elements for each of the pieces of data we’re showing, styled appropriately.&lt;/p>

  &lt;p>For readers of The Old New Thing, the output should look pretty darn familiar:&lt;/p>

  &lt;p>&lt;a href="/public/post-images/12713-122.jpeg">&lt;img style="display: inline" title="clip_image006" alt="clip_image006" src="/public/post-images/12713-123.jpeg" width="818" height="768" />&lt;/a>&lt;/p>

  &lt;p>At this point, you may worry about whether our use of the xhr function will actually work, since a page provided by a web server would fail. The reason this works is because Metro/JS apps run in a secure sandbox and are, by default, allowed the ability to make cross-domain HTTP requests even though web pages are not.&lt;/p>

  &lt;p>&lt;em>Actually, it’s not quite true that Metro apps are allowed access to the Internet by default – it’s just that Metro app project in VS11 are provided that access by default, as it’s such a common need.&lt;/em>&lt;/p>

  &lt;h2>Where Are We?&lt;/h2>

  &lt;p>&lt;font size="1">&lt;font size="3">At this point, we’ve built a working Metro/JS app that does a real thing using WinJS. In the next installment, we’ll look at how WinJS provides features to make DOM manipulation better.&lt;/font>&lt;/font>&lt;/p>

  &lt;p>&lt;font size="1">&lt;em>Portions Copyright © 2011 Microsoft Corporation. Reproduced with permission from Microsoft Corporation. All rights reserved.&lt;/em>&lt;/font>&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12712</id>
    <title>Metro style JS Apps in VS11 &amp; Blend</title>
    <updated>2012-01-04T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="/public/post-images/12712-105.png"/>
    <category term="telerik" label="Telerik"/>
    <category term="win8" label="Windows 8"/>
    <published>2012-01-04T08:00:00.000Z</published>
    <summary>DISCLAIMER: This post is targeted at the //build/ version of the Windows Developer Preview (aka Windows 8). Things are likely to change with future releases. On your head be it. In the previous post in this series, we discussed how to build a deploy a Metro style app built with JavaScript completely from the command line. That’s a useful exercise to prove that there’s no real magic, but I don’t expect most people to do things that way. I expect most people to use Visual Studio. Visual Studio 11 Microsoft Vi...</summary>
    <content type="html">&lt;h1>Metro style JS Apps in VS11 &amp; Blend&lt;/h1>
&lt;p>&lt;font color="#ff0000">DISCLAIMER: This post is targeted at &lt;/font>&lt;a href="http://buildwindows.com">&lt;font color="#ff0000">the //build/ version of the Windows Developer Preview&lt;/font>&lt;/a>&lt;font color="#ff0000"> (aka Windows 8). Things are likely to change with future releases. On your head be it.&lt;/font>&lt;/p>  &lt;p>In &lt;a href="/12711">the previous post in this series&lt;/a>, we discussed how to build a deploy a Metro style app built with JavaScript completely from the command line. That’s a useful exercise to prove that there’s no real magic, but I don’t expect most people to do things that way. I expect most people to use Visual Studio.&lt;/p>  &lt;h2>Visual Studio 11&lt;/h2>  &lt;p>Microsoft Visual Studio 11 Express for Windows Developer Preview (aka VS11) is the premiere tool for developing applications for Windows and has been for quite a while. It provides project management for keeping your application’s source files together, integrated build, deployment and launching support, HTML, CSS, JavaScript, graphics and Metro style app manifest editing, debugging and a whole lot more. Visual Studio 11 Express comes for free and includes everything you need to build, package and deploy your Metro style apps.&lt;/p>  &lt;p>Out of the box, VS11 provides several project templates to get you started:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12712-104.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12712-105.png" width="640" height="360" />&lt;/a>&lt;/p>  &lt;p>The most basic template is the Blank Application project template. Running it produces a project file (.wwaproj) along with nearly the same set of files we used to create the first sample project from the command line. The Blank project template also creates some additional files, which we’ll discuss presently.&lt;/p>  &lt;p>&lt;a href="/public/post-images/12712-106.jpeg">&lt;img style="display: inline" title="clip_image004" alt="clip_image004" src="/public/post-images/12712-107.jpeg" width="382" height="480" />&lt;/a>&lt;/p>  &lt;p>The format and the contents of the package.appxmanifest file is the same as the appxmanifest.xml file we’ve already seen, but the .appxmanifest extension allows the file to have a custom editor in VS11:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12712-108.jpeg">&lt;img style="display: inline" title="clip_image006" alt="clip_image006" src="/public/post-images/12712-109.jpeg" width="640" height="336" />&lt;/a>&lt;/p>  &lt;p>If you open the provided default.html, you’ll see it’s a nearly empty vessel, waiting to accept your creativity. The provided default.js (under the js folder) is similarly nearly empty, with just some skeleton code that we’ll discuss later.&lt;/p>  &lt;p>To debug your application, choose Debug | Start Debugging, which gives you the kinds of debugging tools an experienced Visual Studio user is used to:&lt;/p>  &lt;ul>   &lt;li>&lt;b>Debugger:&lt;/b> Set breakpoints, step and watch JavaScript data and behavior. &lt;/li>    &lt;li>&lt;b>JavaScript Console Window:&lt;/b> Interact with JavaScript objects at a command line. &lt;/li>    &lt;li>&lt;b>DOM Explorer Window:&lt;/b> Dig through the HTML Document Object Model and see styles by element. &lt;/li>    &lt;li>&lt;b>Call Stack:&lt;/b> See the current JavaScript call stack. &lt;/li> &lt;/ul>  &lt;p>In addition to debugging your application on the local machine (which is the default), you have two other options: remote machine and the simulator. You can change these options by choosing Project | Properties and selecting the debugger to launch:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12712-110.jpeg">&lt;img style="display: inline" title="clip_image008" alt="clip_image008" src="/public/post-images/12712-111.jpeg" width="640" height="270" />&lt;/a>&lt;/p>  &lt;p>The idea of remote machine debugging is that you can develop on a high-powered developer machine but debug on a more modest consumer-grade machine, like a tablet. This is handy to make sure your application works well on the type of machines you’re targeting.&lt;/p>  &lt;p>The simulator option, on the other hand, is meant to let you run another little machine on the machine you’re already running. The simulator is a remote access session that’s configured to allow you to simulate various resolutions, landscape and portrait rotations and touch, even if you’re not using a touch-capable device:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12712-114.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12712-115.png" width="640" height="381" />&lt;/a>&lt;/p>  &lt;p>And as that if that weren’t enough, Visual Studio is not the only tool you’ve got in the drawer. If you’d like a WYSIWYG design experience for the visual portion of your application, you’ve got Blend.&lt;/p>  &lt;h2>Expression Blend 5&lt;/h2>  &lt;p>Previous version of Blend focused on the XAML developer. Microsoft Expression Blend 5 Developer Preview (aka Blend), however, adds HTML support for building Metro style JS apps specifically. Blend comes with the following features for designing and building Metro/JS apps:&lt;/p>  &lt;ul>   &lt;li>&lt;b>Integration with Visual Studio:&lt;/b> You can load the same projects in both VS and Blend. In fact, you can load the project you’re currently working on in VS by right-clicking on a project in the Solution Explorer and choose Open in Expression Blend. &lt;/li>    &lt;li>&lt;b>Project Templates:&lt;/b> Blend and Visual Studio have the same set of project templates. &lt;/li>    &lt;li>&lt;b>WYSIWYG Design:&lt;/b> Each page of your application is laid out as you’d see it when the app is running because Blend is actually running your application to display it accurately as you edit. &lt;/li>    &lt;li>&lt;b>Interactive Design:&lt;/b> You can throw a switch in Blend to actually run your application interactively as you navigate page-to-page, then when you get to a page you’d like to design, you can flip the switch again and edit your application. Talk about a quick edit-test cycle! &lt;/li>    &lt;li>&lt;b>Tool Pallet:&lt;/b> The full set of controls and options are available from a tool pallet and property editor. &lt;/li>    &lt;li>&lt;b>Layout Simulator: &lt;/b>In the same way that VS provides a device simulator, Blend allows your application to be run and edited in one of several sizes and rotations. &lt;/li> &lt;/ul>  &lt;p>Here’s Blend in action on the “Hello” sample:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12712-116.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12712-117.png" width="640" height="282" />&lt;/a>&lt;/p>  &lt;p>Those of you familiar with Blend will notice many similarities between the XAML version and the HTML version.&lt;/p>  &lt;h2>Where Are We?&lt;/h2>  &lt;p>At this point, you have all you need to know to get started building Metro/JS apps using HTML5, CSS3, JavaScript, SVG, etc. (assuming you know HTML5, CSS3, JavaScript, SVG and et cetera). Next time, I’ll introduce the library built to bridge the two worlds of the WinRT and the web platform – WinJS.&lt;/p>  &lt;p>&lt;em>&lt;font size="1">Portions Copyright © 2011 Microsoft Corporation. Reproduced with permission from Microsoft Corporation. All rights reserved.&lt;/font>&lt;/em>&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12711</id>
    <title>Your First Metro style App in JavaScript</title>
    <updated>2012-01-02T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="/public/post-images/12711-93.png"/>
    <category term="telerik" label="Telerik"/>
    <category term="win8" label="Windows 8"/>
    <published>2012-01-02T08:00:00.000Z</published>
    <summary>DISCLAIMER: This post is targeted at the //build/ version of the Windows Developer Preview (aka Windows 8). Things are likely to change with future releases. On your head be it. A “Windows Metro style app” is an application built for the devices running the new Windows user experience of Windows 8. A Metro style app built using JavaScript is a first class Windows application built with the technologies of the web, e.g. HTML, CSS, JavaScript, JSON, SVG, etc. Unlike a web site, a Metro JS app is not deployed ...</summary>
    <content type="html">&lt;h1>Your First Metro style App in JavaScript&lt;/h1>
&lt;p>&lt;font color="#ff0000">DISCLAIMER: This post is targeted at &lt;a href="http://buildwindows.com">the //build/ version of the Windows Developer Preview&lt;/a> (aka Windows 8). Things are likely to change with future releases. On your head be it.&lt;/font>&lt;/p>  &lt;p>A “Windows Metro style app” is an application built for the devices running the new Windows user experience of Windows 8. A Metro style app built using JavaScript is a first class Windows application built with the technologies of the web, e.g. HTML, CSS, JavaScript, JSON, SVG, etc. Unlike a web site, a Metro JS app is not deployed page-by-page from a web server, but rather installed locally on the user’s machine. Like any other first class Windows app, a Metro JS app has access to the underlying platform and is able to share information with other apps.&lt;/p>  &lt;p>Like any web site, a Metro JS app starts with an HTML file:&lt;/p>  &lt;pre class="code">&lt;span style="background: white; color: blue">&amp;lt;!&lt;/span>&lt;span style="background: white; color: maroon">DOCTYPE &lt;/span>&lt;span style="background: white; color: red">html&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">html&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">head&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">title&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&lt;/span>&lt;span style="background: white; color: black">Hello, Win8&lt;/span>&lt;span style="background: white; color: blue">&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">title&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">head&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">body&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&amp;lt;&lt;/span>&lt;span style="background: white; color: maroon">h1&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&lt;/span>&lt;span style="background: white; color: black">Hello and welcome to Metro style Win8!&lt;/span>&lt;span style="background: white; color: blue">&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">h1&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">body&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&amp;lt;/&lt;/span>&lt;span style="background: white; color: maroon">html&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&lt;/span>&lt;/pre>

&lt;p>This HTML, if it were loaded in the web browser, would result in the world’s most boring web site. Also, surfing to a web page in the browser is not at all how your customers will execute a Metro style app. Instead, they’ll install it from the Windows Store and execute it from the Start Screen:&lt;/p>

&lt;p>&lt;a href="/public/post-images/12711-92.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12711-93.png" width="640" height="400" />&lt;/a>&lt;/p>

&lt;p>Further, a web page (or series of web pages, styles, code, resources, etc.) is not a Metro JS app. A Metro JS app includes these things, but also includes metadata and resources:&lt;/p>

&lt;ul>
  &lt;li>A &lt;b>manifest file &lt;/b>to describe your application, including the name, description, the start page, etc. &lt;/li>

  &lt;li>A set of large and small&lt;b> logo images&lt;/b> to be displayed by the shell. &lt;/li>

  &lt;li>A &lt;b>store logo&lt;/b> to be displayed by the Windows Store. &lt;/li>

  &lt;li>A &lt;b>splash screen&lt;/b> to show when your app starts. &lt;/li>
&lt;/ul>

&lt;p>The manifest file is an XML file called appxmanifest.xml and a minimal one looks like this:&lt;/p>

&lt;pre class="code">&lt;span style="background: white; color: blue">&amp;lt;?&lt;/span>&lt;span style="background: white; color: #a31515">xml &lt;/span>&lt;span style="background: white; color: red">version&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">1.0&lt;/span>&lt;span style="background: white; color: black">&amp;quot; &lt;/span>&lt;span style="background: white; color: red">encoding&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">utf-8&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">?&amp;gt;
&amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">Package &lt;/span>&lt;span style="background: white; color: red">xmlns&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">http://schemas.microsoft.com/appx/2010/manifest&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;

  &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">Identity
    &lt;/span>&lt;span style="background: white; color: red">Name&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">hello&lt;/span>&lt;span style="background: white; color: black">&amp;quot;
    &lt;/span>&lt;span style="background: white; color: red">Version&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">1.0.0.0&lt;/span>&lt;span style="background: white; color: black">&amp;quot;
    &lt;/span>&lt;span style="background: white; color: red">Publisher&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">CN=Microsoft Corporation, O=Microsoft Corporation,&lt;br />               L=Redmond, S=Washington, C=US&lt;/span>&lt;span style="background: white; color: black">&amp;quot; &lt;/span>&lt;span style="background: white; color: blue">/&amp;gt;

  &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">Properties&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">DisplayName&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&lt;/span>&lt;span style="background: white; color: black">Hello&lt;/span>&lt;span style="background: white; color: blue">&amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">DisplayName&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">Description&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&lt;/span>&lt;span style="background: white; color: black">Hello&lt;/span>&lt;span style="background: white; color: blue">&amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">Description&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">PublisherDisplayName&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&lt;/span>&lt;span style="background: white; color: black">csells&lt;/span>&lt;span style="background: white; color: blue">&amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">PublisherDisplayName&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">Logo&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&lt;/span>&lt;span style="background: white; color: black">images\storelogo.png&lt;/span>&lt;span style="background: white; color: blue">&amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">Logo&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
  &amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">Properties&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;

  &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">Prerequisites&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">OSMinVersion&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&lt;/span>&lt;span style="background: white; color: black">6.2&lt;/span>&lt;span style="background: white; color: blue">&amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">OSMinVersion&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">OSMaxVersionTested&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;&lt;/span>&lt;span style="background: white; color: black">6.2&lt;/span>&lt;span style="background: white; color: blue">&amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">OSMaxVersionTested&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
  &amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">Prerequisites&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;

  &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">Resources&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">Resource &lt;/span>&lt;span style="background: white; color: red">Language&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">en-US&lt;/span>&lt;span style="background: white; color: black">&amp;quot; &lt;/span>&lt;span style="background: white; color: blue">/&amp;gt;
  &amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">Resources&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;

  &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">Applications&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">Application 
      &lt;/span>&lt;span style="background: white; color: red">Id&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">hello.App&lt;/span>&lt;span style="background: white; color: black">&amp;quot;      
 &lt;strong>     &lt;/strong>&lt;/span>&lt;strong>&lt;span style="background: white; color: red">StartPage&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">default.html&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;/strong>&lt;span style="background: white; color: blue">&lt;strong>&amp;gt;
&lt;/strong>
      &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">VisualElements
        &lt;/span>&lt;span style="background: white; color: red">DisplayName&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">Hello&lt;/span>&lt;span style="background: white; color: black">&amp;quot;
        &lt;/span>&lt;span style="background: white; color: red">Logo&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">images\logo.png&lt;/span>&lt;span style="background: white; color: black">&amp;quot;
        &lt;/span>&lt;span style="background: white; color: red">SmallLogo&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">images\smalllogo.png&lt;/span>&lt;span style="background: white; color: black">&amp;quot;
        &lt;/span>&lt;span style="background: white; color: red">Description&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">Hello&lt;/span>&lt;span style="background: white; color: black">&amp;quot;
        &lt;/span>&lt;span style="background: white; color: red">ForegroundText&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">light&lt;/span>&lt;span style="background: white; color: black">&amp;quot;
        &lt;/span>&lt;span style="background: white; color: red">BackgroundColor&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">#0084FF&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;

        &amp;lt;&lt;/span>&lt;span style="background: white; color: #a31515">SplashScreen &lt;/span>&lt;span style="background: white; color: red">Image&lt;/span>&lt;span style="background: white; color: blue">=&lt;/span>&lt;span style="background: white; color: black">&amp;quot;&lt;/span>&lt;span style="background: white; color: blue">images\splashscreen.png&lt;/span>&lt;span style="background: white; color: black">&amp;quot; &lt;/span>&lt;span style="background: white; color: blue">/&amp;gt;

      &amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">VisualElements&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
    &amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">Application&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
  &amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">Applications&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;

&amp;lt;/&lt;/span>&lt;span style="background: white; color: #a31515">Package&lt;/span>&lt;span style="background: white; color: blue">&amp;gt;
&lt;/span>&lt;/pre>

&lt;p>The manifest has things in it like the name of the application, the description for the application, a reference to the images and, most importantly, the name of the HTML file that represents the app’s start page.&lt;/p>

&lt;p>With the manifest and supporting files in place, getting your super exciting app registered with the system is a matter of starting up PowerShell (which you can do from the Start Screen by typing “powershell”), and importing the “appx” module (Figure 1).&lt;/p>

&lt;p>&lt;a href="/public/post-images/12711-94.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12711-95.png" width="640" height="200" />&lt;/a>&lt;/p>

&lt;p>If you’re not familiar with it, &lt;a href="http://technet.microsoft.com/en-us/library/bb978526.aspx">Windows PowerShell&lt;/a> is the next-gen command line shell built into Windows. Out of the Win8 box, it comes with the “appx” module, which allows you to manage the modern applications installed on your computer:&lt;/p>

&lt;ul>
  &lt;li>&lt;b>Add-AppxPackage:&lt;/b> install an application so that it can be launched &lt;/li>

  &lt;li>&lt;b>Get-AppxPackage:&lt;/b> get a list of installed applications &lt;/li>

  &lt;li>&lt;b>Get-AppxPackageManifest:&lt;/b> get the manifest details of an installed application &lt;/li>

  &lt;li>&lt;strong>Get-AppxLastError: &lt;/strong>get the details for the last appx-related error &lt;/li>

  &lt;li>&lt;b>Remove-AppxPackage:&lt;/b> uninstall an application &lt;/li>
&lt;/ul>

&lt;p>The “appx” part of the command names come from the packaged form of a Metro style app, which is called an “appx” after the file extension. To create one, you can use the “MakeAppx.exe” command-line tool available via the Developer Command Prompt available on the Start Screen. The job of MakeAppx.exe is to package your application, manifest and all, into a single file with a “.appx” extension. An appx file is a file in &lt;a href="http://technet.microsoft.com/en-us/query/dd742818">the Open Packaging Conventions (OPC) format&lt;/a>, which essential means it’s a .zip file with a few extras. If you’re going to package and sign your application for submission into &lt;a href="http://blogs.msdn.com/b/windowsstore/archive/2011/12/06/announcing-the-new-windows-store.aspx">the Windows Store&lt;/a>, you may decide to use MakeAppx.exe and SignTool.exe as part of that process.&lt;/p>

&lt;p>However, &lt;a>to simply test an application on your developer box, Add-AppxPackage gives you all you need&lt;/a>:&lt;/p>

&lt;p>&lt;a href="/public/post-images/12711-96.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12711-97.png" width="640" height="242" />&lt;/a>&lt;/p>

&lt;p>In addition to taking a path to a .appx file, the Add-AppxPackage command allows you to pass in the path to a manifest file using the -Register option, which gives you the ability to install your application for testing without going through the extra step of packaging:&lt;/p>

&lt;p>&lt;a href="/public/post-images/12711-102.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12711-103.png" width="640" height="230" />&lt;/a>&lt;/p>

&lt;p>You can double-check that your application has been installed using the Get-AppxPackage command.&lt;/p>

&lt;p>Once your application has been installed, you can see it in the shell:&lt;/p>

&lt;p>&lt;a href="/public/post-images/12711-100.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12711-101.png" width="640" height="151" />&lt;/a>&lt;/p>

&lt;p>Launching it will you show the inspirational “Hello” message displayed full-screen without any Windows chrome.&lt;/p>

&lt;h2>Where Are We?&lt;/h2>

&lt;p>After seeing what files and tools used to build and install a Metro style app, you’re probably already hoping for a tool to help you create, edit, package, launch and debug. For that, we’ve got Microsoft Visual Studio 11 Express for the Windows Developer Preview (aka VS11), which we’ll talk about &lt;a href="/12712">next time&lt;/a>.&lt;/p>

&lt;p>&lt;em>&lt;font size="1">Portions Copyright © 2011 Microsoft Corporation. Reproduced with permission from Microsoft Corporation. All rights reserved.&lt;/font>&lt;/em>&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12710</id>
    <title>GUI REPL for Roslyn</title>
    <updated>2011-12-27T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="/public/post-images/12710-87.png"/>
    <category term="spout" label="The Spout"/>
    <category term="tools" label="Tools"/>
    <published>2011-12-27T08:00:00.000Z</published>
    <summary>If you recall from REPL for the Rosyln CTP 10/2011, I’ve been playing around building a little C# REPL app using Roslyn. That version was built as a Console application, but I’ve refactored and rebuilt it as a WPF application: You can download the source code for both the Console and the WPF versions here: RoslynRepl Sample Download The benefit of a real GUI app is that output selection makes a lot more sense and that you could imagine real data visualization into data controls instead of just into strings....</summary>
    <content type="html">&lt;h1>GUI REPL for Roslyn&lt;/h1>
&lt;p>If you recall from &lt;a href="/12704">REPL for the Rosyln CTP 10/2011&lt;/a>, I’ve been playing around building a little C# REPL app using Roslyn. That version was built as a Console application, but I’ve refactored and rebuilt it as a WPF application:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12710-86.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12710-87.png" width="640" height="476" />&lt;/a>&lt;/p>  &lt;p>You can download the source code for both the Console and the WPF versions here:&lt;/p>  &lt;p>&lt;a href="/public/samples/RoslynRepl.zip">RoslynRepl Sample Download&lt;/a>&lt;/p>  &lt;p>The benefit of a real GUI app is that output selection makes a lot more sense and that you could imagine real data visualization into data controls instead of just into strings. However, implementing a REPL shell in a GUI environment requires doing things considerably differently than in a Console app. Besides the stupid things I did, like doing a lot of Console.Write, and things that don’t make sense, like #exit or #prompt, there are a few interesting things that I did with this code, including handling partial submissions, rethinking history and rewiring Console.Write (just ‘cuz it’s stupid when I do it doesn’t mean that it shouldn’t work).&lt;/p>  &lt;h2>Partial Submissions&lt;/h2>  &lt;p>In this REPL, I decided that Enter means “execute” or “newline” depending on whether the submission is complete enough, according to Roslyn, to execute or not. If it is, I execute it, produce the output and move focus to either the next or a new submission TextBox. If the submission isn’t yet complete, e.g. &amp;quot;void SayHi() {&amp;quot;, then I just put in a newline. Further, I do some work to work properly with selections, i.e. if you press Enter when there’s a selection, the selection will be replaced with the Enter key.&lt;/p>  &lt;p>So far I like this model a lot, since I don’t have to something like separate “execute” and “newline” into Enter and Alt+Enter or some such.&lt;/p>  &lt;h2>Rethinking History&lt;/h2>  &lt;p>In a GUI shell with partial submissions and multi-line editing, the arrows are important editing keys, so can’t be used for access to previous lines in history. Further, a GUI apps makes it very easy to simply scroll to the command that you want via the mouse or Shift+Tab, so there’s not a lot of use for Alt+Arrow keys. Pressing Enter again replaces the old output (or error) with new output (or error):&lt;/p>  &lt;p>&lt;a href="/public/post-images/12710-88.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12710-89.png" width="240" height="226" />&lt;/a>&lt;a href="/public/post-images/12710-90.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12710-91.png" width="240" height="226" />&lt;/a>&lt;/p>  &lt;p>Currently when you re-execute a command from history, the command stays where it is in the history sequence, but it could as easily move to the end. I haven’t yet decided which I like better.&lt;/p>  &lt;h2>Redirecting Console.Write&lt;/h2>  &lt;p>Since this is a REPL environment works and acts like a shell, I expect that Console.Write (and it’s cousins like Console.WriteLine) to work. However, to make that work, I need to redirect standard output:&lt;/p>  &lt;pre class="code">&lt;span style="color: #2b91af">Console&lt;/span>.SetOut(&lt;span style="color: blue">new &lt;/span>&lt;span style="color: #2b91af">ReplHostTextWriter&lt;/span>(host));&lt;/pre>


&lt;p>The ReplTextWriterClass simply forwards the text onto the host:&lt;/p>

&lt;pre class="code">&lt;span style="color: blue">class &lt;/span>&lt;span style="color: #2b91af">ReplHostTextWriter &lt;/span>: &lt;span style="color: #2b91af">TextWriter &lt;/span>{
  &lt;span style="color: blue">readonly &lt;/span>&lt;span style="color: #2b91af">IReplHost &lt;/span>host;&lt;br />
&lt;br />  &lt;span style="color: blue">public &lt;/span>ReplHostTextWriter(&lt;span style="color: #2b91af">IReplHost &lt;/span>host) {
    &lt;span style="color: blue">this&lt;/span>.host = host;
  }

  &lt;span style="color: blue">public override void &lt;/span>Write(&lt;span style="color: blue">char &lt;/span>value) {
    host.Write(value.ToString());
  }

  &lt;span style="color: blue">public override &lt;/span>&lt;span style="color: #2b91af">Encoding &lt;/span>Encoding {
    &lt;span style="color: blue">get &lt;/span>{ &lt;span style="color: blue">return &lt;/span>&lt;span style="color: #2b91af">Encoding&lt;/span>.Default; }
  }
}&lt;/pre>


&lt;p>The hosts implementation of IReplHost.Write simply forwards it onto the currently executing submission (the ReplSubmissionControl represents both a submission’s input and output bundled together). You’ll notice that the TextWriter takes each character one at a time. It would be nice to do some buffering for efficiency, but you’d also like the output to appear as its produced, so I opted out of buffering.&lt;/p>

&lt;p>However, one thing I don’t like is the extra newline at the end of most string output. I want the main window to decide how things are output, setting margins and the newline looks like a wacky margin, so the trailing CR/LF had to go. That’s an interesting algorithm to implement, however, since the characters come in one at a time and not line-by-line. I want separating newlines to appear, just not trailing newlines. I implement this policy with the TrimmedStringBuilder class:&lt;/p>

&lt;pre class="code">&lt;span style="color: green">// Output a stream of strings with \r\n pairs potentially spread across strings,
// trimming the trailing \r and \r\n to avoid the output containing the extra spacing.
&lt;/span>&lt;span style="color: blue">class &lt;/span>&lt;span style="color: #2b91af">TrimmedStringBuilder &lt;/span>{
  &lt;span style="color: blue">readonly &lt;/span>&lt;span style="color: #2b91af">StringBuilder &lt;/span>sb;

  &lt;span style="color: blue">public &lt;/span>TrimmedStringBuilder(&lt;span style="color: blue">string &lt;/span>s = &lt;span style="color: #a31515">&amp;quot;&amp;quot;&lt;/span>) {
    sb = &lt;span style="color: blue">new &lt;/span>&lt;span style="color: #2b91af">StringBuilder&lt;/span>(s);
  }

  &lt;span style="color: blue">public void &lt;/span>Clear() {
    sb.Clear();
  }

  &lt;span style="color: blue">public void &lt;/span>Append(&lt;span style="color: blue">string &lt;/span>s) {
    sb.Append(s);
  }

  &lt;span style="color: blue">public override string &lt;/span>ToString() {
    &lt;span style="color: blue">int &lt;/span>len = sb.Length;

    &lt;span style="color: blue">if &lt;/span>(len &amp;gt;= 1 &amp;amp;&amp;amp; sb[len - 1] == &lt;span style="color: #a31515">'\r'&lt;/span>) {
      len -= 1;
    }
    &lt;span style="color: blue">else if &lt;/span>(len &amp;gt;= 2 &amp;amp;&amp;amp; sb[len - 2] == &lt;span style="color: #a31515">'\r' &lt;/span>&amp;amp;&amp;amp; sb[len - 1] == &lt;span style="color: #a31515">'\n'&lt;/span>) {
      len -= 2;
    }

    &lt;span style="color: blue">return &lt;/span>sb.ToString(0, len);
  }
}&lt;/pre>


&lt;p>Usage inside the ReplSubmissionControl.Write method is like so:&lt;/p>

&lt;pre class="code">&lt;span style="color: blue">public partial class &lt;/span>&lt;span style="color: #2b91af">ReplSubmissionControl &lt;/span>: &lt;span style="color: #2b91af">UserControl &lt;/span>{&lt;br />  ...&lt;br />&lt;pre class="code">&lt;strong>  &lt;span style="color: #2b91af">TrimmedStringBuilder &lt;/span>trimmedOutput = &lt;span style="color: blue">new &lt;/span>&lt;span style="color: #2b91af">TrimmedStringBuilder&lt;/span>();
&lt;/strong>
  &lt;span style="color: blue">public void &lt;/span>Write(&lt;span style="color: blue">string &lt;/span>s) {
&lt;strong>    &lt;span style="color: blue">if &lt;/span>(s == &lt;span style="color: blue">null&lt;/span>) { trimmedOutput.Clear(); }
    &lt;span style="color: blue">else &lt;/span>{ trimmedOutput.Append(s); }
&lt;/strong>
    consoleContainer.Content = GetTextControl(&lt;strong>trimmedOutput.ToString()&lt;/strong>);
  }
}
&lt;/pre>&lt;/pre>


&lt;p>Now, as the input comes in one character at a time, the trailing newlines are removed but separating newlines are kept. Also, you may be interested to know that the GetTextControl function builds a new read-only TextBox control on the fly to host the string content. This is so that the text can be selected, which isn’t possible when you set the content directly.&lt;/p>

&lt;p>Right now, there’s no support for Console.Read, since I don’t really know how I want that to happen yet. Pop-up a dialog box? Something else?&lt;/p>

&lt;h2>Completions, Syntax Highlighting and Auto-indent&lt;/h2>

&lt;p>I was a few hundred lines into implementing completions using Roslyn with the help of the Roslyn team when I realized two things:&lt;/p>

&lt;ol>
  &lt;li>Implementing completions to mimic the VS editor is hard.&lt;/li>

  &lt;li>Completions aren’t enough – I really want an entire C# editor with completions, syntax highlighting and auto-indentation.&lt;/li>
&lt;/ol>

&lt;p>Maybe a future release of Roslyn will fix one or both of these issues, but for now, both are out of scope for my little REPL project.&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12709</id>
    <title>Moving to the Cloud Part 2: Mostly Sunny</title>
    <updated>2011-12-27T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/jpg" href="http://cache.comcorpusa.com/465/348/crop/nbc33tv/media/weather/weather_video_image.jpg"/>
    <category term="spout" label="The Spout"/>
    <published>2011-12-27T08:00:00.000Z</published>
    <summary>In part 1 of this now multi-part series (who knew?), I discussed my initial attempts at moving my digital life into the cloud, including files, music, photos, notes, task lists, mail, contacts, calendar and PC games.There were some issues, however, and some things that I forgot, so we have part 2. Before we get to that, however, it’s interesting (for me, at least) to think about why it’s important to be able to move things into the cloud. Lots of vendors are busy making this possible, but why? There are bac...</summary>
    <content type="html">&lt;h1>Moving to the Cloud Part 2: Mostly Sunny&lt;/h1>
&lt;p>&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="http://cache.comcorpusa.com/465/348/crop/nbc33tv/media/weather/weather_video_image.jpg" width="240" height="180" />In &lt;a href="/12707">part 1&lt;/a> of this now multi-part series (who knew?), I discussed my initial attempts at moving my digital life into the cloud, including files, music, photos, notes, task lists, mail, contacts, calendar and PC games.There were some issues, however, and some things that I forgot, so we have part 2.&lt;/p>  &lt;p>Before we get to that, however, it’s interesting (for me, at least) to think about why it’s important to be able to move things into the cloud. Lots of vendors are busy making this possible, but why? There are backup reasons, of course, so that a fire or other natural disaster doesn’t wipe out all of the family pictures. There are also the ease of sharing, since email makes a very poor file sharing system. Also, multi-device access is certainly useful, since the world has moved into a heterogeneous OS world again as smartphones and tablets take their place at the table with PCs.&lt;/p>  &lt;p>&lt;strong>For me, however, moving my data into the cloud is about freedom.&lt;/strong>&lt;/p>  &lt;p>The cloud enables me to get myself bootstrapped with data associated with my personal or business life, using whatever device or OS I feel like using that day. It provides me freedom of location or vendor.&lt;/p>  &lt;p>The cloud is still forming, however, so hasn’t really been able to make this a seamless experience, which is why I’m onto part 2 of this series.&lt;/p>  &lt;h2>&lt;a href="http://microsoft.com/office365/">&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="http://www.microsoft.com/global/en-us/office365/PublishingImages/logo-office-365.png" />&lt;/a>Mail, Contacts and Calendar&lt;/h2>  &lt;p>Hotmail is a fine system for online access to mail, contacts and calendar that integrates well with Windows Phone 7. However, the integration with desktop Outlook and my custom domain isn’t good enough yet to rely on. The primary problem was the Hotmail Outlook Connector, which isn’t ready yet for prime time. It worked great with calendar and contacts, but fell down badly when it came to large email folders that I moved from my PST file. It never showed the sync’ing progress as complete, which made me uncomfortable that it never actually completed sync’ing and therefore my data wasn’t safe. Also, when I sent an email from Hotmail, either via the web or via Outlook, it showed the reply address as hotmail_44fe54cff788bdde@live.com. I assume the latter would’ve been fixed with &lt;a href="https://domains.live.com/manage/default.aspx">Windows Live custom domains&lt;/a>, but the former was the real deal-killer for me.&lt;/p>  &lt;p>Also, I heard that Google Apps is the way to go, but that also requires some special software to enable sync’ing with desktop Outlook – I wanted something that was native to both Outlook 2010 and Windows Phone 7. Further, it cost money, so if I was going to pay, I wanted something that Microsoft was going to integrate well with.&lt;/p>  &lt;p>So, I bit the bullet and hooked myself with the latest in hosted Exchange – &lt;a href="http://microsoft.com/office365/">Microsoft Office 365&lt;/a>. That’s what I’m using now and just like the on-premise Exchange that worked great for me as a Microsoft employee, I’ve been very happy with it. However, because of the way I was using it, it was a pain to configure properly for use in hosting my csells@sellsbrothers.com email.&lt;/p>  &lt;p>The easy way to configure Office 365 is to let it be the DNS name manager, which lets it manage everything for you, including your web site (via SharePoint), your mail, your Lync settings and any future service they care to tack on. However, that doesn’t work for me, since I didn’t want to move my 16-year-old web site into SharePoint (duh). Instead, I wanted to leave my DNS name manager at &lt;a href="http://securewebs.com">securewebs.com&lt;/a>, which has been a fabulous web hosting ISP for me.&lt;/p>  &lt;p>A slightly harder way to &lt;a href="http://onlinehelp.microsoft.com/en-us/office365-enterprises/ff637610.aspx">configure Office 365 for use with your domain&lt;/a> is to only be used for selective services, e.g. set the MX record for mail, but don’t mess with the CNAME record for your web site. This would’ve been nice, too, except I don’t want to move all of the email accounts on sellsbrothers.com – only csells. Why? Well, that’s a family matter.&lt;/p>  &lt;p>Over the years at family gatherings, to seem geek cool, I’ve offered free email boxes to my relatives. “Oh? You’re moving to another ISP again? Why don’t you move your email to sellsbrothers.com and then you can keep the same email address forever! And the best part is that it’s free!”&lt;/p>  &lt;p>Now, of course, I’d recommend folks get an email address on hotmail or gmail, but this all started before the email storage wars back when you needed an actual invitation to set up a gmail.com account. Now I’ve got half a dozen family members with “permanent” and “free” email boxes and I don’t want to a) move them, b) charge them or c) pay for them myself on Office 365.&lt;/p>  &lt;p>As cheap as you might think I am, it’s really migration that I worry most about – having successfully gotten them set up on their phones and PCs with their current email host, I don’t want to do that again for Outlook or migrate their email. Maybe it’s easy, maybe it’s hard. We’ll never know ‘cuz I’m not doing it!&lt;/p>  &lt;p>So now, I have to make csells@sellsbrothers.com sync with Office 365 and leave everyone else alone. This is the hardest way to use Office 365 and involved the following:&lt;/p>  &lt;ul>   &lt;li>&lt;strong>Set up a custom domain &lt;/strong>in Office 365: sellsbrothers.onmicrosoft.com &lt;/li>    &lt;li>&lt;strong>Add myself as a user&lt;/strong>: &lt;a href="mailto:csells@sellsbrothers.onmicrosoft.com">csells@sellsbrothers.onmicrosoft.com&lt;/a>&lt;/li>    &lt;li>Verify that I own sellsbrothers.com by asking securewebs.com support to add a DNS TXT record as specified by Office 365 (this took two weeks and a dozen emails)&lt;/li>    &lt;li>&lt;strong>Make csells@sellsbrothers.com the primary email &lt;/strong>on that account&lt;/li>    &lt;li>&lt;strong>Make csells@sellsbrothers.com the From address &lt;/strong>by removing csells@sellsbrothers.onmicrosoft.com and adding it back again&lt;/li>    &lt;li>&lt;strong>Configure my ISP email (&lt;/strong>&lt;a href="http://www.smartertools.com/smartermail/mail-server-software.aspx">&lt;strong>SmarterMail&lt;/strong>&lt;/a>&lt;strong>) to forward csells@sellsbrothers.com email &lt;/strong>to csells@sellsbrothers.onmicrosoft.com (I’m not also deleting the email on my ISP account yet when it forwards, but eventually I plan to)&lt;/li>    &lt;li>Login to my Outlook Web Access account on &lt;a href="http://mail.office365.com">http://mail.office365.com&lt;/a>&lt;/li>    &lt;li>&lt;strong>Find my Outlook host name &lt;/strong>via Help | About | Host name (ch1prd0502.outlook.com) for use as my Outlook server on my Windows Phone 7 (along with my From email address: csells@sellsbrothers.com)&lt;/li>    &lt;li>&lt;strong>Stumbling onto the right technical forum post &lt;/strong>to figure out how to configure desktop Outlook 2010 using advanced settings:&lt;/li>    &lt;ul>     &lt;li>&lt;strong>Server: &lt;/strong>ch1prd0502.&lt;strong>mailbox.&lt;/strong>outlook.com (my host name with “mailbox” thrown in)&lt;/li>      &lt;li>&lt;strong>User name: &lt;/strong>&lt;a href="mailto:csells@sellsbrothers.com">csells@sellsbrothers.com&lt;/a> (my From address)&lt;/li>      &lt;li>&lt;strong>Exchange Proxy Server: &lt;/strong>ch1prd0502.outlook.com (my Host name again)&lt;/li>      &lt;li>Check both checkboxes to &lt;strong>use HTTP first before TCP/IP&lt;/strong>&lt;/li>      &lt;li>Authentication: &lt;strong>Basic Authentication&lt;/strong>&lt;/li>   &lt;/ul> &lt;/ul>  &lt;p>Obviously, this is a crappy configuration experience, but no amount of manual updates to Outlook provided by the Office 365 site seemed to help. It was nice that the WP7 Outlook was much easier, although I’d really loved to have just told desktop Outlook that I was an Office 365 user and had it figure out all the touchy config settings.&lt;/p>  &lt;p>Everything seems solid except one minor annoyance: when I do a Reply All, csells@sellsbrothers.com stays in the list because my mail programs don’t know that my csells@sellsbrothers.com and csells@sellsbrothers.onmicrosoft.com email addresses are logically the same. I assume if I was hosting my MX records at Office 365, this problem, along with the crappy config experience, would go away.&lt;/p>  &lt;p>The good news is that I’ve got access to my full range of Mail, Contacts and Calendar from the web, my phone and my desktop, including multi-GB email folders I’ve copied over from my PST file, all for $6/month. Had I to do it over again, I’d have long ago moved my family to hotmail and avoided the config nightmare. I may yet do just that.&lt;/p>  &lt;h2>&lt;a href="http://www.boxcryptor.com/">&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="http://www.boxcryptor.com/images/logo.png" />&lt;/a>Encrypted Files&lt;/h2>  &lt;p>With my mail et al sorted, my next fix from last time was the lack of confidence in my most sensitive files with Dropbox. Dropbox can be hacked or subpoenaed like anyone else, so I want a client-side encryption solution. Dropbox may someday provide this themselves, but currently they gain a great deal of storage savings by detecting duplicate blocks amongst their users, saving significantly on uploads and storage, which client-side encryption disrupts. In the meantime, I really want an app that encrypts on the client and drops my data into Dropbox, which &lt;a href="http://www.boxcryptor.com/">BoxCryptor&lt;/a> does nicely.&lt;/p>  &lt;p>In addition to supporting Windows, BoxCryptor also supports MacOS, iOS and Android, although not WP7 yet. Further, it’s free for 2GB and only a $40 one-time fee for unlimited data, so it’s cheap, too.&lt;/p>  &lt;p>I also looked at &lt;a href="http://getsecretsync.com/ss/">SecretSync&lt;/a>, which has a similar cross-platform story and pricing model (although it’s $40/year instead of $40/once), but it requires Java and I don’t put that on my box. For an open source solution, you may be interested in &lt;a href="http://www.truecrypt.org/">TrueCrypt&lt;/a>.&lt;/p>  &lt;h2>&lt;a href="/public/post-images/12709-84.png">&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" title="image" alt="image" align="right" src="/public/post-images/12709-85.png" width="240" height="101" />&lt;/a>Financial Data&lt;/h2>  &lt;p>I’m a &lt;a href="http://mint.com">mint.com&lt;/a> user. I like the idea of an all-up look at my finances across 29 online financial accounts. However, as a backup of that data, I wrote a mint.com scraping tool that downloads the CSV transactions export file and digs current snapshot data out of the homepage HTML. The format on the web site is constantly changing of course, so it’s a support problem, but having that data even a little messed up over time is way better than not having it at all, so I’m happy. The data itself goes into &lt;a href="/12691">CSV files that I can query with LINQPad&lt;/a> and that are stored in my Dropbox folder, which keeps them sync’d.&lt;/p>  &lt;h2>&lt;a href="http://kindle.amazon.com">&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="https://images-na.ssl-images-amazon.com/images/G/01/reading/images/logo_kindle2._V167628491_.png" />&lt;/a>Books and Bookmarks&lt;/h2>  &lt;p>I can’t believe I missed this last time, but one of the big things I keep in the in the cloud is &lt;a href="http://kindle.amazon.com">my set of Amazon Kindle books&lt;/a>. I think that the proprietary format and DRM of Kindle materials will eventually open up because of competition, but until then, Amazon has been a great steward of my online books and bookmarks, providing me clients for all new platforms as well as their own e-ink-based hardware. I have an extensive book collection (&lt;a href="/12506">this is just part of it&lt;/a>), but am adding to the physical part of it no more.&lt;/p>  &lt;p>Further, in the case that I have the “what the hell was that book I used to have?” moment after I finally truck all of my books off to &lt;a href="http://www.powells.com/sell/">Powell’s&lt;/a>, the Brothers Sells have scanned all of the ISBN numbers from &lt;a href="http://www.librarything.com/catalog/csells">my 500+ books into LibraryThing&lt;/a>. I won’t have the books anymore, but at least I’ll be able to browse, refresh my memory and add the books to Kindle on demand. The reason I picked LibraryThing is because it was easy to get all of the book metadata from just an ISBN (so it’s easy to spot data entry errors early), it’s easy to export from in a CSV file and, should I decide, easy to user their API.&lt;/p>  &lt;h2>App Specifics&lt;/h2>  &lt;p>In addition to the big categories, several apps keep data important to me:&lt;/p>  &lt;ul>   &lt;li>&lt;a href="http://twitter.com">Twitter&lt;/a> keeps &lt;strong>Twitter users I’m following and searches&lt;/strong>&lt;/li>    &lt;li>&lt;a href="http://facebook.com">Facebook&lt;/a> keeps &lt;strong>Facebook contacts&lt;/strong>, which is nice because they can maintain their own contact data for me and I don’t have to be constantly out of data with my copy&lt;/li>    &lt;li>&lt;a href="http://explore.live.com/messenger?os=other">Windows Live Messenger&lt;/a> keeps my &lt;strong>IM contacts&lt;/strong> for me, although Facebook has largely replaced that for IM chatting&lt;/li>    &lt;li>As of the latest update, &lt;strong>Xbox game state&lt;/strong> in the cloud for me, although I’m not a big enough gamer that I really need it anywhere else except my home console. I assume in the future, MS will also keep the Xbox games I’ve purchased in the cloud as well&lt;/li>    &lt;li>&lt;a href="http://hulu.com">Hulu&lt;/a> keeps a list of several &lt;strong>TV shows I like &lt;/strong>and notifies me when new episodes are available&lt;/li>    &lt;li>&lt;a href="http://netflix.com">Netflix&lt;/a> keeps a partial &lt;strong>list of movies I’d like to see&lt;/strong>, but unfortunately not all of them&lt;/li>    &lt;li>I keep &lt;strong>my blog posts &lt;/strong>in an instance of SQL Server maintained on securewebs.com, which I assume they backup regularly. Someday I’ll write the script to pull that data out into my Dropbox just in case. The source code for the site itself is already stored in Dropbox, so I’m set there&lt;/li>    &lt;li>&lt;strong>Favorites&lt;/strong>: I don’t have a good app here, but I’d love it if some app could keep my IE favorites sync’d between my phone and my other computers. Suggestions?&lt;/li> &lt;/ul>  &lt;h2>Things Left On The Ground&lt;/h2>  &lt;p>As you may have surmised, I don’t put a lot of sentimental value in physical things. They’re not nearly as important to me as people, experiences or data. However, there are some things that I’d want to rescue in case of disaster given the chance:&lt;/p>  &lt;ul>   &lt;li>A few &lt;strong>wrist watches &lt;/strong>that reminds me of a special person or event&lt;/li>    &lt;li>An inscribed copy of &lt;a href="http://www.amazon.com/Complete-Sherlock-Holmes-Novels-Stories/dp/0553328255">&lt;strong>The Complete Sherlock Holmes&lt;/strong>&lt;/a> that my grandfather, my father and I have all read&lt;/li>    &lt;li>Inscribed copies of &lt;a href="http://www.amazon.com/Hobbit-J-R-R-Tolkien/dp/0618968636/">&lt;strong>The Hobbit&lt;/strong>&lt;/a>&lt;strong> and &lt;/strong>&lt;a href="http://www.amazon.com/Lord-Rings-50th-Anniversary-Vol/dp/0618640150/">&lt;strong>The Lord of the Rings trilogy&lt;/strong>&lt;/a> that my mother read to me as a child&lt;/li>    &lt;li>A leather bound copy of &lt;a href="http://www.amazon.com/Batman-Dark-Knight-Returns-Anniversary/dp/B001TMX97E/">&lt;strong>Batman: The Dark Knight Returns&lt;/strong>&lt;/a> because Frank Miller kicks ass&lt;/li>    &lt;li>Two pieces of &lt;strong>marble and maple furniture that my grandfather built &lt;/strong>to withstand the onslaught from my mother barreling through each room at top speed as a child (I’d have liked to see the first collision of the immovable object and the irresistible force that day!)&lt;/li> &lt;/ul>  &lt;p>As hard as I try, I can’t think of anything else. Should &lt;a href="http://www.imdb.com/title/tt0088847/">I have to jam&lt;/a>, my plan is to place these few items into safe keeping and sell, donate and/or toss the rest.&lt;/p>  &lt;h2>Where Are We?&lt;/h2>  &lt;p>As I write this, I’m sitting in a Starbucks in &lt;a href="http://www.ci.sandy.or.us/">Sandy, OR&lt;/a>, 20 minutes from a cabin I’m renting for a few days. When I’m done here, I’ll explore the town, see &lt;a href="http://www.imdb.com/title/tt0983193/">a movie&lt;/a> and make myself some dinner. I won’t worry about my phone, my laptop or my home being lost or destroyed, since 98% of the possessions I deem most valuable are being managed by cloud vendors I trust.&lt;/p>  &lt;p>&lt;strong>The cloud doesn’t just represent a place to backup or store data – it represents a way of life.&lt;/strong>&lt;/p>  &lt;p>My data stores a lifetime of experiences, people and knowledge. By keeping it safe and available no matter where I go, I gain the freedom to wander, to experience new physical places and new hardware and software solutions, all without being unduly burdened.&lt;/p>  &lt;p>Creative work requires a comfortable place to labor filled with the tools and the materials the worker needs to be creative. Today my tools are an Apple MacBook, Windows 7, Office 2010, Visual Studio 2010 and a Samsung Focus. Yesterday those tools were different and I’m sure they’ll be different again tomorrow. However, while other people build up their place with comfortable things around them – a bookshelf for reference, a comfy chair, knick-knack reminders of events or trips – my place is a lifetime of data and anywhere that provides access to electrons and bits.&lt;/p>  &lt;p>Having my data safe, secure and available makes me feel comfortable, creative and free.&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12708</id>
    <title>Sells Manor: Running 64-bit Win8 on My MacBook Air</title>
    <updated>2011-12-16T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/jpg" href="http://cdn.sitetrail.com/wp-content/uploads/2011/08/Apple-and-Microsoft.jpg"/>
    <category term="spout" label="The Spout"/>
    <published>2011-12-16T08:00:00.000Z</published>
    <summary>With the exception of //build/, I haven’t really been a public part of the Microsoft developer community for about a year. So, to make up for some lost time, I’m giving a talk about some of the //build/ bits at the Portland Area.NET User Group first thing in the new year. This means that I need a running installation of the Windows 8 Developer Preview on my new laptop, ‘cuz THE MAN took my old laptop back when I handed in my badge (although, to be fair, they paid for it in the first place : ). My constraint...</summary>
    <content type="html">&lt;h1>Sells Manor: Running 64-bit Win8 on My MacBook Air&lt;/h1>
&lt;p>&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="http://cdn.sitetrail.com/wp-content/uploads/2011/08/Apple-and-Microsoft.jpg" width="240" height="202" />With the exception of &lt;a href="http://channel9.msdn.com/events/BUILD/BUILD2011/BPS-1006">//build/&lt;/a>, I haven’t really been a public part of the Microsoft developer community for about a year. So, to make up for some lost time, I’m giving a talk about some of the //build/ bits at &lt;a href="http://www.padnug.org/">the Portland Area .NET User Group&lt;/a> first thing in the new year. This means that I need a running installation of the Windows 8 Developer Preview on my new laptop, ‘cuz &lt;a href="http://microsoft.com">THE MAN&lt;/a> took my old laptop back when I handed in my badge (although, to be fair, they paid for it in the first place : ).&lt;/p>  &lt;p>My constraints were as follows:&lt;/p>  &lt;ul>   &lt;li>&lt;strong>I really like &lt;/strong>&lt;a href="http://www.hanselman.com/blog/LessVirtualMoreMachineWindows7AndTheMagicOfBootToVHD.aspx">&lt;strong>boot-to-VHD&lt;/strong>&lt;/a>&lt;strong>. &lt;/strong>I find that any other kind of virtualization technology slows an OS down enough that it negatively affects any talk I would give. &lt;/li>    &lt;li>&lt;strong>I have an existing VHD &lt;/strong>I wanted to reuse with Win8 and VS11 installed and running just fine already. &lt;/li>    &lt;li>&lt;strong>I am running it on a MacBook Air. &lt;/strong>It’s the big one with quad-core i7, 4GB of RAM and 256GB of SSD, so it’s got the muscle but it needs to drivers to make everything work properly. &lt;/li>    &lt;li>&lt;strong>I’m running Windows 7 on my MacBook. &lt;/strong>The wonderful Boot Camp Assistant in MacOS makes it a snap to get Win7 up and running on a MacBook, but making it run with Win7 &lt;em>and &lt;/em>Win8 is a special challenge. &lt;/li> &lt;/ul>  &lt;p>So, with all of that in mind, of course I started with &lt;a href="http://www.hanselman.com/blog/GuideToInstallingAndBootingWindows8DeveloperPreviewOffAVHDVirtualHardDisk.aspx">Hanselman’s Guide to Installing and Booting Windows 8 Developer Preview off a VHD&lt;/a> post. If you’re willing to build a new VHD, that’s the way to go. However, I was able to use the techniques I learned from that post, especially the comment section and a couple tips from my friend &lt;a href="http://www.mcwtech.com/blogs/brianr/">Brian Randall&lt;/a> to make my existing Win8 VHD work. Some of this may work for you even if you don’t have a MacBook Air.&lt;/p>  &lt;h2>Getting Windows 7 Running on my MacBook Air&lt;/h2>  &lt;p>I started with a virginal MacBook and used the built in Boot Camp to create a Win7 partition, point to a Win7 Ultimate ISO I have on a network share for just these kinds of emergencies and get it installed and running. It wasn’t seamless, but &lt;a href="http://tinyurl.com/7cx5dfk">Bing was helpful here to straighten out the curves&lt;/a>.&lt;/p>  &lt;h2>Replacing the Boot Manager&lt;/h2>  &lt;p>The way I like to create VHDs is via Windows Server 2008 and Hyper-V. Once I have the VHD, I drop it onto the &lt;strong>c:\vhd &lt;/strong>folder on my computer, do a little bcdedit magic and boom: when I reboot, I’ve got a new entry from which to choose my OS of the moment.&lt;/p>  &lt;p>However, Win8 doesn’t boot from the Win7 boot manager, so the first thing I needed to do (as implied by the comments in &lt;a href="http://www.hanselman.com/blog/GuideToInstallingAndBootingWindows8DeveloperPreviewOffAVHDVirtualHardDisk.aspx">Scott’s post&lt;/a>) was use &lt;strong>bcdboot &lt;/strong>to replace the Win7 book manager with the Win8 boot manager. To do that, boot into Win7 and fire up the Disk Management tool (Start | Run: diskmgmt.msc). Select your BOOTCAMP drive and choose Action | Attach VHD. Choose the path to your VHD and you’ll get another virtual disk:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12708-75.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12708-76.png" width="640" height="460" />&lt;/a>&lt;/p>  &lt;p>In my case, C was my Win7 Boot Camp HD and F was my Win8 VHD. Now, start an elevated command prompt and use &lt;strong>bcdboot&lt;/strong> to replace the Win7 boot manager with the Win8 book manager.&lt;/p>  &lt;p>&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/FreeingupDiskSpaceunderWindowsVist_11C3B/works-on-my-machine-starburst_3.png" />&lt;/p>  &lt;p>&lt;font color="#ff0000">&lt;/font>&lt;/p>  &lt;p>&lt;font color="#ff0000">DISCLAIMER: I’m stealing the “works on my machine” graphic from Hanselman’s site because this action replaces a shipping, maintained, supported boot manager with one that is still in “developer preview” mode. Make sure you have your computer backed up before you do this. I am a trained professional. Do not attempt this at home. All stunts performed on a closed course. Some assembly required. Void where prohibited. I’m just sayin’.&lt;/font>&lt;/p>  &lt;p>&lt;a href="/public/post-images/12708-77.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12708-78.png" width="640" height="277" />&lt;/a>&lt;/p>  &lt;p>Now that you’ve got the right boot manager in place, getting Win8 to boot requires bcdedit.&lt;/p>  &lt;h2>Getting Windows 8 to Boot&lt;/h2>  &lt;p>&lt;a href="http://www.hanselman.com/blog/LessVirtualMoreMachineWindows7AndTheMagicOfBootToVHD.aspx">Scott’s post on booting to VHD&lt;/a> involves bcdedit, which describes adding a new boot option in the “Setting up your Windows Boot Menu to boot to an Existing VHD” section:&lt;/p>  &lt;p>&lt;a href="http://www.hanselman.com/blog/LessVirtualMoreMachineWindows7AndTheMagicOfBootToVHD.aspx">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12708-79.png" width="640" height="318" />&lt;/a>&lt;/p>  &lt;p>Use bcdedit to point to the Win8 VHD.&lt;/p>  &lt;h2>Logging into Windows 8 on a MacBook&lt;/h2>  &lt;p>Now when you boot your MacBook, you’ll choose to boot to your Windows partition as you always have (which should just happen automatically), but then the Win8 book manager will kick in and you choose your Windows 7 install or your new Windows 8 install. Booting into Windows 8 shows you the login screen as normal, but now you have another problem.&lt;/p>  &lt;p>The MacBook keyboard comes without a Windows Delete button. Oh sure, it’s labeled “delete” in trendy lowercase letters, but it’s really the equivalent of the Windows Backspace button. And that’s a problem, because you need to press Ctrl+Alt+Del to log into Win8.&lt;/p>  &lt;p>Of course, Apple thought of that, so they created the Boot Camp drivers for Windows that maps fn+delete to Delete, but you can only install them after you’ve logged in.&lt;/p>  &lt;p>So how do you log into a MacBook without a Delete button? Easy. You attach an external USB keyboard, press that three-fingered salute and login as normal.&lt;/p>  &lt;p>Once you’re in that first time, you can install the Boot Camp drivers and never have to use the external keyboard again.&lt;/p>  &lt;h2>Installing the Boot Camp Drivers on Win8&lt;/h2>  &lt;p>When I created the Boot Camp USB to install Win7, it came with a set of drivers in the WindowsSupport folder with a wonderful setup.exe that makes Windows run great on the MacBook. Unfortunately, when you try to run it, you get a message that says you can’t:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12708-80.png">&lt;img style="display: inline" title="Untitled" alt="Untitled" src="/public/post-images/12708-81.png" width="640" height="315" />&lt;/a>&lt;/p>  &lt;p>If you &lt;a href="http://tinyurl.com/cte4pe6">search the internet&lt;/a>, you can find folks that have gotten past this by tricking setup.exe into thinking it’s running on Win7, but you’ll also find that those tricks don’t seem to work for 64-bit installs on MacBook Air, i.e. the one I was doing. However, this is where Brian had another suggestion: you can edit the Boot Camp MSI itself.&lt;/p>  &lt;p>&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="http://www.hanselman.com/blog/content/binary/WindowsLiveWriter/FreeingupDiskSpaceunderWindowsVist_11C3B/works-on-my-machine-starburst_3.png" />&lt;font color="#ff0000">DISCLAIMER: T&lt;/font>&lt;font color="#ff0000">his is something that I made work surprising well on my own personal MacBook Air, but I provide no guarantee that it won’t cause your computer to burst into flames on an international flight causing your body to be lost at sea. These techniques are not supported by Microsoft, Apple or &lt;/font>&lt;a href="http://ada.org">&lt;font color="#ff0000">the American Dental Association&lt;/font>&lt;/a>&lt;font color="#ff0000">. You’ve been warned.&lt;/font>&lt;/p>  &lt;p>You may wonder, “To what MSI is Mr. Sells referring?” And I answer: &lt;strong>WindowsSupport\Drivers\Apple\&lt;strong>BootCamp64.msi&lt;/strong>&lt;/strong>. This is the 64-bit MSI with the check in it for Windows 7. To make it work for Windows 8, you need to edit the MSI and change the version number. And to do that, the easiest tool I know of is the unsupported, discontinued Orca MSI editor from Microsoft, &lt;a href="http://www.technipages.com/download-orca-msi-editor.html">now hosted on technipages.com&lt;/a>. Running Orca allows you to edit &lt;strong>BootCamp64.msi &lt;/strong>and change the Windows version part of the &lt;strong>LaunchCondition &lt;/strong>from 601 (Windows 7) to 602 (Windows 8):&lt;/p>  &lt;p>&lt;a href="/public/post-images/12708-82.png">&lt;img style="display: inline" title="orca" alt="orca" src="/public/post-images/12708-83.png" width="640" height="265" />&lt;/a>&lt;/p>  &lt;p>Once you’ve changed this version, &lt;strong>WindowsSupport\setup.exe &lt;/strong>seems to run just fine, installing the keyboard entries that allow you to login and the control panel that allows you to customize everything.&lt;/p>  &lt;h2>Where Are We?&lt;/h2>  &lt;p>Starting from a Boot Camp installation of Windows 7 on my MacBook Air, I showed you how I was able to get Windows 8 booting from a VHD. It wasn’t pretty and it required tips from all over the internet. I gather them here today so that future anthropologists will know how hard we worked to enable the coming of our robotic overlords. If you’re able to use these instructions to expedite their arrival, I’m sure they’ll take that into consideration when they’re sorting us into work details.&lt;/p>  &lt;p>P.S. This post is dedicated to &lt;a href="http://en.wikipedia.org/wiki/Jerry_Pournelle">Jerry Pournelle&lt;/a>. I used to pour over his Byte magazine column every month like he was the computer Sherlock Holmes.&lt;/p>  </content>
  </entry>
  <entry>
    <id>http://localhost:8080/12707</id>
    <title>Moving My Data To The Cloud: Stormy Weather</title>
    <updated>2011-12-14T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/jpg" href="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/There-is-only-one-Cloud-Icon-in-the-Enti_137BD/bbc_weather_bacon_c_60217c70-b9cc-4e76-8b28-2cda0ead26ee.jpg"/>
    <category term="spout" label="The Spout"/>
    <category term="tools" label="Tools"/>
    <category term="data" label="Data"/>
    <published>2011-12-14T08:00:00.000Z</published>
    <summary>For years, I’ve maintained a single “main” computer. It was the computer that was the central authority of all of the personal data I’d accumulated over the years and from which it made me uncomfortable to be separated. Because I needed a single computer for everything, it had to work on my couch, on a plane, on a desk and everywhere else I ever needed to go. Also, it couldn’t have a giant monitor or multiple monitors, because it had to go everywhere. All of this was because I needed all of my data with me ...</summary>
    <content type="html">&lt;h1>Moving My Data To The Cloud: Stormy Weather&lt;/h1>
&lt;p>&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="http://www.hanselman.com/blog/content/binary/Windows-Live-Writer/There-is-only-one-Cloud-Icon-in-the-Enti_137BD/bbc_weather_bacon_c_60217c70-b9cc-4e76-8b28-2cda0ead26ee.jpg" width="240" height="191" />&lt;/p>  &lt;p>For years, I’ve maintained a single “main” computer. It was the computer that was the central authority of all of the personal data I’d accumulated over the years and from which it made me uncomfortable to be separated. Because I needed a single computer for everything, it had to work on my couch, on a plane, on a desk and everywhere else I ever needed to go. Also, it couldn’t have a giant monitor or multiple monitors, because it had to go everywhere. All of this was because I needed all of my data with me all of the time.&lt;/p>  &lt;p>My process for moving to a new computer used to include a lot of manual copying of files from the old D hard drive (D is for Data) to my new hard drive, which was also carefully partitioned into C for Windows, Office, Visual Studio, etc. and D for a lifetime of books and articles, coding projects and utilities I’ve collected over the years, e.g. LinqPad, Reflector, WinMerge, etc. This is 30GB of stuff I wanted access to at all times. I was also backing up via Windows Home Server, keeping photos and music on the WHS box (another 30GB), then backing that up to the cloud via KeepVault. And finally, as I upgraded HDs to go bigger or go to solid state, I kept each old HD around as another redundant backup.&lt;/p>  &lt;p>All of that gave me some confidence that I was actually keeping my data safe right up until my Windows Home Server crashed the system HD and I found out that the redundancy of WHS doesn’t quite work the way you’d like (this was before I installed KeepVault). This was a first generation HP Home Server box and when it went down, I took it apart so I could attach a monitor, keyboard and mouse to diagnose it, pulled the HDs out so I could read what files I could and ultimately had to drop it off in Redmond with the WHS team so I could get it up and running again.&lt;/p>  &lt;p>&lt;strong>There are some files I never got back.&lt;/strong>&lt;/p>  &lt;p>KeepVault gave me back some of the confidence I’d had before WHS crashed, but they didn’t provide me a way to see what files they were backing up, so I didn’t have the transparency I wanted to be confident. Further, they don’t have clients on every kind of platform like Dropbox does.&lt;/p>  &lt;p>Of course, simply sync’ing files isn’t enough – sync’ing my 10GB Outlook PST file every time I got a new email was not a good way to share 20 years of contacts, email and calendar items.&lt;/p>  &lt;p>The trick is to sync each kind of data in the right way, be confident that it’s safe and have access to it across the various platforms I use: Windows, Windows Phone 7, iOS and possibly Android (you know, if I feel like walking on the wild side!). And since I’m currently under employed (my new gig doesn’t start till the new year), I figured I’d do it once and do it right. I almost got there.&lt;/p>  &lt;h2>&lt;a href="http://dropbox.com">&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="https://www.dropbox.com/static/20756/images/logo.png" />&lt;/a>Files&lt;/h2>  &lt;p>Let’s start easy: files. &lt;a href="http://dropbox.com">Dropbox&lt;/a> has made this a no-brainer. You install the software on any platform you care to use, drop everything you want into the folder and it just works, keeping files in sync on the cloud and across platforms, giving you adequate (although not great) status as it does so. Most platforms are supported natively, but even on platforms that aren’t, there are often alternative clients, e.g. I’m using &lt;a href="http://www.windowsphone.com/en-US/apps/798cf9d9-6efd-df11-9264-00237de2db9e">Boxfiles for Windows Phone 7&lt;/a>. When I gave up my Microsoft laptop, instead of doing the dance of the copy fairy to my new Mac Book Air, I installed Dropbox on both computers, dropped everything I want backed up and sync’d between computers into the Dropbox folder. 36 hours and 30GB later, all of it was copied into the cloud and onto my new laptop, at which point I reformatted my Microsoft laptop and handed it into my boss.&lt;/p>  &lt;p>Further, as a replacement for WHS and KeepVault, I now keep all of the files that I was keeping just on my WHS server – photos and music primarily – into Dropbox.&lt;/p>  &lt;p>&lt;a href="/public/post-images/12707-67.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12707-68.png" width="640" height="361" />&lt;/a>&lt;/p>  &lt;p>This keeps me the confidence I need to know that my files are safe and backed up to the cloud, while making it very easy to keep it backed up locally by simply running Dropbox on more than one computer at my house. If at any time, I don’t want those files on any one computer, I tell Dropbox to stop sync’ing those folders, delete the local cache and I’m all done.&lt;/p>  &lt;p>There are two tricks that I used to really make Dropbox sing for me. The first is to change my life: I no longer partition my HDs into C and D. The reason I’d always done that was so that I could repave my C with a fresh Windows, Office and VS install every six months w/o having to recopy all my data. Windows 7 makes this largely unnecessary anyway (&lt;a href="http://en.wikipedia.org/wiki/Bit_rot">bit rot&lt;/a> is way down on Win7), but now it doesn’t matter – I can blow any computer away at will now, knowing that Dropbox has my back. In fact, Dropbox is my new D drive, but it’s better than that because it’s dynamic. The C drive is my one pool of space instead of having to guess ahead of time how to split the space between C and D.&lt;/p>  &lt;p>The other thing I did was embrace my previous life: I wanted to keep D:\ at my fingertips as my logical “Data” drive. Luckily, Windows provides the “subst” command to do just that. Further, ntwind software provides &lt;a href="http://www.ntwind.com/software/utilities/visual-subst.html">the fabulous VSubst utility&lt;/a> to do the mapping and keep it between reboots:&lt;/p>  &lt;p>&lt;a href="/public/post-images/12707-69.png">&lt;img style="display: inline" title="image" alt="image" src="/public/post-images/12707-70.png" width="616" height="480" />&lt;/a>&lt;/p>  &lt;p>Now, I’ve got all the convenience of a dedicated “data” drive backed up to the cloud and sync’d between computers. Because I needed 60GB to start, I’m paying $200/year to Dropbox for their 100GB plan. This is more expensive than I’d like, but worth it to me for the data I’m storing.&lt;/p>  &lt;p>There is a hitch in this story, however. Right now on Dropbox, data and metadata is available to Dropbox employees and therefore to anyone that hacks Dropbox (like the government). I don’t like that and for my very most sensitive data, I keep it off of Dropbox. When Dropbox employees themselves aren’t able to read Dropbox data or metadata, then I’ll move the sensitive data there, too.&lt;/p>  &lt;h2>&lt;a href="http://dropbox.com">&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="https://www.dropbox.com/static/20756/images/logo.png" />&lt;/a>Music&lt;/h2>  &lt;p>I’m not actually very happy with how I’m storing music. I can play all my music on any PC, but I can only play it one song at a time on my WP7 because there’s no Dropbox music client. I could use &lt;a href="https://www.amazon.com/clouddrive/learnmore">the Amazon cloud drive&lt;/a> that provides unlimited music storage for $20/year, but there’s no WP7 client for that, either. Or I could spend $100/year on Amazon and get my 100GB of storage, but their client isn’t as widely available as Dropbox. Ironically, Dropbox is using Amazon as their backend, so hopefully increased pressure in this space will drop Dropbox’s prices over time.&lt;/p>  &lt;h2>&lt;/h2>  &lt;h2>&lt;a href="http://dropbox.com">&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="https://www.dropbox.com/static/20756/images/logo.png" />&lt;/a>Photos&lt;/h2>  &lt;p>I’m not using Facebook or Flicr for my photos simply because I’m lazy. It’s very easy to copy a bunch of files into Dropbox and have the sync’ing just happen. I don’t want to futz with the Facebook and Flickr web interfaces for 15GB worth of photos. Right now, this is the digital equivalent of a shoebox full of 8x10s, but at least I’ve got it all if the house burns down.&lt;/p>  &lt;h2>&lt;a href="http://www.microsoft.com/office/onenote/">&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" title="image" alt="image" align="right" src="/public/post-images/12707-71.png" width="240" height="61" />&lt;/a>Notes and Tasklist&lt;/h2>  &lt;p>For general, freeform notes, I moved away from Evernote when they took the search hotkey away on the Windows client (no Ctrl+F? really?) and went to &lt;a href="http://www.microsoft.com/office/onenote/">OneNote&lt;/a>. The web client sucks, but it’s better than nothing and the Windows and WP7 clients rock. I have a few notes pinned to my WP7 home screen that I use for groceries, tasks, etc., and I have all of my favorite recipes in there, too, along with my relatives’ wi-fi passwords that they don’t remember themselves, a recording of my son snoring, etc. It’s a fabulous way to keep track of random data across platforms.&lt;/p>  &lt;p>On the task list side, I only sorta use OneNote for that. I also send myself emails and write little TODO.txt files every time I get a little bee in my bonnet. I’ve never found that the Exchange tasks sync well enough between platforms to invest in them. Maybe someday.&lt;/p>  &lt;h2>&lt;a href="http://hotmail.com">&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" title="image" alt="image" align="right" src="/public/post-images/12707-72.png" width="240" height="66" />&lt;/a>Mail, Contacts and Calendar&lt;/h2>  &lt;p>And speaking of Exchange, that’s a piece of software that Microsoft spoiled me on thoroughly. This is sync that works very well for contacts, emails and calendar items. IMAP does email folders, but server implementations are spotty. For years, I used Exchange for my personal contacts and calendar, only keeping my personal email separate in a giant PST file, pulling it down via POP3. This can sorta be made to work, but what I really wanted was hosted Exchange.&lt;/p>  &lt;p>However, what I found cost between $5 and $11 a month per user. I’d probably have gone with Office 365 for sellsbrothers.com mail, even at $5/month except for two reasons. The first is that Microsoft requires you to move your entire DNS record to them, not just the MX record, which means there is all kinds of hassle getting sellsbrothers.com working again. They do this so that they can get all of the DNS records working easily for Lync, Sharepoint, etc., but I don’t want those things, so it’s just a &lt;a href="http://www.urbandictionary.com/define.php?term=PITA">PITA&lt;/a> for me. If they change this, I’d probably move except for the other problem: I’m not the only user on sellsbrothers.com.&lt;/p>  &lt;p>For years to be the big shot at family gatherings, I’ve been offering up permanent, free email addresses on my domain. That’s all well and good, but now to maintain my geek cred, I need to keep my mom, my step-mom, my brother, my sons, etc., in an email server that works and one that they don’t have to pay for. So, while I was willing to pay $5/month for hosted exchange for me, I wasn’t willing to pay it for my relatives, too!&lt;/p>  &lt;p>One option I tried was asking &lt;a href="http://securewebs.com">securewebs.com&lt;/a> (my rocking ISP!) to upgrade to SmarterMail 8.x, but that didn’t work. I even footed the one-time fee of $200 for the ActiveSync support for SmarterMail, but I couldn’t make that sync from Outlook on the desktop or the phone either.&lt;/p>  &lt;p>Eventually I made an imperfect solution work: &lt;a href="http://hotmail.com">Hotmail&lt;/a>. The nice thing about Hotmail is that it’s free for 25GB (yay webmail storage wars!) and it syncs contacts, mail and calendar items just like I want. Further, with some effort (vague error messages are not useful!), I was able to get Hotmail to pull in my personal email. And, after installing &lt;a href="http://office.microsoft.com/en-us/outlook-help/microsoft-office-outlook-hotmail-connector-overview-HA010222518.aspx">the Outlook Hotmail Connector&lt;/a> (explicitly necessary because my Windows Live ID is not a @live.com or an @hotmail.com email address), I was able to sync almost everything, including the folders I copied from my giant PST file, via hotmail to both my desktop and phone Outlook. However, there are a few downsides:&lt;/p>  &lt;ul>   &lt;li>There is an intrinsic &lt;strong>delay between when someone sends me an email and when it syncs to any device &lt;/strong>because Hotmail is polling via POP3. This polling is annoying and sometimes sends me directly to the web mail frontend where I can interact with my personal email directly.&lt;/li>    &lt;li>The Outlook Hotmail Connector &lt;strong>sync’ing progress indication is terrible &lt;/strong>in that it seems to stack every time I press F9 (a bad habit from years of POP3 usage) and I can’t tell what it’s working or or when it will finish. Because of this, I’ve trimmed the set of email folders I sync to the ones I really use, using the PST file as an archive for days gone by.&lt;/li>    &lt;li>Hotmail does the right thing with the “Reply To”, but sometimes &lt;strong>weird @hotmail addresses with random characters shows up in email threads&lt;/strong>, which breaks &lt;a href="http://en.wikipedia.org/wiki/Fourth_wall">the fourth wall&lt;/a>. That’s annoying.&lt;/li>    &lt;li>&lt;strong>My RSS Folders don’t sync &lt;/strong>to my phone, which is a shame because I really loved having my Hacker News folder pinned to my WP7 home page letting me know where there were new items. None of the RSS readers on WP7 seem to work as well as a simple pinned email folder.&lt;/li> &lt;/ul>  &lt;p>The good news is that this all works for free and my relatives continue to have working email. The bad news is that it doesn’t work nearly as well as the Exchange server I’m used to. Hopefully I will be able to revisit this in the future and get it working correctly.&lt;/p>  &lt;h2>&lt;a href="http://store.steampowered.com/">&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" title="image" alt="image" align="right" src="/public/post-images/12707-73.png" width="235" height="72" />&lt;/a>PC Games&lt;/h2>  &lt;p>I purchase all of my games via &lt;a href="http://store.steampowered.com/">Steam&lt;/a> now and install them as the mood strikes me. I love being able to reinstall Half-Life 2 or Portal on demand, then blow it away again when I need the hard drive space. Steam is the only viable app store for Windows right now, although I am looking forward to have &lt;a href="http://blogs.msdn.com/b/windowsstore/archive/2011/12/06/announcing-the-new-windows-store.aspx">the Microsoft app store in Windows 8&lt;/a>.&lt;/p>  &lt;h2>&lt;a href="http://msdn.microsoft.com/en-us/subscriptions/">&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" title="image" alt="image" align="right" src="/public/post-images/12707-74.png" width="240" height="52" />&lt;/a>Backups&lt;/h2>  &lt;p>I no longer maintain “backups” in the sense that I can slap in a new HD, boot from a USB stick and have my computer restored in 30 minutes or less (that never worked between WHS and Dell laptops anyway). I’ve had HD problems, of course, but they’re so rare that I no longer care about that scenario. Instead, what I do is keep all of the software that I normally install on a file server (the new job of my WHS box). If the file server goes down, then most of the software I install, i.e. Windows 7, Office and Visual Studio, is available for download via an MSDN Subscription. The rest is easily available from the internet (including &lt;a href="http://www.telerik.com/developer-productivity-tools.aspx">Telerik tools and controls&lt;/a>!) and I just install it as I need it.&lt;/p>  &lt;h2>&lt;/h2>      &lt;h2>&lt;img style="margin: 0px 0px 5px 5px; display: inline; float: right" align="right" src="http://images1.vat19.com/beardo/beardo-hat-stroke.jpg" width="240" height="160" />Where Are We?&lt;/h2>  &lt;p>In order to free myself from any specific PC, I needed to pick a new centralized authority for my data: the cloud. The experience I was after for my PCs was the same one I already have on my phone – if I lose it, I can easily buy a new one, install the apps on demand and connect to the data I already had in Exchange, Hotmail, Skydrive, etc. Now that I’ve moved the rest of my world to Dropbox, I can treat my PCs and tablets like phones, i.e. easily replaceable. It’s not a perfect experience yet, but it’s leaps and bounds ahead of where it was even a few years ago.&lt;/p>  &lt;p>Hardware and software comes and goes; data is forever.&lt;/p>  </content>
  </entry>
</feed>