<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://csells.github.io/sb6/feed.atom</id>
  <title>Marquee de Sells</title>
  <updated>2019-08-04T07:00:00.000Z</updated>
  <link rel="first" href="https://csells.github.io/sb6/feed.atom"/>
  <link rel="last" href="https://csells.github.io/sb6/subfeeds/feed178.atom"/>
  <link rel="next" href="https://csells.github.io/sb6/subfeeds/feed2.atom"/>
  <link rel="self" href="https://csells.github.io/sb6/feed.atom"/>
  <author>
    <name>Chris Sells</name>
    <uri>https://csells.github.io/sb6/</uri>
    <email>csells@sellsbrothers.com</email>
  </author>
  <category term=".net" label=".NET"/>
  <category term="book" label="Books"/>
  <category term="books" label="Books"/>
  <category term="colophon" label="Colophon"/>
  <category term="conference" label="Conference"/>
  <category term="data" label="Data"/>
  <category term="fun" label="Fun"/>
  <category term="interview" label="Interviewing"/>
  <category term="money" label="Money"/>
  <category term="oslofeaturedcontent" label="Oslo"/>
  <category term="osloeditorial" label="Oslo"/>
  <category term="oslo" label="Oslo"/>
  <category term="telerik" label="Telerik"/>
  <category term="spout" label="The Spout"/>
  <category term="tools" label="Tools"/>
  <category term="win8" label="Windows 8"/>
  <category term="writing" label="Writing"/>
  <icon>https://csells.github.io/sb6//public/favicon.ico</icon>
  <logo>https://csells.github.io/sb6//public/images/vikingme128x128.jpg</logo>
  <subtitle>Chris's insight outlet</subtitle>
  <entry>
    <id>https://csells.github.io/sb6/fun-with-curl-and-dart</id>
    <title>Fun with Curl and Dart</title>
    <updated>2019-08-04T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="https://csells.github.io/sb6/public/post-images/2019-08-04-curl-dart-fun/curl-logo.png"/>
    <published>2019-08-04T07:00:00.000Z</published>
    <summary>If you're a Dart programmer, the curl command doesn't really help you. Oh, it can tease you with of its wonderful functionality, but you still have to take anything you can do with curl and manually translate it into Dart code. Until now. Updating curl.trillworks.com for Dart For almost 5 years now, Nick Carneiro has maintained a wonderful site for converting curl commands into network code for your favorite language: curl.trillworks.com. I guess his first most favorate language must be Python, since that's...</summary>
    <content type="html">&lt;h1>Fun with Curl and Dart&lt;/h1>&lt;img src="https://csells.github.io/sb6/public/post-images/2019-08-04-curl-dart-fun/curl-logo.png" class="main-blog-image" style="width: 250px" />
&lt;p>If you're a Dart programmer, &lt;a href="https://curl.haxx.se/docs/manpage.html">the curl command&lt;/a> doesn't really help you. Oh, it can tease you with of its wonderful functionality, but you still have to take anything you can do with curl and manually translate it into Dart code.&lt;/p>
&lt;p>Until now.&lt;/p>
&lt;h2>Updating curl.trillworks.com for Dart&lt;/h2>
&lt;p>For almost 5 years now, &lt;a href="https://github.com/NickCarneiro">Nick Carneiro&lt;/a> has maintained a wonderful site for converting curl commands into network code for your favorite language: curl.trillworks.com.&lt;/p>&lt;img src="https://csells.github.io/sb6/public/post-images/2019-08-04-curl-dart-fun/curl.trillworks.com.png" />
&lt;p>I guess his first most favorate language must be Python, since that's the default, but since last week, there's been a new language listed: Dart. In addition to providing this site, Nick did one other thing: he exposed the underlying tech as an OSS repo on GitHub: &lt;a href="https://github.com/NickCarneiro/curlconverter">curlconverter&lt;/a>. And that repo is a wonder to behold, because it was factored in such a way that I could add Dart generation support for Dart in a weekend. Truly an example for other multi-language tools to follow.&lt;/p>
&lt;h2>Chrome DevTools: Network&lt;/h2>
&lt;p>The reason you care about turning curl into Dart is because the Chrome DevTools turn the curl command format into a universal capture format for requests in Chrome. That means that you can go to your favorite web site, dig around on &lt;a href="https://developers.google.com/web/tools/chrome-devtools/network/">the Network tab of the Chrome DevTools&lt;/a>, right-click on the bit that you like and pull it out as a curl command.&lt;/p>&lt;img src='https://csells.github.io/sb6/public/post-images/2019-08-04-curl-dart-fun/copy-as-curl.png' />
&lt;p>When you do, you'll end up with something like this:&lt;/p>
&lt;pre>&lt;code class="language-shell">curl "https://www.fantasynamegen.com/barbarian/short/" -H "Upgrade-Insecure-Requests: 1" -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36" -H "Referer: https://www.fantasynamegen.com/" --compressed
&lt;/code>&lt;/pre>
&lt;p>Even if you never run this as a curl command, you can still use it to generate code for your language of choice.&lt;/p>
&lt;h2>Dart networking code&lt;/h2>
&lt;p>Pasting the curl from Chrome DevTools into &lt;a href="https://curl.trillworks.com/#dart">Nick's curl converter website&lt;/a> gives you Dart code that looks like this:&lt;/p>
&lt;pre>&lt;code class="language-dart">import 'package:http/http.dart' as http;

void main() async {
  var headers = {
    'Upgrade-Insecure-Requests': '1',
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36',
    'Referer': 'https://www.fantasynamegen.com/',
    'accept-encoding': 'gzip',
  };

  var res = await http.get('https://www.fantasynamegen.com/barbarian/short/', headers: headers);
  if (res.statusCode != 200) throw Exception('get error: statusCode= ${res.statusCode}');
  print(res.body);
}
&lt;/code>&lt;/pre>
&lt;p>This is actually a complete program and if you put it into a file, e.g. fanname.dart, you're almost ready to run it. You also need a minimal pubspec.yaml that looks like this:&lt;/p>
&lt;pre>&lt;code class="language-yaml"># pubspec.yaml
name: fanname
dependencies:
  http:
&lt;/code>&lt;/pre>
&lt;p>The pubspec file lists the name of your app and it's dependencies, specifically the http package. These two files together are enough to run the program and get the same output as the curl command:&lt;/p>
&lt;pre>&lt;code class="language-shell">$ pub get
$ dart fanname.dart
&lt;/code>&lt;/pre>
&lt;p>The call to &lt;code>pub get&lt;/code> pulls down the dependencies and the call to dart runs your program. Of course, this assumes that you've got &lt;a href="https://dart.dev/tools/sdk">the Dart SDK&lt;/a> installed and on the PATH. Assuming you do, you'll have output that looks like this:&lt;/p>&lt;img src='https://csells.github.io/sb6/public/post-images/2019-08-04-curl-dart-fun/curl-dart-out.png' />
&lt;p>Actually, the output in this case goes on for a lot longer than that, so it isn't particularly helpful, but with a little filtering, it can be:&lt;/p>
&lt;pre>&lt;code class="language-shell">$ dart fanname.dart | grep '&amp;lt;li&amp;gt;' | sed 's/&amp;lt;\/*li&amp;gt;//g'
Vadryt
Hildecon
Axra
Rordryt
Freyagar
Egelkele
Mand
Sigceo
Krokrolm
Ric
Vase
Hildekrucen
Rabeorth
Thakald
Morncrom
Lafthe
Garrak
Caror'n
Theodtarg
Ordhall
&lt;/code>&lt;/pre>
&lt;h2>Where are we?&lt;/h2>
&lt;p>If the network code you want is already being executed via curl or on the web, that means you can take that curl command and turn it into Dart code with zero effort on &lt;a href="https://curl.trillworks.com/#dart">curl.trillworks.com&lt;/a>. The code from that site can be executed just like a curl command immediately or used as the start of your own code.&lt;/p>
&lt;p>The example I was showing in this post generated HTML, but if instead the result was JSON, then you can take that JSON output and paste it into &lt;a href="https://app.quicktype.io/">quicktype.io&lt;/a> to get the JSON serialization/deserialization code for Dart, too. It's a great time to be a Dart programmer!&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/returning-to-d&amp;amp;d</id>
    <title>Returning to D&amp;amp;D</title>
    <updated>2017-12-29T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="https://csells.github.io/sb6/public/post-images/2017/DnD_Logo.png"/>
    <published>2017-12-29T08:00:00.000Z</published>
    <summary>30 years ago, I paused a 5-year love of D&amp;amp;D to attend college. About six months ago, I picked it up again with my adult sons, who'd gathered for my birthday. We started with $20 on the D&amp;amp;D 5e Starter Set, which includes everything you need for a group to play: a subset of the 5th Edition D&amp;amp;D rules, a starter module, a set of pre-rolled characters and dice. My youngest son had learned all of the rules watching Critical Role, so I lead the interactive story telling as the DM, asking him for the sp...</summary>
    <content type="html">&lt;h1>Returning to D&amp;amp;D&lt;/h1>&lt;img src="https://csells.github.io/sb6/public/post-images/2017/DnD_Logo.png" class="main-blog-image" style="width: 250px">
&lt;p>30 years ago, I paused a 5-year love of D&amp;amp;D to attend college. About six months ago, I picked it up again with my adult sons, who'd gathered for my birthday. We started with $20 on &lt;a href="http://dnd.wizards.com/products/tabletop-games/rpg-products/rpg_starterset">the D&amp;amp;D 5e Starter Set&lt;/a>, which includes everything you need for a group to play: a subset of the 5th Edition D&amp;amp;D rules, a starter module, a set of pre-rolled characters and dice. My youngest son had learned all of the rules watching &lt;a href="https://geekandsundry.com/shows/critical-role/">Critical Role&lt;/a>, so I lead the interactive story telling as the DM, asking him for the specific mechanics as needed.&lt;/p>
&lt;h2>Paper &amp;amp; Pencil&lt;/h2>
&lt;p>We had a blast. I can't tell you how many hours of joy we got for $20 (although of course that lead to much more money spent shopping for the perfect dice, buying the full set of 5e rules, spell chards, etc.). However, we ran into two classes of problems with the paper &amp;amp; pencil play: 1) it only really works if you're all together in the same room (my sons are normally spread between three cities) and 2) some logistical issues like progressive map reveal (aka "fog of war") and managing encounters (i.e. initiative, HP, AC, attacks, damage, etc.&lt;/p>
&lt;h2>Remote Players&lt;/h2>
&lt;p>The first issue we easily solved with Google Hangouts, which we tried both at the local Google office in a conference room with a dedicated video conferencing system (an option I realize isn't available to everyone) and in my home office with a dedicated video conferencing computer, which I think is available to most anyone:&lt;/p>&lt;img src="https://csells.github.io/sb6/public/post-images/2017/home-dnd-setup.png" />
&lt;p>I happen to be using &lt;a href="https://enterprise.google.com/chrome/devices/#meetings">a dedicated device for Google Hangouts&lt;/a>, but we've also used a separate laptop that worked as well.&lt;/p>
&lt;h2>RPG Logistics Software&lt;/h2>
&lt;p>The logistics problems were the same as when I played D&amp;amp;D in the '80s, but I had less patience for them now that I know the power of software. So, I immediately started designing a solution in my head (&lt;a href="https://csells.github.io/sb6/backgammon-and-using-your-own-products">as I am wont to do&lt;/a>). However, as much as I enjoy writing software, I wanted to get back to playing faster than that! After some research, I found two main applications built to solve my RPG problems: Roll20 and Fantasy Grounds.&lt;/p>
&lt;p>&lt;a href="https://www.fantasygrounds.com">Fantasy Grounds&lt;/a> has a lot going for it and I know many people love it. However, there weren't a lot of "getting started" videos that I found inspiring and it required the local installation of a 32-bit client app. That seemed a little backwards to me. Also, it cost money just to get started.&lt;/p>
&lt;p>On the other hand, &lt;a href="http://roll20.net">Roll20&lt;/a> is web-based, has &lt;a href="https://www.youtube.com/results?search_query=roll20&amp;page=&amp;utm_source=opensearch">a ton of intro videos on YouTube&lt;/a> and is free (of course, they have paid options, too)! The videos made it look great, so my local son and I tried a little mock battle. When that worked, we got the party together to try the free module that comes with Roll20. We lost an hour or so getting used to things, which is to be expected, but I swear we spent another whole hour trying the built-in video conferencing that comes with Roll20. In theory it's great, as everyone shows up right on the game table, but in practice, it makes the whole app unstable as hell. I recommend turning it off completely and using a dedicated PC for video conferencing as we do.&lt;/p>
&lt;p>Some of the Roll20 controls are clunky, e.g. having to switch between select and drag mode when interacting with maps, and there can be some data entry when it comes to picking spells and the like.&lt;/p>
&lt;p>That said, we love Roll20. We've moved on from the free content (which ain't great, but gave us the practice we needed) to the content you can purchase that's been poured directly into the Roll20 format, including the maps, monsters, characters, NPCs, handouts, etc. My sons love to see the maps and where they are relative to the stuff in the room and the monsters. My favorite is being able to drag a monster or character onto the map, click on the "Initiative" link on the monster/character sheet, see the dice roll in 3D (the value is captured in &lt;a href="https://wiki.roll20.net/Turn_Tracker">the Turn Tracker&lt;/a>) and keep track of who's turn it is with a simple button click. Then, on each person's turn, they can roll to &lt;a href="https://wiki.roll20.net/5th_Edition_OGL_by_Roll20#Rolling_from_the_Attacks_.26_Spellcasting_Block">attack by clicking on their weapon or spell&lt;/a>, automatically showing advantage/disadvantage rolls (if needed) and damage, even lighting up the scores in red or green for critical hits or fumbles (the latter of which I manage with &lt;a href="https://play.google.com/store/apps/details?id=mgs.android.paizo.ifumble&amp;hl=en">the separate iFumble app&lt;/a>). Also, the built in fog of war mode and DM layer on the maps means that I can reveal things to the players as appropriate.&lt;/p>
&lt;p>Once you play with content specifically formatted for Roll20, you won't want to go back. Pretty much all of the official 5e modules seem to be available, including the starter module which we bought again for $20 (and again, totally worth it). We'd already gotten about half-way through via paper and pencil, so our first session with real content was a great comparison. With the kinks worked out, we had a great time and even included my little brother who lives in a fourth city in another time zone.&lt;/p>
&lt;h2>Where are we?&lt;/h2>
&lt;p>Since starting again six months ago, I've played with three groups of players, all of whom are composed mainly of adults that have little or no D&amp;amp;D experience. Certainly 5e D&amp;amp;D captures the flavor of 2e that I grew up on (aka Advanced D&amp;amp;D), so there's no trouble transitioning beyond learning some different rules. I do prefer the character sheet management provided by &lt;a href="http://dndbeyond.com">D&amp;amp;D Beyond&lt;/a> (the official logistics software provided by &lt;a href="http://dnd.wizards.com">Wizards of the Coast&lt;/a>), but it doesn't provide online play like Roll20 or Fantasy Grounds. My dream is that WotC purchase Roll20, drop it into D&amp;amp;D Beyond, polish it up and charge whatever they need to keep it running. I'd pay!&lt;/p>
&lt;p>Of course, the main joy is the memories you build in the key moments of interactive story telling with friends and family. However you end up doing that, you can't go wrong.&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/the-mother-of-all-web-demos</id>
    <title>The mother of all web demos</title>
    <updated>2017-11-12T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/WebAssembly_Logo.png/440px-WebAssembly_Logo.png"/>
    <published>2017-11-12T08:00:00.000Z</published>
    <summary>WebAssembly explodes client-side programming Back in the olden days, you could use whatever programming language you wanted to write your client-side code: ASM, C, C++, BASIC, Java, C#, etc. Hell, every language had a client-side UI framework attached (often more than one ). Then the web hit and we used those same languages to generate HTML on the server-side. It was a polyglot world for client-side development right up until mobile made itself the #1 targeted format in the world (cue record scratching nois...</summary>
    <content type="html">&lt;h1>WebAssembly &lt;em>explodes&lt;/em> client-side programming&lt;/h1>&lt;img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/WebAssembly_Logo.png/440px-WebAssembly_Logo.png" class="main-blog-image" style="width: 250px">
&lt;p>Back in the olden days, you could use whatever programming language you wanted to write your client-side code: ASM, C, C++, BASIC, Java, C#, etc. Hell, every language had a client-side UI framework attached (often &lt;a href="https://csells.github.io/sb6/wfbook">more&lt;/a> &lt;a href="https://csells.github.io/sb6/wpfbook">than&lt;/a> &lt;a href="https://docs.microsoft.com/en-us/windows/uwp/get-started/universal-application-platform-guide">one&lt;/a>). Then the web hit and we used those same languages to generate HTML on the server-side. It was a polyglot world for client-side development right up until mobile made itself the #1 targeted format in the world (cue &lt;a href="https://www.youtube.com/watch?v=sqgW-2orQQg">record scratching noise&lt;/a>).&lt;/p>
&lt;p>In a mobile/cloud world, the server is alive with programming languages, including Java, C#, Swift, JavaScript, Erlang, Clojure, Go and 100 others. But on the client-side, we're relegated to just a handful:&lt;/p>
&lt;ul>
&lt;li>Mobile Web: JavaScript (and its variants)&lt;/li>
&lt;li>Mobile Native: C/C++, Java, Objective-C/Swift, C#&lt;/li>
&lt;/ul>
&lt;p>That's pretty much it. As a C# guy personally interested in building a web app (specifically a &lt;a href="https://developers.google.com/web/progressive-web-apps/">Progressive Web App&lt;/a> that works great on both desktop and mobile devices), I was pretty frustrated. I could write any language I wanted so long as it was JavaScript.&lt;/p>
&lt;p>If you want, you could point out the large number of languages that "transpile" to JavaScript, including some C# variants, but every one of those that I've tried has been a very leaky abstraction -- you have to know that they are just JavaScript translators and write your code accordingly. It's a very different experience than the multi-language support on the Java VM or .NET, where the VM provides a common environment for every language without any one language being "special" (although you could argue that Java shines through into languages like Clojure and C# into F#, but not nearly to the same degree). Really, in the browser, JavaScript is the only first-class language, along with HTML being the only UI framework.&lt;/p>
&lt;p>So, with PWAs on my mind, HTML in my heart and JavaScript at my fingers, I started &lt;a href="https://csells.github.io/sb6/building-a-modern-mobile-first-app">looking into JavaScript frameworks&lt;/a>. Unfortunately, they all of them left me wanting something much more like those old Microsoft UI frameworks, but for the web.&lt;/p>
&lt;p>And then came Steve.&lt;/p>
&lt;h1>The mother of all web demos&lt;/h1>
&lt;p>In June of 2017, Steve Sanderson gave a talk entitled &lt;a href="https://www.youtube.com/watch?v=MiLAE6HMr10">Web Apps can’t really do &lt;em>that&lt;/em>, can they?&lt;/a> in which he demonstrated the following:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/chrisdunelm/DotNetAnywhere">DotNetAnywhere&lt;/a> runtime compiled to &lt;a href="http://webassembly.org/">WebAssembly&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://csells.github.io/sb6/public/post-images/2017/steve1.png">.NET Hello, World run via WebAssembly&lt;/a> in DotNetAnywhere&lt;/li>
&lt;li>&lt;a href="https://github.com/SteveSanderson/Blazor">Blazor&lt;/a>, an experimental client-side framework for building &lt;a href="https://en.wikipedia.org/wiki/Single-page_application">Single Page Apps&lt;/a> in .NET&lt;/li>
&lt;li>ASP.NET &lt;a href="https://csells.github.io/sb6/public/post-images/2017/steve2.png">Razor template expansion&lt;/a> (including embedded C#) on the client-side&lt;/li>
&lt;li>Hot-loading (a code change recompiles the app via in-memory, server-side Roslyn compiler and reloads the app on the client-side)&lt;/li>
&lt;li>Dynamically loaded polyfill for browsers that don't support WebAssembly, i.e. IE&lt;/li>
&lt;li>&lt;a href="https://twitter.com/davidfowl/status/891125650286755840">Debugging on the client-side in C#&lt;/a> (developed in a hackathon after Steve's talk)&lt;/li>
&lt;li>&lt;a href="https://github.com/SteveSanderson/Blazor/blob/master/samples/ClientServerApp/ClientServerApp.Shared/WeatherForecast.cs">Shared C# classes between the client-side and server-side (aka "reified classes")&lt;/a>, serialized via JSON and passed around via REST (not mentioned in Steve's talk, but available in his sample code)&lt;/li>
&lt;li>Classic Todo List app implemented from scratch in 5 minutes flat, with a size of only 326K:&lt;/li>
&lt;/ul>&lt;img src="https://csells.github.io/sb6/public/post-images/2017/steve3.png">
&lt;p>This talk blew my mind. This was the browser-based full stack for .NET that I hadn't even realized that I'd wanted. Steve's demo made me realize that not only could Microsoft create an amazing end-to-end experience for .NET developers that wanted their code to fit into the modern web, but they could do it in a way that worked across all form factors and all platforms.&lt;/p>
&lt;p>This demo wasn't the end. &lt;a href="http://blog.stevensanderson.com/2017/11/05/blazor-on-mono/">Steve recently posted&lt;/a> an update talking about all of the contributors he's had since his demo, but also the move to the more full-featured Mono .NET implementation provided by Xamarin.&lt;/p>
&lt;h1>What's coming&lt;/h1>
&lt;p>Anyone experienced with Microsoft sees a clear path sketched out by the TOC to any Windows-based UI framework book:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Easy onboarding&lt;/strong> with templates for Visual Studio [Code] to help developers quickly build .NET-based client-side and full-stack apps&lt;/li>
&lt;li>&lt;strong>Great tooling:&lt;/strong> Intellisense, Goto Definition, debugging, etc. will all be baked in&lt;/li>
&lt;li>&lt;strong>Components:&lt;/strong> out of the box components will be great and cover the common cases&lt;/li>
&lt;li>&lt;strong>Component Ecosystem:&lt;/strong> non-UI libraries and advanced UI use cases will be served by a 3rd party community (can you say "Json.NET and Telerik"?)&lt;/li>
&lt;li>&lt;strong>Data Binding/State Management:&lt;/strong> Microsoft invented data binding for Visual Basic and Steve already showed this off during his demo&lt;/li>
&lt;li>&lt;strong>HTML Templates:&lt;/strong> ASP invented the inside-out model we think of as modern HTML templates and Steve has already shown Razor redone for .NET and the web&lt;/li>
&lt;li>&lt;strong>Reified classes:&lt;/strong> Silverlight did this thing were you could send .NET objects over the wire and use the same class implementation on both sides. Steve's already shown how this can be done over the web using JSON and REST, which means that any language can play on either side. Do this with &lt;a href="http://graphql.org/">GraphQL&lt;/a> and you'll get querying only what you need and data change notifications via subscriptions.&lt;/li>
&lt;li>et cetera&lt;/li>
&lt;/ul>
&lt;p>And as huge as this will be for the .NET community (can you say "Silverlight without the mess"?), that's not all.&lt;/p>
&lt;h1>WebAssembly is the key&lt;/h1>
&lt;p>Right now, Steve's proof of concept .NET Runtime is a 4MB download for any .NET app. That's clearly not going to work. As Steve mentions, there are lots of optimizations to do that'll bring down the size, but the real optimization win is going to be when the next version of WebAssembly comes out, including two big features: plugging into the browser's VM and access to the DOM. The WebAssembly working group are already discussing both of these (e.g. here're &lt;a href="https://github.com/WebAssembly/meetings/blob/1e6144bdfa932eb137d93cfc3507bb7b08a5cf6a/2017/CG-07.md#gc--managed-data">the notes from a recent meeting discussing garbage collection&lt;/a>).&lt;/p>
&lt;p>With access to the browser's VM, a .NET app won't need to ship it's own runtime for every app -- it'll just plug .NET objects into the one provided by the browser. Now the .NET runtime for the browser can be trimmed to a bridge to what the browser provides as well as the .NET Framework base libraries. Combine that with "tree shaking" (removing the IL your code never uses), code splitting and on-demand loading and you've got a .NET WebAssembly app that even anyone on just their phone can love.&lt;/p>
&lt;p>But it's really the 2nd thing that the WebAssembly working group is enabling -- access to the DOM -- that enables a Cambrian explosion of client-side programming languages. WebAssembly already provides a language-independent calling layer enabling various languages to call not only between itself and JavaScript but also between every other language that compiles down to WebAssembly. Combine that with a standardized UI layer -- the HTML DOM -- and &lt;strong>WebAssembly enables a universal client-side runtime for any language&lt;/strong>. What this means is that I no longer have to have the Angular, React and Vue bindings to Bootstrap: if someone provides the UI components for Bootstrap in any language that compiles down to WebAssembly, I can use it from any other language.&lt;/p>
&lt;h1>Just one more thing&lt;/h1>
&lt;p>And as amazing as WebAssembly is about to get for the client-side, I doubt this thing will stop there. NodeJS was invented to bring JavaScript and it's underlying runtime to the server. Imagine doing the same thing for WebAssembly but for any language, server-side or client-side. Done right, WebAssembly has the potential to be what Java and .NET have both tried and failed to be -- the universal runtime for all languages across all platforms.&lt;/p>
&lt;p>But even if it doesn't get that far, Steve has shown us that WebAssembly enables an amazing client-side experience. I can't wait to get my hands on it.&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/building-a-modern,-mobile-first-app</id>
    <title>Building a modern, mobile-first app</title>
    <updated>2017-11-11T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/jpg" href="http://media.idownloadblog.com/wp-content/uploads/2014/12/IBM-Apple-apps-Retention-screenshot.jpg"/>
    <published>2017-11-11T08:00:00.000Z</published>
    <summary>A while ago, I started building a brand new client app. I wanted to use all of the modern techniques to make it a great app and to make sure it had maximum reach. For me, that meant a Progressive Web App that would work from desktop and mobile browsers. And so that meant JavaScript. That was OK; I'd been through the 5 stages of grief for JavaScript years ago but the real question is, which client-side framework do I choose? To answer that question, I spent a great deal of time with a LOT of them: Angular : ...</summary>
    <content type="html">&lt;h1>Building a modern, mobile-first app&lt;/h1>&lt;img src="http://media.idownloadblog.com/wp-content/uploads/2014/12/IBM-Apple-apps-Retention-screenshot.jpg" class="main-blog-image" style="width: 250px">
&lt;p>A while ago, I started building &lt;a href="https://csells.github.io/sb6/backgammon-and-using-your-own-products">a brand new client app&lt;/a>. I wanted to use all of the modern techniques to make it a great app and to make sure it had maximum reach. For me, that meant a &lt;a href="https://developers.google.com/web/progressive-web-apps/">Progressive Web App&lt;/a> that would work from desktop and mobile browsers. And so that meant JavaScript. That was OK; I'd been through &lt;a href="https://grief.com/the-five-stages-of-grief/">the 5 stages of grief&lt;/a> for JavaScript &lt;a href="https://csells.github.io/sb6/win8jsbook">years ago&lt;/a> but the real question is, which client-side framework do I choose? To answer that question, I spent a great deal of time with a LOT of them:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://angular.io/">&lt;strong>Angular&lt;/strong>&lt;/a>: I was a huge AngularJS (v1) fan, but when the template for an Angular 2 project included as many files as for a J2EE project, I was out. Too much, too soon.&lt;/li>
&lt;li>&lt;a href="https://www.polymer-project.org/">&lt;strong>Polymer&lt;/strong>&lt;/a>: great framework with great UI components and tools, but the bet on standardizing &lt;a href="https://caniuse.com/#feat=imports">HTML Imports&lt;/a> as the core reuse mechanism didn't pay off. Instead, Polymer 3 seems to be heading down a "put your HTML into a string" road, which I don't like. Plus, the code I wrote in Polymer felt wrong somehow, particularly when it came to state management. This would become a theme.&lt;/li>
&lt;li>&lt;a href="React/Redux">&lt;strong>React/Redux&lt;/strong>&lt;/a>: I love writing React code. The rendering model really speaks to me. However, as soon as I wanted to share data between components, things broke down quickly. As much as I love React, I hate &lt;a href="https://redux.js.org/docs/basics/UsageWithReact.html">Redux&lt;/a>. The model is nice but the code is insane. And the fact that there are dozens of other ways to manage state in React, fragmenting the community, is also insane. No thanks.&lt;/li>
&lt;li>&lt;strong>Lots o' little libs&lt;/strong>: I spent some time going back to basics with HTML and &lt;a href="http://getbootstrap.com/">Bootstrap&lt;/a> and &lt;a href="https://jquery.com/">jQuery&lt;/a>. And while I enjoyed picking up jQuery again and Bootstrap certainly met my UI needs, the lack of a virtual DOM or a standardized component model (&lt;a href="https://caniuse.com/#feat=custom-elementsv1">Custom Elements&lt;/a> still hasn't been adopted widely enough and there's a lot of boilerplate code) put me on a path of reinventing the solutions all of the other frameworks have already solved. Plus, still no great way to solve the state management problem.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://stenciljs.com/">Stencil&lt;/a>&lt;/strong>: I really like the Stencil approach of pushing the common idioms (virtual-DOM-based rendering, JSX, class-based components) along with compile-time tooling to create HTML custom elements, but there aren't any UI frameworks for it yet. I didn't want my limited free time to start by wrapping Bootstrap in Stencil. According to &lt;a href="https://www.acast.com/thewebplatformpodcast/138-stencil">a recent podcast&lt;/a>, the next version of Ionic will come with a set of Stencil UI components -- perhaps I'll revisit it then.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://vuejs.org/">VueJS&lt;/a>&lt;/strong>: This is something I was looking into recently and it's very promising. It's simple, so it can be adopted easily, but full-featured so it can be used for real-world stuff. There's a range of usage from "include this JS file and write this code" to "run this CLI and get a Webpack-based build with hot-loading". There are plenty of UI frameworks, including for &lt;a href="https://bootstrap-vue.js.org/">Bootstrap&lt;/a>. &lt;a href="https://vuejs.org/v2/guide/routing.html">Routing&lt;/a> turned out to be way simpler than in React and &lt;a href="https://vuex.vuejs.org/en/">state management&lt;/a> looks like it will be sane. I wish it were class-based, but Vue is still the #1 contender.&lt;/li>
&lt;/ul>
&lt;h1>Where are we?&lt;/h1>
&lt;p>Maybe it's just how I was brought up, but I miss the single-vendor, single-lib, single-tool, single-way model from my Microsoft days. It wasn't cross-platform or OSS, but WinForms was a great end-to-end solution for building Windows apps. Of course, I say all of this while still wanting a responsive app built using HTML and deployed via the browser that works everywhere for everyone. It's a heterogeneous world and that's a very good thing, but it does have it's downsides, too.&lt;/p>
&lt;p>Tell me what you think -- did I mischaracterize your favorite JS framework or miss it altogether? I'd love to hear that there's an end-to-end toolchain that'll make me forget WinForms.&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/viking-me</id>
    <title>Viking Me</title>
    <updated>2016-11-21T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/jpg" href="https://csells.github.io/sb6/public/post-images/2016/viking-me-irl.jpg"/>
    <category term="fun" label="Fun"/>
    <published>2016-11-21T08:00:00.000Z</published>
    <summary>Today, I was asked about the story behind my viking avatar: The avatar is years and years old. Peter Stern, a graphic designer friend of mine, put together a set of avatars for me for something (I forget what) and the viking is the one that resonated with me the most because of my Norwegian heritage, my physical stature and my general demeanor (those of you who know me have never asked why I choose a Viking avatar : ). However, it was my mention of a real-life picture of me in a viking helmet that lead to t...</summary>
    <content type="html">&lt;h1>Viking Me&lt;/h1>&lt;img src="https://csells.github.io/sb6/public/post-images/2016/viking-me-irl.jpg" class="main-blog-image" style="width: 250px" />
&lt;p>Today, I was asked about the story behind my viking avatar: The avatar is years and years old. Peter Stern, a graphic designer friend of mine, put together a set of avatars for me for something (I forget what) and the viking is the one that resonated with me the most because of my Norwegian heritage, my physical stature and my general demeanor (those of you who know me have never asked why I choose a Viking avatar : ).&lt;/p>
&lt;p>However, it was my mention of a real-life picture of me in a viking helmet that lead to the challenge -- post that picture! So here you go. Enjoy. : )&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/backgammon-and-using-your-own-products</id>
    <title>Backgammon and Using Your Own Products</title>
    <updated>2016-11-05T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="https://csells.github.io/sb6/public/post-images/fibs-logo.png"/>
    <published>2016-11-05T07:00:00.000Z</published>
    <summary>Have you ever used a product of any kind -- an app, a device, a plunger -- and thought to yourself "Do these people even use their own product?" As a Product Manager at Google and a long-time software product guy, I think this all the time. Sure, [Donald Norman](https://www.amazon.com/Design-Everyday-Things-Donald-Norman/dp/1452654123), [Steve Krug](https://www.amazon.com/dp/0321344758/) and [countless others](https://www.amazon.com/s/field-keywords=product+design) have written well on the topic of product ...</summary>
    <content type="html">&lt;h1>Backgammon and Using Your Own Products&lt;/h1>&lt;img src="https://csells.github.io/sb6/public/post-images/fibs-logo.png" class="main-blog-image" style="width: 400px" />
Have you ever used a product of any kind -- an app, a device, a plunger -- and thought to yourself "Do these people even use their own product?" As a Product Manager at Google and a long-time software product guy, I think this all the time. Sure, [Donald Norman](https://www.amazon.com/Design-Everyday-Things-Donald-Norman/dp/1452654123), [Steve Krug](https://www.amazon.com/dp/0321344758/) and [countless others](https://www.amazon.com/s/field-keywords=product+design) have written well on the topic of product design, but that's not enough.
&lt;p>&lt;strong>You actually have to use your own products to solve the same problems your target customers are trying to solve.&lt;/strong>&lt;/p>
&lt;p>If you don't, you're much less likely to produce something that anyone will want to use.&lt;/p>
&lt;h2>Method Acting and Product Design&lt;/h2>
&lt;p>Of course, using your own products comes with it's own set of problems and there's the very real possibility that you're just not your target customer -- in those cases, you just have to fake it. Consider this the "method acting" form of product design:&lt;/p>
&lt;p>&lt;strong>Put yourself in a situation where you need to use your product the way your customers will use it.&lt;/strong>&lt;/p>
&lt;p>Got a map app? Use it to find something you really care about finding. Got a device for kids that cooks pizza at the press of a button? Ask your children to make dinner and eat the results. Got a solar-powered plunger? Plug your toilet in the middle of the night and see what happens.&lt;/p>
&lt;p>In my case, the products I design are for use by software developers. That means that to test my own products, I have to set myself up in a situation where I'll need the product I'm building.&lt;/p>
&lt;p>As an example, a couple of years ago I was writing &lt;a href="http://my.safaribooksonline.com/video/programming/mobile/9780134052144">an online course about building cross-platform apps using Xamarin&lt;/a>. I could've showed off the various topics with throw-away samples, but then I would have no confidence that I'd covered the topics my developer customers cared about. Instead, I chose to start from scratch and build an app I actually wanted for use on Windows, iOS and Android phones and tablets. In that way, my course became the thing I wished I'd had to get up to speed on building apps with Xamarin.&lt;/p>
&lt;p>&lt;strong>Caring about the results of using your product is key.&lt;/strong>&lt;/p>
&lt;p>Without caring about the results, you can't properly judge whether your product is useful or not. If you don't care whether you get a vegetarian pizza or a meat-lover's, you're not going to be able to notice important issues in your EZ-Bake Pizza Oven, let alone fix them.&lt;/p>
&lt;p>In my case with the online course, if I hadn't have chosen to build something I wanted to use on my own phone and to share with friends and family using a variety of other phones, then I wouldn't have had the module on deployment for each of the three mobile OSes I was asking my customers to target. Without that module, my customers would've been stuck figuring that out for themselves, making my online course a lot less useful.&lt;/p>
&lt;h2>First Internet Backgammon Server&lt;/h2>
&lt;p>A few days ago, I celebrated my two-year Googleversary; I'm the Lead Product Manager for &lt;a href="http://cloud.google.com">the Google Cloud Plaform&lt;/a> developer tools. In that time, I've built a few small apps to wrap my head around the products we're building for our developer customers, some of them are real-world (like tinysells.com for resolving the URLs in my books), but most are throw-away demos. Even the real-world apps are small enough that I haven't needed to really embrace a large surface of our platform. For this to qualify as a real product test, it needs to be cloud-based, it needs to be big enough to exercise a reasonable subset of our platform and most importantly, it needs to be something I care about.&lt;/p>
&lt;p>&lt;strong>I care about Backgammon.&lt;/strong>&lt;/p>
&lt;p>As a kid growing up in the Midwest, my family was big into card games, board games and strategy games of all kinds. It started at a young age with Double Dirty Crazy 8s, Monopoly, Risk and Speed and eventually graduated to Gin, Cribbage, Poker and, of course, Backgammon. My family wasn't one of those "let the kids win to build their self esteem" families -- we played to win and then we'd gloat afterwards. To this day, I still play a lot of these same games on my phone (the real reason I use Android isn't because I work at Google, but because of &lt;a href="https://play.google.com/store/apps/details?id=com.game.drisk">the world's best mobile Risk game&lt;/a>).&lt;/p>
&lt;p>I play &lt;a href="https://play.google.com/store/apps/details?id=uk.co.aifactory.backgammonfree">my favorite Android Backgammmon game&lt;/a> several times/day. I'd like to play with other humans, but unfortunately, it's not online multi-player and I moved away from my game-crazy extended family years ago. I would play Backgammon with my local immediate family, but they don't like to play with me (I can't imagine why).&lt;/p>
&lt;p>Of course, there are plenty of existing ways to play multi-player Backgammon online, but none of them as the same UX as the one from AI Factory. Plus, the internet has a hidden gem for Backgammon that I would love to access via a modern UX: FIBS.&lt;/p>
&lt;p>The &lt;a href="http://fibs.com">First Internet Backgammon Server&lt;/a> is a telnet server that has been running since 1992 to provide multi-player Backgammon via text over the internet. It was originally created by Andreas (marvin) Schneider and has been maintained by Patti Beadles since 1996. According to &lt;a href="http://www.fibs.com/guide.html#history">FIBS history&lt;/a>, FIBS has "&lt;a href="http://www.fibs.com/connecting.html">a number of excellent graphical interfaces&lt;/a>". Well, excellent than may be, but I couldn't get any of them to work. All of the ones I could actually get to run seem to be largely GUIs around the same &lt;a href="http://www.fibs.com/CommandReference/index.html">telnet command line interface&lt;/a> that FIBS has always provided. Don't get me wrong -- FIBS commands are great for text mode (&lt;a href="http://www.fibs.com/fibs_interface.html#board_state">the FIBS text board layout&lt;/a> is especially fun), but it doesn't hold up to the expectations set by modern mobile Backgammon games, especially the one that the AI Factory has me hooked on.&lt;/p>
&lt;p>As a user of FIBS, I want a responsive web UI on my desktop or mobile browser that meets modern UX standards; the only time I want to type anything is when I'm chatting with Backgammon friends and enemies.&lt;/p>
&lt;p>As the developer of a web-based FIBS client, I have to worry about the following things:&lt;/p>
&lt;ul>
&lt;li>a web frontend so anyone can access it from anywhere&lt;/li>
&lt;li>a WebSocket proxy so that the web frontend can talk to it (JavaScript can't open a connection to a raw telnet server)&lt;/li>
&lt;li>a backend in the cloud so it can scale with demand&lt;/li>
&lt;li>a way to notify users when it's there turn (Pam hates &lt;a href="http://www.fibs.com/guide.html#community">droppers&lt;/a>!)&lt;/li>
&lt;li>a CI/CD pipeline to get updates out to users ASAP&lt;/li>
&lt;li>a way to track my app in production for perf, usage, crashes, etc.&lt;/li>
&lt;/ul>
&lt;p>As a product designer (remember where all of this started), I get to push on the following pieces of our cloud developer tooling:&lt;/p>
&lt;ul>
&lt;li>how do I learn about targeting the cloud with my app?&lt;/li>
&lt;li>how do I build my backend and my frontend?&lt;/li>
&lt;li>how do I validate an update to my app before deployment?&lt;/li>
&lt;li>how do I deploy an update?&lt;/li>
&lt;li>how do I monitor my app in production?&lt;/li>
&lt;li>how do I track errors back to causes?&lt;/li>
&lt;/ul>
&lt;h2>Where Are We?&lt;/h2>
&lt;p>Each successive layer from user needs to developer needs to product design validation is driven by the core: I'm building something I care about. To be clear, I picked a project that execises the end-to-end of my product set on purpose. Further, any one app I build will only be one of a nearly infinite number of possible passways through the features and tools we provide to developers on the Googles Cloud Platform.&lt;/p>
&lt;p>Of course, using your own product can't be the only thing need you do to validate it. You also need input from customers, competitive analysis, usage metrics, ...&lt;/p>
&lt;p>That said, &lt;strong>using our products like a real customer is going to give me a bunch of insights that I wouldn't have had otherwise&lt;/strong>. That's a good thing.&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/google-cloud-storage-hierarchy-in-.net</id>
    <title>Google Cloud Storage Hierarchy in .NET</title>
    <updated>2016-08-07T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/jpg" href="https://vienna-wv.com/images/tree.jpg"/>
    <published>2016-08-07T07:00:00.000Z</published>
    <summary>Google's Cloud Storage Browser perpetrates a fiction of files and folders that doesn't exist. The Google Cloud Storage (GCS) API only has two concepts: buckets and objects. A bucket is a container of objects and needs a globally unique name. An object has a name, a content type and content. The name can be simple, e.g. "foo.txt" or it can have slashes in it, e.g. "foo/bar.txt" or even just "quux/". However, from the GCS API point of view, there's no difference -- the only container is a bucket. For example,...</summary>
    <content type="html">&lt;h1>Google Cloud Storage Hierarchy in .NET&lt;/h1>&lt;img src="https://vienna-wv.com/images/tree.jpg" class="main-blog-image" style="width: 250px" />
&lt;p>Google's &lt;a href="https://console.cloud.google.com/storage/browser">Cloud Storage Browser&lt;/a> perpetrates a fiction of files and folders that doesn't exist. The &lt;a href="https://cloud.google.com/storage/docs/json_api/">Google Cloud Storage (GCS) API&lt;/a> only has two concepts: buckets and objects.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>A bucket is a container of objects and needs a globally unique name.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>An object has a name, a content type and content. The name can be simple, e.g. "foo.txt" or it can have slashes in it, e.g. "foo/bar.txt" or even just "quux/". However, from the GCS API point of view, there's no difference -- the only container is a bucket.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>For example, I can write a program using &lt;a href="https://github.com/GoogleCloudPlatform/google-cloud-dotnet#google-cloud-storage">the .NET GCS client lib&lt;/a> from &lt;a href="https://www.nuget.org/packages/Google.Storage.V1/">NuGet&lt;/a> that looks like this:&lt;/p>
&lt;pre>&lt;code class="language-c#">void ListBucketsAndObjects(string projectId) {
  var client = StorageClient.Create();

  foreach (var bucket in client.ListBuckets(projectId)) {
    Console.WriteLine($"{bucket.Name}/");
    foreach (var obj in client.ListObjects(bucket.Name, null)) {
      Console.WriteLine($"  {obj.Name}");
    }
  }
}
&lt;/code>&lt;/pre>
&lt;p>Given objects with names as described above, this would be the output:&lt;/p>
&lt;pre>&lt;code>csells-bucket-1/
  foo.txt
  foo/bar.txt
  quux/
&lt;/code>&lt;/pre>
&lt;p>However, if you surf to the &lt;a href="https://console.cloud.google.com/storage/browser">Storage Browser&lt;/a> to see the project with these three objects, you'll see something that looks like a normal file/folder browser:&lt;/p>&lt;img src="https://csells.github.io/sb6/public/post-images/gcs-bhelper-1.png" />
&lt;h2>Implicit and Explicit Folders&lt;/h2>
&lt;p>The Storage Browser has interpreted one of the objects as a file and two of them as folders, one implicit and one explicit. The implicit object folder comes from the slash in "foo/bar.txt"; the slash is used as a delimiter that means "folder" as far as the Storage Browser is concerned.&lt;/p>
&lt;p>The explicit folder comes from an object with a name that ends in a slash. You can create one by pressing the Create Folder button in the Storage Explorer or with the following lines of code:&lt;/p>
&lt;pre>&lt;code class="language-c#">var client = StorageClient.Create();
client.UploadObject(bucketName, "quux/", "", Stream.Null);

&lt;/code>&lt;/pre>
&lt;h2>Working with Folders&lt;/h2>
&lt;p>When you're working with buckets and objects, the ListBuckets and ListObjects methods work just fine. However, if you'd like to navigate the fictional hierarchy of files and folders the way that the Storage Browser does, you can use the &lt;a href="https://github.com/csells/BucketHelperSample/">BrowserHelper&lt;/a> (a piece of .NET helper code I put together for just this purpose):&lt;/p>
&lt;pre>&lt;code class="language-c#">void ListBucketsFilesAndFolders(string projectId) {
  var client = StorageClient.Create();

  foreach (var bucket in client.ListBuckets(projectId)) {
    ListFilesAndFolders(client, bucket.Name);
  }
}

void ListFilesAndFolders(StorageClient client, string bucket, string parentFolder = "", string indent = "") {
  string shortName = parentFolder == "" ? bucket : BucketHelper.ShortName(parentFolder);
  Console.WriteLine($"{indent}{shortName}/");
  indent += "  ";

  foreach (var file in client.ListFiles(bucket, parentFolder)) {
    Console.WriteLine($"{indent}{file.ShortName()}");
  }

  foreach (var folder in client.ListFolders(bucket, parentFolder)) {
    ListFilesAndFolders(client, bucket, folder, indent);
  }
}
&lt;/code>&lt;/pre>
&lt;p>The BucketHelper extension class provides the ShortName, ListFiles and ListFolders functions in the sample above. ListFiles and ListFolders are provided on the existing .NET client library types instead of providing a whole new set of wrapped types, which largely just get in the way.&lt;/p>
&lt;p>The output for the same list of objects looks like this:&lt;/p>
&lt;pre>&lt;code>csells-bucket-1/
  foo.txt
  foo/
    bar.txt
  quux/
&lt;/code>&lt;/pre>
&lt;p>The implicit and explicit folders are folded together into a list of strings at each level, so your code doesn't have to care which is which. However, if you do care, a call to StorageClient.GetObject returns an object or throws an exception depending on whether it's explicit or implicit.&lt;/p>
&lt;p>When creating your objects, your code doesn't have to explicitly create folders, since implicit folders are first class citizens as far as the BrowserHelper and the Storage Browser are concerned. However, if you'd like to create a folder explicitly, BrowserHelper provides a helper for that, too:&lt;/p>
&lt;pre>&lt;code class="language-c#">var client = StorageClient.Create();
var folderObj = client.CreateFolder(bucketName, "baaz/");

&lt;/code>&lt;/pre>
&lt;h2>Where Are We?&lt;/h2>
&lt;p>The BucketHelper is an extension to &lt;a href="https://github.com/GoogleCloudPlatform/google-cloud-dotnet#google-cloud-storage">the hand-crafted Google Cloud Storage client library for .NET&lt;/a>. It helps to provide access to the same fictional hierarchy that the Cloud Storage Browser provides over your buckets and objects. Enjoy.&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/breaking-into-the-industry</id>
    <title>Breaking Into the Industry</title>
    <updated>2016-07-29T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/jpg" href="http://1.bp.blogspot.com/_FV-iAD8SAbc/S6GV9-oiX1I/AAAAAAAAAw0/ZtQnw3cMkxM/S1600-R/oldcode.jpg"/>
    <published>2016-07-29T07:00:00.000Z</published>
    <summary>I got an email the other day from an old friend that said he'd met a young developer named Ben and that he was impressed with his "acumen, initiative and hunger to learn," which made me want to help him if I could. He also said that "his Dad followed your blogs for years," which made me want to eat right and exercise. In the meantime, Roger introduced me to Ben via email and Ben had some excellent questions, which I thought I'd share here along with my answers, if only to avoid other people sending me email...</summary>
    <content type="html">&lt;img src="http://1.bp.blogspot.com/_FV-iAD8SAbc/S6GV9-oiX1I/AAAAAAAAAw0/ZtQnw3cMkxM/S1600-R/oldcode.jpg" class="main-blog-image" />
&lt;h1>Breaking Into the Industry&lt;/h1>
&lt;p>I got an email the other day from an old friend that said he'd met a young developer named Ben and that he was impressed with his "acumen, initiative and hunger to learn," which made me want to help him if I could. He also said that "his Dad followed your blogs for years," which made me want to eat right and exercise.&lt;/p>
&lt;p>In the meantime, Roger introduced me to Ben via email and Ben had some excellent questions, which I thought I'd share here along with my answers, if only to avoid other people sending me emails that make me feel old...&lt;/p>
&lt;h2>From: Benaiah Mischenko&lt;/h2>
&lt;blockquote>
&lt;p>[ben] I was hoping to pick your brain for any advice you’d have for a young developer trying to break into the industry. I’ve been coding for some time, but most of my work has been small one-off contracts (I currently work at a radio company building websites for the stations they own).&lt;/p>
&lt;/blockquote>
&lt;p>Ben, you are about to "break into" an industry with near 0% unemployment. Practically everyone able to string together working code/markup can get a job of some sort. All you really have to do is to keep coding, be prepared to show off your work (GitHub is great for this) and you'll find a job. Right now there's no other industry I know of that has this luxury and it's not going to last forever, so enjoy it.&lt;/p>
&lt;blockquote>
&lt;p>[ben] What do you see as the biggest growth opportunities in the field — areas of study that will be big in the coming years (for instance, I’ve heard people say DevOps is poised to become as fundamental a practice as source control as time goes on)?&lt;/p>
&lt;/blockquote>
&lt;p>Identifying the biggest growth opportunity is easy: &lt;a href="https://cloud.google.com/container-engine/">containers&lt;/a> are the way we’ll be packaging and deploying out software for the foreseeable future, &lt;a href="http://cloud.google.com">the cloud&lt;/a> will be the target of said deployments and &lt;a href="https://cloud.google.com/products/machine-learning/">Machine Learning&lt;/a> is going to be part of practically every system we build from now on. I’d also look at &lt;a href="http://www.forbes.com/sites/jlim/2016/07/30/pokemon-go-could-be-the-answer-to-making-augmented-reality-mainstream/">Augmented Reality&lt;/a> as the next computing platform beyond web and mobile. Forgive me for making all of those links Google-related (Pokemon Go runs on the Google Cloud), but Google has it's hands in lots of cool stuff.&lt;/p>
&lt;blockquote>
&lt;p>[ben] What do you look for when determining the ability and potential to grow of a junior developer?&lt;/p>
&lt;/blockquote>
&lt;p>I look for two things when evaluating any engineer:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;em>How deeply do you know the things you know?&lt;/em> Can they answer &lt;em>why&lt;/em> questions in addition to &lt;em>how&lt;/em> questions?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;em>How quickly and how often do they learn new things?&lt;/em> The tech landscape is always changing, so whatever skills you have, however deep they may be, will quickly fade in importance. You can't be useful for very long without the ability to learn new things.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>[ben] More generally, where do you see our industry moving, and do you have any concerns that you think I should watch out for when navigating the field?&lt;/p>
&lt;/blockquote>
&lt;p>I see our industry spending a lot of it’s time throwing away existing processes and methods, sometimes to replace them with something new (which may or may not work better than the old ways) or to reinvent what we just threw away. I think that what we’re seeing evolve out of this process of continuously trying new things is our attempt to turn "software engineering" into an actual engineering discipline on the order of electrical or civil engineering. We’ve still got decades of work to do here, but we’re slowly hammering out best practices, e.g. &lt;a href="https://en.wikipedia.org/wiki/Continuous_delivery">Continuous Integration/Continuous Delivery&lt;/a> is emerging as the best way to do sustainable DevOps.&lt;/p>
&lt;p>What that means for you is that you need to be skeptical about the processes that any software team uses to produce software, since we’re still finding the right way forward here. Don’t be afraid to take a proscribed process with a grain of salt or to try new things to make your team happier and more effective. In general, if something looks like meaningless bookkeeping, it probably is and should be treated accordingly.&lt;/p>
&lt;blockquote>
&lt;p>[ben] Thanks in advance for your help. I appreciate every chance I get to learn from more experienced developers.&lt;/p>
&lt;/blockquote>
&lt;p>Good luck, Ben! Feel free to reach out again. I’m always happy to help budding engineers if I can. And say "hi" to your Dad!&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/access-google-cloud-source-repositories-from-visual-studio</id>
    <title>Access Google Cloud Source Repositories from Visual Studio</title>
    <updated>2016-07-02T07:00:00.000Z</updated>
    <published>2016-07-02T07:00:00.000Z</published>
    <summary>Cloud Source Repositories (CSR) provides support for multiple Git repositories for each project. To log into your CSR repos from within Visual Studio, you’ll need credentials that Visual Studio expects, i.e. a username and password pair. CSR calls these "manually generated credentials" (as opposed to the Google Cloud SDK generated credentials which are the default). Manually Generated Credentials To get manually-generated credentials, do the following: Go to the "Development" section in the Google Cloud Con...</summary>
    <content type="html">&lt;h1>Access Google Cloud Source Repositories from Visual Studio&lt;/h1>
&lt;p>&lt;a href="https://cloud.google.com/source-repositories/">Cloud Source Repositories (CSR)&lt;/a> provides support for multiple Git repositories for each project. To log into your CSR repos from within Visual Studio, you’ll need credentials that Visual Studio expects, i.e. a username and password pair. CSR calls these "manually generated credentials" (as opposed to the Google Cloud SDK generated credentials which are the default).&lt;/p>
&lt;h2>Manually Generated Credentials&lt;/h2>
&lt;p>To get manually-generated credentials, do the following:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Go to &lt;a href="https://console.cloud.google.com/code/develop/browse">the "Development" section&lt;/a> in the Google Cloud Console.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select the Source Code section and choose the repo that you’d like to access locally from the drop-down. Then, open the drop-down again and select "Clone repository".&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://csells.github.io/sb6/public/post-images/2016/csr-vs-image03.png" alt="" />&lt;/p>
&lt;ul>
&lt;li>Change the preferred authentication method to "Manually generated credentials".&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://csells.github.io/sb6/public/post-images/2016/csr-vs-image02.png" alt="" />&lt;/p>
&lt;ul>
&lt;li>Copy the URL starting with https://source.developers.google.com into your clipboard and save it for later. One easy way to do this is to use the Copy button to put the entire git clone command into your clipboard and then trim it to just the URL portion.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://csells.github.io/sb6/public/post-images/2016/csr-vs-image01.png" alt="" />&lt;/p>
&lt;ul>
&lt;li>Click "Generate and store your Git credentials" (and not the OK button).&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://csells.github.io/sb6/public/post-images/2016/csr-vs-image04.png" alt="" />&lt;/p>
&lt;ul>
&lt;li>From the browse window that pops up, gather the Git password (which goes along with the email you used to authenticate). You can ignore the instructions about putting a command into your .netrc file, since Visual Studio will ask you for your username/password pair directly.&lt;/li>
&lt;/ul>
&lt;h2>Logging Into CSR from Visual Studio&lt;/h2>
&lt;p>Now that you have your CSR Git URL, username and password, you have what you need to use your CSR repo from Visual Studio.&lt;/p>
&lt;ul>
&lt;li>To start, choose View | Team Explorer in Visual Studio.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://csells.github.io/sb6/public/post-images/2016/csr-vs-image05.png" alt="" />&lt;/p>
&lt;ul>
&lt;li>
&lt;p>In the Local Git Repositories section, choose the Clone option and add the Git URL for your CSR repo, choose a local directory and press the Clone button.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Visual Studio will prompt you for the username and password.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://csells.github.io/sb6/public/post-images/2016/csr-vs-image00.png" alt="" />&lt;/p>
&lt;p>The username is the email address you used to generate the Git password previously. The password is the one you generated when you asked for manually generated credentials.&lt;/p>
&lt;p>At this point, you can edit your files into Visual Studio normally and use the Team Explorer to see the files that have changed, look at diffs, commit the changes, etc.&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/solitaire-redux</id>
    <title>Solitaire Redux</title>
    <updated>2016-05-06T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="https://csells.github.io/sb6/public/post-images/sol-redux.png"/>
    <category term="fun" label="Fun"/>
    <published>2016-05-06T07:00:00.000Z</published>
    <summary>I've done a bunch of stuff related to Solitaire on my blog for some reason. I guess I'm a fan, although mostly these days I focusing my listening in boring meetings with 2048 or Border Siege (the real reason I have an Android phone). Still, the interest must still be there, because when I saw 10 SOLITAIRE Facts You Probably Didn't Know scroll by on my Flipboard feed, I was curious. I didn't find anything that surprised me (I am a bit of a Solitaire buff after all), but I certainly was surprised to see this ...</summary>
    <content type="html">&lt;h1>Solitaire Redux&lt;/h1>&lt;img src="https://csells.github.io/sb6/public/post-images/sol-redux.png" class="main-blog-image" />
&lt;p>I've done &lt;a href="https://csells.github.io/sb6/search?q=Solitaire">a bunch of stuff related to Solitaire&lt;/a> on my blog for some reason. I guess I'm a fan, although mostly these days I focusing my listening in boring meetings with &lt;a href="http://gabrielecirulli.github.io/2048/">2048&lt;/a> or &lt;a href="https://play.google.com/store/apps/details?id=com.game.drisk">Border Siege&lt;/a> (the real reason I have an Android phone).&lt;/p>
&lt;p>Still, the interest must still be there, because when I saw &lt;a href="https://www.youtube.com/watch?v=tUmeV8QV_Ak">10 SOLITAIRE Facts You Probably Didn't Know&lt;/a> scroll by on my Flipboard feed, I was curious. I didn't find anything that surprised me (I am a bit of a Solitaire buff after all), but I certainly was surprised to see this image come up when I got to Solitaire Fact #1:&lt;/p>&lt;img src="https://csells.github.io/sb6/public/post-images/sol-redux-matts-house.png" />
&lt;p>Apparently Solitaire is the #1 most popular app that runs on Windows and I was the source of that information. To be clear, this is something I heard when I worked at Microsoft and probably was happy to say (never let a good story be ruined by the facts), but I never seen stats to that effect. Caveat emptor, your mileage my vary, some assembly required and all that jazz.&lt;/p>
&lt;p>BTW, for the curious, this is &lt;a href="https://en.wikipedia.org/wiki/Matt_Pietrek">Matt Pietrek&lt;/a>'s office from back in the day. The only computer in that shot that's mine is the laptop. Since it doesn't seem to be running Solitaire, I'm not sure why gameranx chose it, but I do remember liking that shirt...&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/moved-to-blot</id>
    <title>Moved to Blot</title>
    <updated>2015-09-13T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="/public/post-images/blot-logo.png"/>
    <category term="colophon" label="Colophon"/>
    <published>2015-09-13T07:00:00.000Z</published>
    <summary>You're reading this on the 5th version of my blog. Some History The first was a set of static text files I managed in FrontPage. The
editing was nice (once it get the HTML-on-the-disk problems right), but I
dropped everything into the same file, using anchor tags to separate posts in
one giant file, which didn’t scale. The second version was ASP.NET code to pull in my static content (I
did not want to give up my FrontPage) and arrange it into a nice layout. The third version has been lost in the mists of ti...</summary>
    <content type="html">&lt;h1>Moved to Blot&lt;/h1>&lt;img src="/public/post-images/blot-logo.png" class="main-blog-image" />
&lt;p>You're reading this on the 5th version of my blog.&lt;/p>
&lt;h2>Some History&lt;/h2>
&lt;p>The &lt;a href="/12641">first&lt;/a> was a set of static text files I managed in FrontPage. The
editing was nice (once it get the HTML-on-the-disk problems right), but I
dropped everything into the same file, using anchor tags to separate posts in
one giant file, which didn’t scale.&lt;/p>
&lt;p>The &lt;a href="/12642">second version&lt;/a> was ASP.NET code to pull in my static content (I
did not want to give up my FrontPage) and arrange it into a nice layout.&lt;/p>
&lt;p>The third version has been lost in the mists of time.&lt;/p>
&lt;p>The &lt;a href="/12670">fourth version&lt;/a> was a complete rewrite in ASP.NET using SQL
Server as the backing store. The bulk of the content was in SQL Server as either
HTML fragments or image blobs, requiring me to implement a blogging API (I was
way into AtomPub at the time, so that’s the one I implemented). Along the way, I
&lt;a href="/12731">moved this version of the site to Azure&lt;/a>.&lt;/p>
&lt;p>The good news is that Windows Live Writer worked very well with this site (even
better than FrontPage!). The bad news is that it was the only editor that did,
it requires Windows and we no longer live in a single OS world. I want to write my
blog in Markdown from OSX or even my phone.&lt;/p>
&lt;p>So, the fifth version my site, the one you’re looking at now, is running on
&lt;a href="http://blot.im">Blot&lt;/a>. It was the video of the workflow on the home page that
really did it for me. I saw that, paid my $20 and have been spending weekends
exporting the data from my old blog ever since.&lt;/p>
&lt;h2>The Beauty of Blot&lt;/h2>
&lt;p>Here’s what I get by moving to Blot:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A &lt;strong>Dropbox-based&lt;/strong> file management system with complete flexibility to
arrange things how I like. Blot just takes what I give it and uses it to
produce my blog. And I don’t need to maintain certs to protect my writeable
AtomPub endpoint anymore, either. Blot and Dropbox use OAuth2 for such
things and leave me out of it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A &lt;strong>mix of HTML and Markdown content&lt;/strong>, which let me dump all of my old HTML
fragment-based content into Dropbox but still letting me write new content
in Markdown with whatever editor I feel like, including one hosted on
Windows, two hosted on the Mac and one that runs on my phone.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A &lt;strong>live preview&lt;/strong> that’s updated every time I save. I get a preview by
prefixing the post filename with “[draft]”, which produces a cooresponding
“[preview]” file that matches the styles on my site. When I’m ready to
publish, I remove the “[draft]” prefix and it’s live with a date that
matches the first time that Blot saw this post. Or if I want to provide my
own date in the future, I can easily do so with a bit of metadata in the
file. Easy peasy.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Integration with &lt;strong>Disqus&lt;/strong>, where I keep my comments. Not only do new posts
get Disqus comments, but I was able to drop in a bit of metadata to point to
the existing comments for my existing posts.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Direct integration with my existing &lt;strong>Google Analytics&lt;/strong> account by simply
providing my ID.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Forwarding of old URL patterns&lt;/strong> to their new spot on my new site, so I’m
not contribuing to the "dead web."&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Several Blot templates provide &lt;strong>mobile-friendliness out of the box&lt;/strong> (as
defined by &lt;a href="https://www.google.com/webmasters/tools/mobile-friendly/">Google mobile friendliness test
tool&lt;/a>), which is
handy so that mobile searches continue to find things on sellsbrothers.com
without bias. This saved me from having to figure out the issues with the
old site.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Fabulous support&lt;/strong> from David, the proprietor of Blot. I don’t think he’s
had anyone drop 20 years of blog content into Blot all at once before, but
he was super responsive, fixed all of my issues and even added some features
just to support my scenarios. Blot is worth it just for David.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>I get the &lt;strong>piece of mind&lt;/strong> knowing that all of my content is in Dropbox, so
if Blot goes away in another 20 years, then I have confidence that I’ll be
able to take my content and drop it somewhere else or even build my own
host. Also, while I’m not quite 100% confident in Dropbox’s ability to keep
all of my files for all time, I’m got &lt;a href="https://github.com/csells/sb-blot">the whole thing checked into
GitHub&lt;/a>, too, which Blot has no issues
with.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>And I get all of that for &lt;strong>$20 a year&lt;/strong>! That’s a bargain and a half.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2>Not quite everything&lt;/h2>
&lt;p>While Blot does let me drop in JavaScript and do dynamic things, it’s not a
place to host server-side code. So, I rebuilt tinysells.com (the URL forwarding
service that I built for my books) and moved it to the &lt;a href="http://cloud.google.com">Google Cloud
Platform&lt;/a>. It’s about &lt;a href="https://github.com/csells/tinysells/blob/master/tinysells.py">six lines of Python
code&lt;/a> if you’re
interested (not counting the hardcoded data which I’m sure I’ll move someday).&lt;/p>
&lt;p>Also, while Blot has a full set of fully customizable templates, none of them
was quite what I wanted and my hacking has left me vaguely unsatisfied. If
anyone has design advice, I’d sure love to hear it!&lt;/p>
&lt;h2>Where are we?&lt;/h2>
&lt;p>I imagine that I would’ve been just as happy with WordPress as Blot, but David
does such a good job with Blot that I couldn’t say “no." Certainly I’ve blogged
more in the last week than I have since joining Google, so I’ll take that as a
good sign. Blot seems to have inspired me; what more could you ask from a blog
service than that?&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/choose-html-for-ui-development</id>
    <title>Choose HTML for UI Development</title>
    <updated>2015-09-12T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="https://upload.wikimedia.org/wikipedia/commons/thumb/6/61/HTML5_logo_and_wordmark.svg/120px-HTML5_logo_and_wordmark.svg.png"/>
    <category term="spout" label="The Spout"/>
    <published>2015-09-12T07:00:00.000Z</published>
    <summary>On Sept. 10, 2015, Winston Kodogo writes : Hey Chris, if you're feeling happy enough to blog, how about a post giving
us your current thoughts on UI development. A friend of mine has asked me
for advice on moving an in-house app from VB6 to something he can find
people to modify if he needs to, and I can't for the life of me think of
what to tell him. I have your most excellent books on Windows Forms and WPF,
but what would the modern (!) equivalent be. Not WebJS, surely. Thanks for the softball question, W...</summary>
    <content type="html">&lt;h1>Choose HTML for UI Development&lt;/h1>&lt;img style="float: right; padding: 5px;" src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/61/HTML5_logo_and_wordmark.svg/120px-HTML5_logo_and_wordmark.svg.png" />
&lt;p>On Sept. 10, 2015, &lt;a href="/13741#comment-2245753814">Winston Kodogo writes&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Hey Chris, if you're feeling happy enough to blog, how about a post giving
us your current thoughts on UI development. A friend of mine has asked me
for advice on moving an in-house app from VB6 to something he can find
people to modify if he needs to, and I can't for the life of me think of
what to tell him. I have your most excellent books on Windows Forms and WPF,
but what would the modern (!) equivalent be. Not WebJS, surely.&lt;/p>
&lt;/blockquote>
&lt;p>Thanks for the softball question, Winston. I do love to pontificate
extemporaneously (although I have already given away the ending).&lt;/p>
&lt;h1>Pre-Windows&lt;/h1>
&lt;p>I started my Windows career as a &lt;a href="http://www.amazon.com/Programming-Windows-3-1-Charles-Petzold/dp/1556153953">Petzoldian Windows
developer&lt;/a>,
but before that, I developed UIs in
&lt;a href="https://en.wikipedia.org/wiki/Curses_(programming_library)">curses&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/Flavors_(programming_language)">Flavors
Lisp&lt;/a> and even
voice-based UIs in a proprietary AT&amp;amp;T scripting language for which I no longer
remember the name.&lt;/p>
&lt;h1>Windows&lt;/h1>
&lt;p>As a Windows developer, I programmed against 16 and 32-bit
&lt;a href="https://en.wikipedia.org/wiki/Graphics_Device_Interface">GDI&lt;/a> and
&lt;a href="https://en.wikipedia.org/wiki/Windows_USER">User&lt;/a>,
&lt;a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms533798.aspx">GDI+&lt;/a>,
&lt;a href="https://en.wikipedia.org/wiki/Microsoft_Foundation_Class_Library">MFC&lt;/a>,
&lt;a href="https://en.wikipedia.org/wiki/Windows_Template_Library">WTL&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/Windows_Forms">Windows
Forms&lt;/a>,
&lt;a href="https://en.wikipedia.org/wiki/Windows_Presentation_Foundation">WPF&lt;/a>,
&lt;a href="https://dev.windows.com/en-us/develop/winjs">WinJS&lt;/a>,
&lt;a href="https://en.wikipedia.org/wiki/Microsoft_Silverlight">Silverlight&lt;/a> and
&lt;a href="http://xamarin.com/forms">Xamarin Forms&lt;/a>. I've even written &lt;a href="/writing">books, articles
and presentations&lt;/a> about many of these toolkits.&lt;/p>
&lt;p>And even now, as I type this, I'm using a different framework,
&lt;a href="http://daringfireball.net/projects/markdown/">Markdown&lt;/a>, to produce the UI
you’re using now.&lt;/p>
&lt;h1>Transcend Windows&lt;/h1>
&lt;p>It's this last fact that leads me to my pretty much universal recommendation for
UI development: The UI framework with the most reach, the best tools, the most
community support and the best staying power is, of course, HTML, with it's
kissing cousins, JavaScript and CSS.&lt;/p>
&lt;p>There are good reasons to choose others, of course:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Are you building a &lt;strong>desktop game&lt;/strong>? Use &lt;a href="https://www.opengl.org/">OpenGL&lt;/a>
or &lt;a href="https://en.wikipedia.org/wiki/DirectX">DirectX&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Are you building a &lt;strong>mobile game&lt;/strong>? Use the iOS or Android APIs or, even
better, &lt;a href="https://unity3d.com/">Unity&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Do you love C# and .NET&lt;/strong>? Then some implementation of
&lt;a href="https://en.wikipedia.org/wiki/Extensible_Application_Markup_Language">XAML&lt;/a>
may suit your needs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Are you targeting developers with &lt;strong>automation&lt;/strong> or specific integration
needs? Then a command line interface is probably what you want.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>But other than that, &lt;strong>my default UI development advice is always always HTML&lt;/strong>.&lt;/p>
&lt;h1>HTML How&lt;/h1>
&lt;p>The beauty of an HTML-based UI framework is that it has grown steadily in
capability, usage and ubiquity since it was introduced in 1993. It's hard to
find an environment where HTML doesn't run:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>**Desktop Browser: **This is where HTML was first shown and it arguably
shows best here. There's little you can't do in this environment, including
near native games using &lt;a href="https://blog.mozilla.org/blog/2014/03/12/mozilla-and-epic-preview-unreal-engine-4-running-in-firefox/">WebGL, Enscripten and
asm.js&lt;/a>
(soon to become
&lt;a href="https://brendaneich.com/2015/06/from-asm-js-to-webassembly/">WebAssembly&lt;/a>).&lt;/p>
&lt;p>This is probably your best bet for any kind of internal app, e.g. the kind
of thing that VB6 and WinForms are usually used for. Toolkits like
&lt;a href="https://angularjs.org/">Angular&lt;/a> and
&lt;a href="http://facebook.github.io/react/">React&lt;/a> are popular for desktop browser
apps because they provide the end-to-end developer story while still having
rich extension libraries.&lt;/p>
&lt;p>That said, if I were going to tackle a new web site or web app today, I’d
probably use &lt;a href="http://webcomponents.org/">WebComponents&lt;/a> (and
&lt;a href="https://www.polymer-project.org/">Polymer&lt;/a>) for the excellent reasons
that Joe Gregorio lays out in &lt;a href="https://www.youtube.com/watch?v=GMWAHzXQnNM">his OSCON 2015
talk&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**Mobile Browser: **Today’s smartphone-based browsers are very capable and
adapt to desktop-based web sites fairly well. However, I do recommend making
sure your desktop web sites work well on mobile as well, if for no other
reason than you want to make sure you don’t lose your ranking on Google,
which now prefers mobile-friendly sites for mobile search results (and
provides &lt;a href="https://www.google.com/webmasters/tools/mobile-friendly/">a tool to help you get your site
ready&lt;/a>).&lt;/p>
&lt;p>With the modern enterprise moving towards mobile as fast now as they have
been moving towards the web-based intranet over the last decade, I’d
recommend making sure that your internal web sites/apps work well on mobile
if you want to avoid the CTO stopping by your desk in the near future.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**Desktop Stand-alone App: **The new trend (with companies like
&lt;a href="https://desktop.github.com/">GitHub&lt;/a> and
&lt;a href="https://code.visualstudio.com/">Microsoft&lt;/a> on board) for building
cross-platform, stand-alone desktop apps is to use HTML, but package it into
an app, specifically using something like
&lt;a href="http://electron.atom.io/">Electron&lt;/a>. This is the new hotness, but this is
what I’d do if I wanted to build a stand-alone desktop app today.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>**Mobile Store App: **Most mobile apps today are built for the iOS and
Google Play stores, although increasingly enterprises are building mobile
apps for internal use and distributing them internally using private stores
like &lt;a href="https://www.appaloosa-store.com/">Appaloosa&lt;/a>.&lt;/p>
&lt;p>Today, mobile apps are built overwelminging using the platform-specific
native APIs, most often with two separate teams for each app, one for iOS
and one for Android. However, as mobile becomes more of an enterprise
platform, you want apps that are developed quickly, can be maintained easily
and can be built with a smaller number of developers, which all boils down
to one thing: you want to have a single codebase for your internal mobile
apps instead of one codebase per platform.&lt;/p>
&lt;p>Today, you have two viable alternatives when building mobile apps that
target multiple platforms from a single source code base:
&lt;a href="https://xamarin.com/platform">Xamarin&lt;/a> and &lt;a href="http://phonegap.com/">Adobe
PhoneGap&lt;/a>. Xamarin is essentially cross-platform
.NET with some UI controls and native compilation thrown in, whereas
PhoneGap is a framework for hosting HTML on mobile platforms (as well as
others, but no one does that) along with a platform-agnostic JavaScript API
that maps to native functionality.&lt;/p>
&lt;p>I've used both of these frameworks and they both have their pros and cons.
Xamarin has a simple UI framework that changes it’s look ’n’ feel depending
on the platform your app is running on, but PhoneGap does not. In that case,
I’d also bring &lt;a href="http://ionicframework.com/">Ionic&lt;/a> into the mix, which
will let you write your app in HTML but give you the native UI as
appropriate (and a beautiful one at that).&lt;/p>
&lt;p>There has been much said about whether HTML is appropriate for building
mobile apps and while it’s possible to build &lt;a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-rebuilding-facebook-for-ios/10151036091753920">a bad
app&lt;/a>
using any platform, in my experience, it’s not hard to get &lt;a href="https://www.sencha.com/blog/the-making-of-fastbook-an-html5-love-story/">an app that’s
built in HTML to look ’n’ feel just like a native
app&lt;/a>.
When I did it, there were some tricks involved, but frameworks like Ionic
pretty much take away the need for that these days. Of course there are
always going to be apps that can’t be built this way, but as a percentage
(leaving out twitch games), that number is getting smaller and smaller.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1>Where are we?&lt;/h1>
&lt;p>Of course, the best and worst part of the web platform is that the community
changes it’s mind about how sites and apps should be built for the web platform
about as often as I change my underwear, so the specific recommendations are
merely appropriate for this point in time. The general guidance remains the
same, however: &lt;strong>choose HTML for your UI development&lt;/strong> unless you’ve got a darn
good reason not to.&lt;/p>
</content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/13741</id>
    <title>Blog Past and Future</title>
    <updated>2015-09-05T07:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="/public/post-images/13741-265.png"/>
    <category term="colophon" label="Colophon"/>
    <published>2015-09-05T07:00:00.000Z</published>
    <summary>This blog started as a single static page in 1995 as a set of links to provide to my students while I was teaching at DevelopMentor. I would like to show you a screenshot of that initial page, but as it turns out, the site predates the internet archive, so I can only show you what it looked like in 1998: I guess I was doing some independent contracting at the time, because I was billing myself as a “Windows Object Architect,” whatever that is. BTW, I wouldn’t call that phone number if I were you – I don’t k...</summary>
    <content type="html">&lt;h1>Blog Past and Future&lt;/h1>
&lt;p>This blog started as a single static page in 1995 as a set of links to provide to my students while I was teaching at DevelopMentor. I would like to show you a screenshot of that initial page, but as it turns out, the site predates the internet archive, so I can only show you what it looked like in 1998:&lt;/p>  &lt;p>&lt;a href="/public/post-images/13741-264.png">&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/public/post-images/13741-265.png" width="552" height="480" />&lt;/a>&lt;/p>  &lt;p>I guess I was doing some independent contracting at the time, because I was billing myself as a “Windows Object Architect,” whatever that is. BTW, I wouldn’t call that phone number if I were you – I don’t know who it will ring, but it won’t be me. The rest still works, however.&lt;/p>  &lt;h2>Posts&lt;/h2>  &lt;p>Over the years, I’ve done more or less blogging based on my current gig:&lt;/p>  &lt;p>&lt;a href="/public/post-images/13741-266.png">&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/public/post-images/13741-267.png" width="640" height="385" />&lt;/a>&lt;/p>  &lt;p>This post will be my 2,650th, with the peak in 2003.&lt;/p>  &lt;h2>Tweets&lt;/h2>  &lt;p>Now, I’m far more active on Twitter:&lt;/p>  &lt;p>&lt;a href="/public/post-images/13741-268.png">&lt;img title="image" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="image" src="/public/post-images/13741-269.png" width="635" height="768" />&lt;/a>&lt;/p>  &lt;p>My first tweet was in October of 2009. I’d had an account for a while before that, but I just didn’t get it at first. Now I love it and have produced 3,053 tweets in 7 years. I find that while I like long-form writing a great deal, it’s much easier to find the time to turn a single thought into 140 characters then into 1400 words.&lt;/p>  &lt;h2>Blot&lt;/h2>  &lt;p>This is all coming up now because I’m busy moving to &lt;a href="http://blot.im">Blot&lt;/a>, which gives me a chance to take a look back at all of this content I’ve generated. I love Blot because I can dump all of my old content into Dropbox in HTML fragment format (along with some per-file metadata) and Blot will produce a reasonable static site for me. By moving to the file system from a blogging API (AtomPub in my case), I can remove the need to use blogging tools (like &lt;a href="http://windows.microsoft.com/en-us/windows-live/essentials">Live Writer&lt;/a>) and instead switch to any reasonable editor I want.&lt;/p>  &lt;p>Further, since Blot supports all kinds of formats, I can move to Markdown for new content but not have to try to translate all of my HTML content, which is a lifesaver.&lt;/p>  &lt;p>Unfortunately, the port to Blot is taking longer than I’d like for two reasons. The first is simply that &lt;a href="https://twitter.com/davidmerfieId">David Merfield&lt;/a> just didn’t anticipate some old guy dumping 20 years worth of blog content into his system, so there have been some problems. The good news is that David is &lt;em>extremely &lt;/em>responsive. Every system has issues, but the measure of quality is how long it takes to go from issue reported to issue fixed and in the case of Blot, that time is sometimes days but often hours, which includes adding features specifically for my use case that he just hasn’t needed before. Highly recommended.&lt;/p>  &lt;h2>The Dead Web&lt;/h2>  &lt;p>The other reason that this translation is taking some time is that I’ve got a few link formats in my content and relied on &lt;a href="http://www.iis.net/downloads/microsoft/url-rewrite">IIS URL rewriting&lt;/a> to keep them working. As I move to Blot, it’s easier to just fix the URLs as I extract the data from SQL Server (and I still use and love &lt;a href="/12425">RegexD&lt;/a> to figure out how to translate those URLs). As I do that, I’m testing for 404 links on my new site to make sure that I haven’t screwed anything up (I like &lt;a href="http://home.snafu.de/tilman/xenulink.html">Xenu's Link Sleuth&lt;/a> for that work).&lt;/p>  &lt;p>What I’m finding is that I’m fixing my own URLs but finding hundreds of links into the larger web that are broken. That’s just depressing. I work hard to keep my site running for anyone that wants the old data and I’ll be working with David on a URL forwarding scheme and 404 logging to keep external links working as I move to Blot. However, that doesn’t seem like an important goal for other folks.&lt;/p>  &lt;h2>Where Are We?&lt;/h2>  &lt;p>Still, I get to move to Blot and use whatever editor I want from whatever OS I want, so I’m a happy guy. Hopefully that happiness will translate into more blog posts, but if it doesn’t, I imagine I’ll still be &lt;a href="https://twitter.com/csells">spouting off on Twitter&lt;/a> at the very least. Everyone needs a place to spout off sometimes.&lt;/p>  </content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/13740</id>
    <title>Handling Orientation Changes in Xamarin.Forms Apps</title>
    <updated>2015-01-04T08:00:00.000Z</updated>
    <link rel="enclosure" type="image/png" href="/public/post-images/13740-259.png"/>
    <category term=".net" label=".NET"/>
    <category term="spout" label="The Spout"/>
    <published>2015-01-04T08:00:00.000Z</published>
    <summary>By default, Xamarin.Forms handles orientation changes for you automatically, e.g. Xamarin.Forms handles orientation changes automatically In this example, the labels are above the text entries in both the portrait and the landscape orientation, which Xamar</summary>
    <content type="html">&lt;h1>Handling Orientation Changes in Xamarin.Forms Apps&lt;/h1>
&lt;p>By default, Xamarin.Forms handles orientation changes for you automatically, e.g.&lt;/p> &lt;a href="/public/post-images/13740-258.png">&lt;img title="ss1[5]" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="ss1[5]" src="/public/post-images/13740-259.png" width="292" height="484" />&lt;/a>  &lt;p>&lt;a href="/public/post-images/13740-260.png">&lt;img title="ss4" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="ss4" src="/public/post-images/13740-261.png" width="644" height="388" />&lt;/a>&lt;/p>  &lt;p>&lt;em>Xamarin.Forms handles orientation changes automatically&lt;/em>&lt;/p>  &lt;p>In this example, the labels are above the text entries in both the portrait and the landscape orientation, which Xamarin.Forms can do without any help from me. However, what if I want to put the labels to the left of the text entries in landscape mode to take better advantage of the space? Further, in the general case, you may want to have different layouts for each orientation. To be able to do that, you need to be able to detect the device’s current orientation and get a notification when it changes. Unfortunately, Xamarin.Forms provides neither, but luckily it’s not hard for you to do it yourself.&lt;/p>  &lt;h2>Finding the Current Orientation&lt;/h2>  &lt;p>To determine whether you’re in portrait or landscape mode is pretty easy:&lt;/p>  &lt;pre class="code">&lt;span style="background: white; color: blue">static bool &lt;/span>&lt;span style="background: white; color: black">IsPortrait(&lt;/span>&lt;span style="background: white; color: #2b91af">Page &lt;/span>&lt;span style="background: white; color: black">p) { &lt;/span>&lt;span style="background: white; color: blue">return &lt;/span>&lt;span style="background: white; color: black">p.Width &amp;lt; p.Height; }&lt;/span>&lt;/pre>

&lt;p>This function makes the assumption that portrait mode has a smaller width. This doesn’t work for all future imaginable devices, of course, but in the case of a square device, you’ll just have to take your changes I guess.&lt;/p>

&lt;h2>Orientation Change Notifications&lt;/h2>

&lt;p>Likewise, Xamarin.Forms doesn’t have any kind of a OrientationChanged event, but I find that handling SizeChanged does the trick just as well:&lt;/p>

&lt;pre class="code">&lt;span style="background: white; color: black">SizeChanged += (sender, e) =&amp;gt; Content = IsPortrait(&lt;/span>&lt;span style="background: white; color: blue">this&lt;/span>&lt;span style="background: white; color: black">) ? portraitView : landscapeView;&lt;/span>&lt;/pre>

&lt;p>The SizeChanged event seems to get called exactly once as the user goes from portrait to landscape mode (at least in my debugging, that was true). The different layouts can be whatever you want them to be. I was able to use this technique and get myself a little extra vertical space in my landscape layout:&lt;/p>

&lt;p>&lt;a href="/public/post-images/13740-262.png">&lt;img title="ss2" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="ss2" src="/public/post-images/13740-263.png" width="644" height="388" />&lt;/a>&lt;/p>

&lt;p>&lt;em>Using a custom layout to put the labels on the left of the text entries instead of on top&lt;/em>&amp;#160;&lt;/p>

&lt;p>Of course, I could use this technique to do something completely differently in each orientation, but I was hoping that the two layouts made sense to the user and didn’t even register as special, which Xamarin.Forms allowed me to do.&lt;/p>  </content>
  </entry>
  <entry>
    <id>https://csells.github.io/sb6/13739</id>
    <title>Launching the Native Map App from Xamarin.Forms</title>
    <updated>2015-01-02T08:00:00.000Z</updated>
    <category term=".net" label=".NET"/>
    <category term="spout" label="The Spout"/>
    <category term=".net" label=".NET"/>
    <category term="spout" label="The Spout"/>
    <published>2015-01-02T08:00:00.000Z</published>
    <summary>My goal was to take the name and address of a place and show it on the native map app regardless of what mobile platform on which my app was running. While Xamarin.Forms provides a cross-platform API to launch the URL that starts the map app, the URL format is different depending on whether you’re using the Windows Phone 8 URI scheme for Bing maps, the Android Data URI scheme for the map intent or the Apple URL scheme for maps. This is what I came up with: public class &lt;span style="back</summary>
    <content type="html">&lt;h1>Launching the Native Map App from Xamarin.Forms&lt;/h1>
&lt;p>My goal was to take the name and address of a place and show it on the native map app regardless of what mobile platform on which my app was running. While Xamarin.Forms provides a cross-platform API to launch the URL that starts the map app, the URL format is different depending on whether you’re using &lt;a href="http://msdn.microsoft.com/en-us/library/windows/apps/jj635237.aspx">the Windows Phone 8 URI scheme for Bing maps&lt;/a>, &lt;a href="http://developer.android.com/guide/components/intents-common.html#Maps">the Android Data URI scheme for the map intent&lt;/a> or &lt;a href="https://developer.apple.com/library/ios/featuredarticles/iPhoneURLScheme_Reference/MailLinks/MailLinks.html#//apple_ref/doc/uid/TP40007899-CH4-SW1">the Apple URL scheme for maps&lt;/a>.&lt;/p>  &lt;p>This is what I came up with:&lt;/p>  &lt;pre class="code">&lt;span style="background: white; color: blue">&lt;pre class="code">&lt;span style="background: white; color: blue">public class &lt;/span>&lt;span style="background: white; color: #2b91af">Place &lt;/span>&lt;span style="background: white; color: black">{
  &lt;/span>&lt;span style="background: white; color: blue">public string &lt;/span>&lt;span style="background: white; color: black">Name { &lt;/span>&lt;span style="background: white; color: blue">get&lt;/span>&lt;span style="background: white; color: black">; &lt;/span>&lt;span style="background: white; color: blue">set&lt;/span>&lt;span style="background: white; color: black">; }
  &lt;/span>&lt;span style="background: white; color: blue">public string &lt;/span>&lt;span style="background: white; color: black">Vicinity { &lt;/span>&lt;span style="background: white; color: blue">get&lt;/span>&lt;span style="background: white; color: black">; &lt;/span>&lt;span style="background: white; color: blue">set&lt;/span>&lt;span style="background: white; color: black">; }
  &lt;/span>&lt;span style="background: white; color: blue">public &lt;/span>&lt;span style="background: white; color: #2b91af">Geocode &lt;/span>&lt;span style="background: white; color: black">Location { &lt;/span>&lt;span style="background: white; color: blue">get&lt;/span>&lt;span style="background: white; color: black">; &lt;/span>&lt;span style="background: white; color: blue">set&lt;/span>&lt;span style="background: white; color: black">; }
  &lt;/span>&lt;span style="background: white; color: blue">public &lt;/span>&lt;span style="background: white; color: #2b91af">Uri &lt;/span>&lt;span style="background: white; color: black">Icon { &lt;/span>&lt;span style="background: white; color: blue">get&lt;/span>&lt;span style="background: white; color: black">; &lt;/span>&lt;span style="background: white; color: blue">set&lt;/span>&lt;span style="background: white; color: black">; }
}&lt;/span>&lt;span style="background: white; color: black">
&lt;/span>&lt;/pre>public void &lt;/span>&lt;span style="background: white; color: black">LaunchMapApp(&lt;/span>&lt;span style="background: white; color: #2b91af">Place &lt;/span>&lt;span style="background: white; color: black">place) {
  &lt;/span>&lt;span style="background: white; color: green">// Windows Phone doesn't like ampersands in the names and the normal URI escaping doesn't help
  &lt;/span>&lt;span style="background: white; color: blue">var &lt;/span>&lt;span style="background: white; color: black">name = place.Name.Replace(&lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;&amp;amp;&amp;quot;&lt;/span>&lt;span style="background: white; color: black">, &lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;and&amp;quot;&lt;/span>&lt;span style="background: white; color: black">); &lt;/span>&lt;span style="background: white; color: green">// var name = Uri.EscapeUriString(place.Name);
  &lt;/span>&lt;span style="background: white; color: blue">var &lt;/span>&lt;span style="background: white; color: black">loc = &lt;/span>&lt;span style="background: white; color: blue">string&lt;/span>&lt;span style="background: white; color: black">.Format(&lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;{0},{1}&amp;quot;&lt;/span>&lt;span style="background: white; color: black">, place.Location.Latitude, place.Location.Longitude);
  &lt;/span>&lt;span style="background: white; color: blue">var &lt;/span>&lt;span style="background: white; color: black">addr = &lt;/span>&lt;span style="background: white; color: #2b91af">Uri&lt;/span>&lt;span style="background: white; color: black">.EscapeUriString(place.Vicinity);

  &lt;/span>&lt;span style="background: white; color: blue">var &lt;/span>&lt;span style="background: white; color: black">request = &lt;/span>&lt;span style="background: white; color: #2b91af">Device&lt;/span>&lt;span style="background: white; color: black">.OnPlatform(
    &lt;/span>&lt;span style="background: white; color: green">// iOS doesn't like %s or spaces in their URLs, so manually replace spaces with +s
    &lt;/span>&lt;span style="background: white; color: blue">string&lt;/span>&lt;span style="background: white; color: black">.Format(&lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;http://maps.apple.com/maps?q={0}&amp;amp;sll={1}&amp;quot;&lt;/span>&lt;span style="background: white; color: black">, name.Replace(&lt;/span>&lt;span style="background: white; color: #a31515">' '&lt;/span>&lt;span style="background: white; color: black">, &lt;/span>&lt;span style="background: white; color: #a31515">'+'&lt;/span>&lt;span style="background: white; color: black">), loc),

    &lt;/span>&lt;span style="background: white; color: green">// pass the address to Android if we have it
    &lt;/span>&lt;span style="background: white; color: blue">string&lt;/span>&lt;span style="background: white; color: black">.Format(&lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;geo:0,0?q={0}({1})&amp;quot;&lt;/span>&lt;span style="background: white; color: black">, &lt;/span>&lt;span style="background: white; color: blue">string&lt;/span>&lt;span style="background: white; color: black">.IsNullOrWhiteSpace(addr) ? loc : addr, name),

    &lt;/span>&lt;span style="background: white; color: green">// WinPhone
    &lt;/span>&lt;span style="background: white; color: blue">string&lt;/span>&lt;span style="background: white; color: black">.Format(&lt;/span>&lt;span style="background: white; color: #a31515">&amp;quot;bingmaps:?cp={0}&amp;amp;q={1}&amp;quot;&lt;/span>&lt;span style="background: white; color: black">, loc, name)
  );

  &lt;/span>&lt;span style="background: white; color: #2b91af">Device&lt;/span>&lt;span style="background: white; color: black">.OpenUri(&lt;/span>&lt;span style="background: white; color: blue">new &lt;/span>&lt;span style="background: white; color: #2b91af">Uri&lt;/span>&lt;span style="background: white; color: black">(request));
}&lt;/span>&lt;/pre>

&lt;p>This code was testing on several phone and tablet emulators and on 5 actual devices: an iPad running iOS 8, an iPad Touch running iOS 8, a Nokia Lumia 920 running Windows Phone 8.1, an LG G3 running Android 4.4 and an XO tablet running Android 4.1. As you can tell, each platform has not only it’s own URI format for launching the map app, but quirks as well. However, this code works well across platforms. Enjoy.&lt;/p>  </content>
  </entry>
</feed>